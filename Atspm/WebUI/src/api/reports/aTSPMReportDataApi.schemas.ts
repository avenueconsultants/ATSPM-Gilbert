/**
 * Generated by orval v6.23.0 üç∫
 * Do not edit manually.
 * ATSPM Report Data Api
 * ATSPM Report Data with OpenAPI, Swashbuckle, and API versioning.
 * OpenAPI spec version: 1.0
 */
export interface YellowRedActivationsPlan {
  averageTimeViolations?: number;
  readonly end?: string;
  percentSevereViolations?: number;
  percentViolations?: number;
  readonly planDescription?: string | null;
  planNumber?: string | null;
  severeViolations?: number;
  readonly start?: string;
  totalViolations?: number;
}

export interface YellowRedActivationsResult {
  approachDescription?: string | null;
  approachId?: number;
  detectorEvents?: DataPointForDouble[] | null;
  direction?: string | null;
  end?: string;
  isPermissivePhase?: boolean;
  locationDescription?: string | null;
  locationIdentifier?: string | null;
  movementType?: string | null;
  permissivePhaseNumber?: number | null;
  phaseType?: string | null;
  plans?: YellowRedActivationsPlan[] | null;
  protectedPhaseNumber?: number;
  redClearanceEvents?: DataPointForDouble[] | null;
  redEvents?: DataPointForDouble[] | null;
  severeViolations?: number;
  start?: string;
  totalViolations?: number;
  yellowEvents?: DataPointForDouble[] | null;
  yellowLightOccurences?: number;
}

export interface YellowRedActivationsOptions {
  end?: string;
  locationIdentifier?: string | null;
  metricTypeId?: number;
  severeLevelSeconds?: number;
  start?: string;
}

export type XAxisType = typeof XAxisType[keyof typeof XAxisType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const XAxisType = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
  NUMBER_4: 4,
  NUMBER_5: 5,
} as const;

export interface WatchDogProductInfo {
  model?: WatchDogFirmwareCountWatchDogModel[] | null;
  name?: string | null;
}

export interface WatchDogOptions {
  areaId?: number | null;
  end?: string;
  isFilteredEvents?: boolean;
  issueType?: number | null;
  jurisdictionId?: number | null;
  locationIdentifier?: string | null;
  regionId?: number | null;
  start?: string;
}

export type WatchDogIssueTypes = typeof WatchDogIssueTypes[keyof typeof WatchDogIssueTypes];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const WatchDogIssueTypes = {
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
  NUMBER_4: 4,
  NUMBER_5: 5,
  NUMBER_6: 6,
  NUMBER_7: 7,
  NUMBER_8: 8,
  NUMBER_9: 9,
} as const;

export interface WatchDogLogEventDTO {
  areas?: AreaDTO[] | null;
  componentId?: number;
  componentType?: WatchDogComponentTypes;
  details?: string | null;
  id?: number;
  issueType?: WatchDogIssueTypes;
  jurisdictionId?: number | null;
  jurisdictionName?: string | null;
  locationId?: number;
  locationIdentifier?: string | null;
  phase?: number | null;
  regionDescription?: string | null;
  regionId?: number | null;
  timestamp?: string;
}

export interface WatchDogResult {
  end?: string;
  logEvents?: WatchDogLogEventDTO[] | null;
  start?: string;
}

export interface WatchDogIssueTypeGroup {
  issueType?: WatchDogIssueTypes;
  name?: string | null;
  products?: WatchDogProductInfo[] | null;
}

export interface WatchDogFirmwareCount {
  counts?: number;
  name?: string | null;
}

export interface WatchDogFirmwareCountWatchDogModel {
  firmware?: WatchDogFirmwareCount[] | null;
  name?: string | null;
}

export interface WatchDogDashboardOptions {
  end?: string;
  start?: string;
}

export type WatchDogComponentTypes = typeof WatchDogComponentTypes[keyof typeof WatchDogComponentTypes];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const WatchDogComponentTypes = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
} as const;

export interface WaitTimeResult {
  approachDescription?: string | null;
  approachId?: number;
  average?: DataPointForDouble[] | null;
  detectionTypes?: string | null;
  end?: string;
  forceOffs?: DataPointForDouble[] | null;
  gapOuts?: DataPointForDouble[] | null;
  locationDescription?: string | null;
  locationIdentifier?: string | null;
  maxOuts?: DataPointForDouble[] | null;
  phaseNumber?: number;
  plans?: PlanWaitTime[] | null;
  readonly planSplits?: readonly DataPointForDouble[] | null;
  start?: string;
  unknowns?: DataPointForDouble[] | null;
  volumes?: DataPointForInt[] | null;
}

export interface WaitTimeOptions {
  binSize?: number;
  end?: string;
  locationIdentifier?: string | null;
  start?: string;
}

export type VolumeResultDemandList = {[key: string]: number} | null;

export interface VolumeResult {
  calculatedVolumeBoundary?: number;
  crossProductReview?: boolean;
  crossProductValue?: number;
  decisionBoundariesReview?: boolean;
  demandList?: VolumeResultDemandList;
  readonly direction?: string | null;
  leftTurnVolume?: number;
  readonly opposingDirection?: string | null;
  opposingLanes?: number;
  opposingThroughVolume?: number;
}

export interface VolumeOptions {
  approachId?: number;
  daysOfWeek?: number[] | null;
  end?: string;
  endHour?: number;
  endMinute?: number;
  locationIdentifier?: string | null;
  start?: string;
  startHour?: number;
  startMinute?: number;
}

export interface TurningMovementCountsOptions {
  binSize?: number;
  end?: string;
  locationIdentifier?: string | null;
  readonly metricTypeId?: number;
  start?: string;
}

export interface TurningMovementCountsLanesResult {
  direction?: string | null;
  end?: string;
  lanes?: Lane[] | null;
  laneType?: string | null;
  laneUtilizationFactor?: number | null;
  locationDescription?: string | null;
  locationIdentifier?: string | null;
  movementType?: string | null;
  peakHour?: string | null;
  peakHourFactor?: number | null;
  peakHourVolume?: number | null;
  plans?: Plan[] | null;
  start?: string;
  totalHourlyVolumes?: DataPointForInt[] | null;
  totalVolume?: number;
  totalVolumes?: DataPointForInt[] | null;
}

export interface TurningMovementCountData {
  direction?: string | null;
  laneType?: string | null;
  movementType?: string | null;
  peakHourVolume?: DataPointForInt;
  volumes?: DataPointForInt[] | null;
}

export interface TurningMovementCountsResult {
  charts?: TurningMovementCountsLanesResult[] | null;
  peakHour?: DateTimeInt32KeyValuePair;
  peakHourFactor?: number;
  table?: TurningMovementCountData[] | null;
}

export interface TransitSignalPriorityOptions {
  dates?: string[] | null;
  locationsAndPhases?: LocationPhases[] | null;
}

export interface TransitSignalPhase {
  averageSplit?: number;
  forceOffsLessThan40TSPMax?: number;
  forceOffsLessThan60TSPMax?: number;
  forceOffsLessThan80TSPMax?: number;
  maxExtension?: number;
  maxReduction?: number;
  minGreen?: number;
  minTime?: number;
  notes?: string | null;
  percentGapOuts?: number;
  percentileSplit50th?: number;
  percentileSplit85th?: number;
  percentMaxOutsForceOffs?: number;
  percentSkips?: number;
  phaseNumber?: number;
  priorityMax?: number;
  priorityMin?: number;
  programmedSplit?: number;
  recommendedTSPMax?: number | null;
  redClearance?: number;
  skipsGreaterThan70TSPMax?: number;
  yellow?: number;
}

export interface TransitSignalPriorityPlan {
  phases?: TransitSignalPhase[] | null;
  planNumber?: number;
}

export interface TransitSignalPriorityResult {
  locationPhases?: LocationPhases;
  transitSignalPlans?: TransitSignalPriorityPlan[] | null;
}

export interface TimingAndActuationsOptions {
  end?: string;
  globalEventCodesList?: number[] | null;
  globalEventParamsList?: number[] | null;
  locationIdentifier?: string | null;
  phaseEventCodesList?: number[] | null;
  start?: string;
}

export type TimingAndActuationsForPhaseResultPhaseCustomEvents = {[key: string]: DataPointForInt[] | null} | null;

export interface TimingAndActuationsForPhaseResult {
  advanceCountDetectors?: DetectorEventDto[] | null;
  advancePresenceDetectors?: DetectorEventDto[] | null;
  approachDescription?: string | null;
  approachId?: number;
  cycleAllEvents?: CycleEventsDto[] | null;
  end?: string;
  isPhaseOverLap?: boolean;
  laneByLanesDetectors?: DetectorEventDto[] | null;
  locationDescription?: string | null;
  locationIdentifier?: string | null;
  pedestrianEvents?: DetectorEventDto[] | null;
  pedestrianIntervals?: CycleEventsDto[] | null;
  phaseCustomEvents?: TimingAndActuationsForPhaseResultPhaseCustomEvents;
  phaseNumber?: number;
  phaseNumberSort?: string | null;
  phaseType?: string | null;
  start?: string;
  stopBarDetectors?: DetectorEventDto[] | null;
}

export interface TimeSpaceEventBase {
  finalX?: string;
  initialX?: string;
  isDetectorOn?: boolean | null;
}

export interface TimeSpaceDiagramResultForPhase {
  advanceCountDetectors?: TimeSpaceEventBase[] | null;
  approachDescription?: string | null;
  approachId?: number;
  cycleAllEvents?: CycleEventsDto[] | null;
  distanceToNextLocation?: number;
  end?: string;
  greenTimeEvents?: TimeSpaceEventBase[] | null;
  laneByLaneCountDetectors?: TimeSpaceEventBase[] | null;
  locationDescription?: string | null;
  locationIdentifier?: string | null;
  phaseNumber?: number;
  phaseNumberSort?: string | null;
  phaseType?: string | null;
  speed?: number;
  start?: string;
  stopBarPresenceDetectors?: TimeSpaceEventBase[] | null;
}

export interface TimeSpaceDiagramOptions {
  end?: string;
  extendStartStopSearch?: number;
  locationIdentifier?: string | null;
  routeId?: number;
  showAllLanesInfo?: boolean;
  speedLimit?: number | null;
  start?: string;
}

export interface TimeSpaceDiagramAverageResult {
  approachDescription?: string | null;
  approachId?: number;
  coordinatedPhases?: boolean;
  cycleAllEvents?: CycleEventsDto[] | null;
  cycleLength?: number;
  distanceToNextLocation?: number;
  end?: string;
  greenTimeEvents?: TimeSpaceEventBase[] | null;
  locationDescription?: string | null;
  locationIdentifier?: string | null;
  readonly offset?: number;
  phaseNumber?: number;
  phaseNumberSort?: string | null;
  phaseType?: string | null;
  programmedSplit?: number;
  speed?: number;
  start?: string;
}

export interface TimeSpaceDiagramAverageOptions {
  coordinatedPhases?: LocationWithCoordPhases[] | null;
  daysOfWeek?: number[] | null;
  endDate?: string;
  endTime?: string;
  routeId?: number;
  sequence?: LocationWithSequence[] | null;
  speedLimit?: number | null;
  startDate?: string;
  startTime?: string;
}

export type TimePeriodOptions = typeof TimePeriodOptions[keyof typeof TimePeriodOptions];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TimePeriodOptions = {
  NUMBER_0: 0,
  NUMBER_1: 1,
} as const;

export interface TimeOptions {
  daysOfWeek?: DayOfWeek[] | null;
  end?: string;
  selectedBinSize?: BinSize;
  start?: string;
  timeOfDayEndHour?: number | null;
  timeOfDayEndMinute?: number | null;
  timeOfDayStartHour?: number | null;
  timeOfDayStartMinute?: number | null;
  timeOption?: TimePeriodOptions;
}

export interface SummaryData {
  kFactor?: number;
  opposingDFactor?: number;
  opposingKFactor?: number;
  opposingPeakHour?: string | null;
  opposingPeakHourFactor?: number;
  opposingPeakHourVolume?: number;
  opposingTotalVolume?: number;
  peakHour?: string | null;
  peakHourFactor?: number;
  peakHourVolume?: number;
  primaryDFactor?: number;
  primaryKFactor?: number;
  primaryPeakHour?: string | null;
  primaryPeakHourFactor?: number;
  primaryPeakHourVolume?: number;
  primaryTotalVolume?: number;
  totalVolume?: number;
}

export interface SplitMonitorResult {
  end?: string;
  readonly forceOffs?: readonly DataPointForDouble[] | null;
  readonly gapOuts?: readonly DataPointForDouble[] | null;
  locationDescription?: string | null;
  locationIdentifier?: string | null;
  readonly maxOuts?: readonly DataPointForDouble[] | null;
  readonly peds?: readonly DataPointForDouble[] | null;
  readonly percentileSplit?: number;
  phaseDescription?: string | null;
  phaseNumber?: number;
  readonly plans?: readonly PlanSplitMonitorDTO[] | null;
  readonly programmedSplits?: readonly DataPointForDouble[] | null;
  start?: string;
  readonly unknowns?: readonly DataPointForDouble[] | null;
}

export interface SplitMonitorOptions {
  end?: string;
  locationIdentifier?: string | null;
  percentileSplit?: number;
  start?: string;
}

export interface SplitFailsResult {
  approachDescription?: string | null;
  approachId?: number;
  averageGor?: DataPointForDouble[] | null;
  averageRor?: DataPointForDouble[] | null;
  end?: string;
  failLines?: DataPointBase[] | null;
  forceOffGreenOccupancies?: DataPointForDouble[] | null;
  forceOffRedOccupancies?: DataPointForDouble[] | null;
  gapOutGreenOccupancies?: DataPointForDouble[] | null;
  gapOutRedOccupancies?: DataPointForDouble[] | null;
  locationDescription?: string | null;
  locationIdentifier?: string | null;
  percentFails?: DataPointForDouble[] | null;
  phaseNumber?: number;
  phaseType?: string | null;
  plans?: PlanSplitFail[] | null;
  start?: string;
  totalSplitFails?: number;
}

export interface SplitFailOptions {
  end?: string;
  firstSecondsOfRed?: number;
  getPermissivePhase?: boolean;
  locationIdentifier?: string | null;
  metricTypeId?: number;
  start?: string;
}

export interface SpeedPlan {
  averageSpeed?: number | null;
  eightyFifthPercentile?: number | null;
  readonly end?: string;
  fifteenthPercentile?: number | null;
  readonly planDescription?: string | null;
  planNumber?: string | null;
  standardDeviation?: number | null;
  readonly start?: string;
}

export type SeriesType = typeof SeriesType[keyof typeof SeriesType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SeriesType = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
  NUMBER_4: 4,
} as const;

export interface Series {
  dataPoints?: AggregationDataPoint[] | null;
  identifier?: string | null;
}

export interface RequestAndServices {
  preemptionNumber?: number;
  requests?: string[] | null;
  services?: string[] | null;
}

export interface RampMeteringResult {
  end?: string;
  lanesActiveRate?: DescriptionWithDataPoints[] | null;
  lanesBaseRate?: DescriptionWithDataPoints[] | null;
  lanesQueueOnAndOffEvents?: DataPointForDetectorEvent[] | null;
  locationDescription?: string | null;
  locationIdentifier?: string | null;
  mainlineAvgFlow?: DataPointForDouble[] | null;
  mainlineAvgOcc?: DataPointForDouble[] | null;
  mainlineAvgSpeed?: DataPointForDouble[] | null;
  shutdownWarning?: TimeSpaceEventBase[] | null;
  start?: string;
  startUpWarning?: TimeSpaceEventBase[] | null;
}

export interface RampMeteringOptions {
  combineLanes?: boolean;
  end?: string;
  locationIdentifier?: string | null;
  start?: string;
}

export interface PurduePhaseTerminationOptions {
  end?: string;
  locationIdentifier?: string | null;
  selectedConsecutiveCount?: number;
  selectedPhaseNumber?: number;
  start?: string;
}

export interface PurdueCoordinationDiagramResult {
  approachDescription?: string | null;
  approachId?: number;
  detectorEvents?: DataPointForDouble[] | null;
  end?: string;
  greenSeries?: DataPointForDouble[] | null;
  locationDescription?: string | null;
  locationIdentifier?: string | null;
  percentArrivalOnGreen?: number;
  phaseDescription?: string | null;
  phaseNumber?: number;
  plans?: PerdueCoordinationPlanViewModel[] | null;
  redSeries?: DataPointForDouble[] | null;
  start?: string;
  totalDetectorHits?: number;
  totalOnGreenEvents?: number;
  volumePerHour?: DataPointForDouble[] | null;
  yellowSeries?: DataPointForDouble[] | null;
}

export interface PurdueCoordinationDiagramOptions {
  binSize?: number;
  end?: string;
  getVolume?: boolean;
  locationIdentifier?: string | null;
  showPlanStatistics?: boolean;
  start?: string;
}

export interface ProblemDetails {
  detail?: string | null;
  instance?: string | null;
  status?: number | null;
  title?: string | null;
  type?: string | null;
  [key: string]: unknown;
}

export interface PreemptServiceRequestResult {
  end?: string;
  locationDescription?: string | null;
  locationIdentifier?: string | null;
  plans?: Plan[] | null;
  preemptRequests?: DataPointForInt[] | null;
  start?: string;
}

export interface PreemptServiceRequestOptions {
  end?: string;
  locationIdentifier?: string | null;
  start?: string;
}

export interface PreemptServiceOptions {
  end?: string;
  locationIdentifier?: string | null;
  start?: string;
}

export interface PreemptRequestAndServices {
  end?: string;
  locationDescription?: string | null;
  locationIdentifier?: string | null;
  requestAndServices?: RequestAndServices[] | null;
  start?: string;
}

export interface PreemptPlan {
  readonly end?: string;
  readonly planDescription?: string | null;
  planNumber?: string | null;
  preemptCount?: number;
  readonly start?: string;
}

export interface PreemptServiceResult {
  end?: string;
  locationDescription?: string | null;
  locationIdentifier?: string | null;
  plans?: PreemptPlan[] | null;
  preemptServiceEvents?: DataPointForInt[] | null;
  start?: string;
}

export interface PreemptDetailOptions {
  end?: string;
  locationIdentifier?: string | null;
  start?: string;
}

export interface PreemptCycleResult {
  callMaxOut?: number;
  delay?: number;
  dwellTime?: number;
  gateDown?: string | null;
  inputOff?: string | null;
  inputOn?: string;
  timeToService?: number;
  trackClear?: number;
}

export interface PreemptDetail {
  readonly cycles?: readonly PreemptCycleResult[] | null;
  end?: string;
  locationDescription?: string | null;
  locationIdentifier?: string | null;
  preemptionNumber?: number;
  start?: string;
}

export interface PreemptDetailResult {
  details?: PreemptDetail[] | null;
  summary?: PreemptRequestAndServices;
}

export interface PlanWaitTime {
  averageWaitTime?: number;
  readonly end?: string;
  maxWaitTime?: number;
  readonly planDescription?: string | null;
  planNumber?: string | null;
  readonly start?: string;
}

export type PlanSplitMonitorDataSplits = {[key: string]: number} | null;

export interface PlanSplitMonitorData {
  averageSplit?: number;
  cycleLength?: number;
  readonly end?: string;
  highCycleCount?: number;
  minTime?: number;
  offsetLength?: number;
  percentForceOffs?: number;
  percentGapOuts?: number;
  percentileSplit?: number;
  percentileSplit50th?: number;
  percentileSplit85th?: number;
  percentMaxOuts?: number;
  percentSkips?: number;
  readonly planDescription?: string | null;
  planNumber?: string | null;
  programmedSplit?: number;
  splits?: PlanSplitMonitorDataSplits;
  readonly start?: string;
}

export interface PlanSplitMonitorDTO {
  averageSplit?: number;
  readonly end?: string;
  minTime?: number;
  percentForceOffs?: number;
  percentGapOuts?: number;
  percentileSplit?: number;
  percentileSplit50th?: number;
  percentileSplit85th?: number;
  percentMaxOuts?: number;
  percentSkips?: number;
  readonly planDescription?: string | null;
  readonly planNumber?: string | null;
  programmedSplit?: number;
  readonly start?: string;
}

export interface PlanSplitFail {
  readonly end?: string;
  readonly failsInPlan?: number;
  readonly percentFails?: number;
  readonly planDescription?: string | null;
  planNumber?: string | null;
  readonly start?: string;
  readonly totalCycles?: number;
}

export interface Plan {
  readonly end?: string;
  readonly planDescription?: string | null;
  planNumber?: string | null;
  readonly start?: string;
}

export interface Phase {
  forceOffs?: string[] | null;
  gapOuts?: string[] | null;
  maxOuts?: string[] | null;
  pedWalkBegins?: string[] | null;
  phaseNumber?: number;
  unknownTerminations?: string[] | null;
}

export interface PhaseTerminationResult {
  consecutiveCount?: number;
  end?: string;
  locationDescription?: string | null;
  locationIdentifier?: string | null;
  phases?: Phase[] | null;
  plans?: Plan[] | null;
  start?: string;
}

export interface PerdueCoordinationPlanViewModel {
  readonly end?: string;
  percentArrivalOnGreen?: number;
  percentGreenTime?: number;
  readonly planDescription?: string | null;
  planNumber?: string | null;
  platoonRatio?: number;
  readonly start?: string;
}

export interface PedDelayPlan {
  averageCycleLengthSeconds?: number;
  averageDelaySeconds?: number;
  cyclesWithPedRequests?: number;
  readonly end?: string;
  pedPresses?: number;
  pedRecallMessage?: string | null;
  readonly planDescription?: string | null;
  planNumber?: string | null;
  readonly start?: string;
  uniquePedDetections?: number;
}

export interface PedDelayResult {
  approachDescription?: string | null;
  approachId?: number;
  averageDelay?: number;
  cycleLengths?: DataPointForDouble[] | null;
  cyclesWithPedRequests?: number;
  end?: string;
  locationDescription?: string | null;
  locationIdentifier?: string | null;
  maxDelay?: number;
  minDelay?: number;
  pedestrianDelay?: DataPointForDouble[] | null;
  pedPresses?: number;
  percentDelayByCycleLength?: DataPointForDouble[] | null;
  phaseDescription?: string | null;
  phaseNumber?: number;
  plans?: PedDelayPlan[] | null;
  start?: string;
  startOfWalk?: DataPointForDouble[] | null;
  timeBuffered?: number;
  uniquePedestrianDetections?: number;
}

export interface PedDelayOptions {
  end?: string;
  locationIdentifier?: string | null;
  pedRecallThreshold?: number;
  showCycleLength?: boolean;
  showPedBeginWalk?: boolean;
  showPedRecall?: boolean;
  showPercentDelay?: boolean;
  start?: string;
  timeBuffer?: number;
}

export type PedActuationResultPercentCyclesWithPedsList = {[key: string]: number} | null;

export interface PedActuationResult {
  cyclesWithPedCallsNum?: number;
  cyclesWithPedCallsPercent?: number;
  direction?: string | null;
  opposingDirection?: string | null;
  percentCyclesWithPedsList?: PedActuationResultPercentCyclesWithPedsList;
}

export interface PedActuationOptions {
  approachId?: number;
  daysOfWeek?: number[] | null;
  end?: string;
  endHour?: number;
  endMinute?: number;
  locationIdentifier?: string | null;
  start?: string;
  startHour?: number;
  startMinute?: number;
}

export interface PeakHourResult {
  amEndHour?: number;
  amEndMinute?: number;
  amStartHour?: number;
  amStartMinute?: number;
  pmEndHour?: number;
  pmEndMinute?: number;
  pmStartHour?: number;
  pmStartMinute?: number;
}

export interface PeakHourOptions {
  approachId?: number;
  daysOfWeek?: number[] | null;
  end?: string;
  locationIdentifier?: string | null;
  start?: string;
}

export interface LocationWithSequence {
  locationIdentifier?: string | null;
  sequence?: number[][] | null;
}

export interface LocationWithCoordPhases {
  coordinatedPhases?: number[] | null;
  locationIdentifier?: string | null;
}

export interface LocationPhases {
  designatedPhases?: number[] | null;
  locationIdentifier?: string | null;
}

export interface LinkPivotResult {
  adjustments?: LinkPivotAdjustment[] | null;
  approachLinks?: LinkPivotApproachLink[] | null;
  totalAogBefore?: number;
  totalAogDownstreamBefore?: number;
  totalAogDownstreamPredicted?: number;
  totalAogPredicted?: number;
  totalAogUpstreamBefore?: number;
  totalAogUpstreamPredicted?: number;
  totalChartExisting?: number;
  totalChartNegativeChange?: number;
  totalChartPositiveChange?: number;
  totalChartRemaining?: number;
  totalDownstreamChartExisting?: number;
  totalDownstreamChartNegativeChange?: number;
  totalDownstreamChartPositiveChange?: number;
  totalDownstreamChartRemaining?: number;
  totalPaogBefore?: number;
  totalPaogDownstreamBefore?: number;
  totalPaogDownstreamPredicted?: number;
  totalPaogPredicted?: number;
  totalPaogUpstreamBefore?: number;
  totalPaogUpstreamPredicted?: number;
  totalUpstreamChartExisting?: number;
  totalUpstreamChartNegativeChange?: number;
  totalUpstreamChartPositiveChange?: number;
  totalUpstreamChartRemaining?: number;
}

export interface LinkPivotPcdResult {
  existingTotalAOG?: number;
  existingTotalPAOG?: number;
  existingVolume?: number;
  pcdExisting?: PurdueCoordinationDiagramResult[] | null;
  pcdPredicted?: PurdueCoordinationDiagramResult[] | null;
  predictedTotalAOG?: number;
  predictedTotalPAOG?: number;
  predictedVolume?: number;
}

export interface LinkPivotPcdOptions {
  delta: number;
  downstreamApproachDirection?: string | null;
  downstreamLocationIdentifier?: string | null;
  endDate?: string;
  endTime?: string;
  locationIdentifier?: string | null;
  selectedEndDate?: string | null;
  startDate?: string;
  startTime?: string;
  upstreamApproachDirection?: string | null;
}

export interface LinkPivotOptions {
  bias?: number;
  biasDirection?: string | null;
  cycleLength?: number;
  daysOfWeek?: number[] | null;
  direction?: string | null;
  endDate?: string;
  endTime?: string;
  routeId?: number;
  startDate?: string;
  startTime?: string;
}

export interface LinkPivotApproachLink {
  aogDownstreamBefore?: number;
  aogDownstreamPredicted?: number;
  aogTotalBefore?: number;
  aogTotalPredicted?: number;
  aogUpstreamBefore?: number;
  aogUpstreamPredicted?: number;
  delta?: number;
  downstreamApproachDirection?: string | null;
  downstreamChartExisting?: number;
  readonly downstreamChartName?: string | null;
  downstreamChartNegativeChange?: number;
  downstreamChartPositiveChange?: number;
  downstreamChartRemaining?: number;
  readonly downstreamCombinedLocation?: string | null;
  downstreamLocation?: string | null;
  downstreamLocationIdentifier?: string | null;
  linkNumber?: number;
  location?: string | null;
  locationIdentifier?: string | null;
  paogDownstreamBefore?: number;
  paogDownstreamPredicted?: number;
  pAogTotalBefore?: number;
  pAogTotalPredicted?: number;
  paogUpstreamBefore?: number;
  paogUpstreamPredicted?: number;
  resultChartLocation?: string | null;
  totalChartExisting?: number;
  readonly totalChartName?: string | null;
  totalChartNegativeChange?: number;
  totalChartPositiveChange?: number;
  totalChartRemaining?: number;
  upstreamApproachDirection?: string | null;
  upstreamChartExisting?: number;
  readonly upstreamChartName?: string | null;
  upstreamChartNegativeChange?: number;
  upstreamChartPositiveChange?: number;
  upstreamChartRemaining?: number;
  readonly upstreamCombinedLocation?: string | null;
}

export interface LinkPivotAdjustment {
  adjustment?: number;
  delta?: number;
  linkNumber?: number;
  location?: string | null;
  locationIdentifier?: string | null;
}

export type LeftTurnSplitFailResultPercentCyclesWithSplitFailList = {[key: string]: number} | null;

export interface LeftTurnSplitFailResult {
  cyclesWithSplitFails?: number;
  direction?: string | null;
  readonly percentCyclesWithSplitFailList?: LeftTurnSplitFailResultPercentCyclesWithSplitFailList;
  splitFailPercent?: number;
}

export interface LeftTurnSplitFailOptions {
  approachId?: number;
  daysOfWeek?: number[] | null;
  end?: string;
  endHour?: number;
  endMinute?: number;
  locationIdentifier?: string | null;
  start?: string;
  startHour?: number;
  startMinute?: number;
}

export type LeftTurnGapReportResultPercentCyclesWithSplitFailList = {[key: string]: number} | null;

export type LeftTurnGapReportResultPercentCyclesWithPedsList = {[key: string]: number} | null;

export type LeftTurnGapReportResultDemandList = {[key: string]: number} | null;

export type LeftTurnGapReportResultAcceptableGapList = {[key: string]: number} | null;

export interface LeftTurnGapReportResult {
  acceptableGapList?: LeftTurnGapReportResultAcceptableGapList;
  approachDescription?: string | null;
  calculatedVolumeBoundary?: number;
  capacity?: number;
  crossProductConsiderForStudy?: boolean | null;
  crossProductReview?: boolean;
  crossProductValue?: number;
  cyclesWithPedCallNum?: number;
  cyclesWithPedCallPercent?: number;
  cyclesWithSplitFailNum?: number;
  cyclesWithSplitFailPercent?: number;
  decisionBoundariesReview?: boolean;
  demand?: number;
  demandList?: LeftTurnGapReportResultDemandList;
  direction?: string | null;
  endDate?: string;
  endTime?: string;
  gapDurationConsiderForStudy?: boolean | null;
  gapOutPercent?: number;
  get24HourPeriod?: boolean;
  leftTurnVolume?: number;
  location?: string | null;
  opposingDirection?: string | null;
  opposingLanes?: number;
  opposingThroughVolume?: number;
  peakPeriodDescription?: string | null;
  pedActuationsConsiderForStudy?: boolean | null;
  percentCyclesWithPedsList?: LeftTurnGapReportResultPercentCyclesWithPedsList;
  percentCyclesWithSplitFailList?: LeftTurnGapReportResultPercentCyclesWithSplitFailList;
  phaseType?: string | null;
  signalId?: string | null;
  signalType?: string | null;
  speedLimit?: number | null;
  splitFailsConsiderForStudy?: boolean | null;
  startDate?: string;
  startTime?: string;
  vcRatio?: number;
  volumesConsiderForStudy?: boolean | null;
}

export interface LeftTurnGapReportOptions {
  acceptableGapPercentage?: number;
  acceptableSplitFailPercentage?: number;
  approachIds?: number[] | null;
  daysOfWeek?: number[] | null;
  end?: string;
  endHour?: number | null;
  endMinute?: number | null;
  get24HourPeriod?: boolean;
  getAMPMPeakHour?: boolean;
  getAMPMPeakPeriod?: boolean;
  getConflictingVolume?: boolean;
  getGapReport?: boolean;
  getPedestrianCall?: boolean;
  getSplitFail?: boolean;
  locationIdentifier?: string | null;
  start?: string;
  startHour?: number | null;
  startMinute?: number | null;
}

export interface LeftTurnGapDataCheckResult {
  approachDescription?: string | null;
  approachId?: number;
  end?: string;
  gapOutOk?: boolean;
  insufficientCycleAggregation?: boolean;
  insufficientDetectorEventCount?: boolean;
  insufficientLeftTurnGapAggregations?: boolean;
  insufficientPedAggregations?: boolean;
  insufficientPhaseTermination?: boolean;
  insufficientSplitFailAggregations?: boolean;
  leftTurnVolumeOk?: boolean;
  locationDescription?: string | null;
  locationIdentifier?: string | null;
  pedCycleOk?: boolean;
  start?: string;
}

export interface LeftTurnGapDataCheckOptions {
  approachId?: number;
  daysOfWeek?: number[] | null;
  end?: string;
  gapOutThreshold?: number;
  locationIdentifier?: string | null;
  pedestrianThreshold?: number;
  start?: string;
  volumePerHourThreshold?: number;
}

export interface LeftTurnGapAnalysisResult {
  approachDescription?: string | null;
  approachId?: number;
  binSize?: number;
  detectionTypeDescription?: string | null;
  detectionTypeStr?: string | null;
  end?: string;
  gap10Count?: DataPointForInt[] | null;
  gap10Max?: number | null;
  gap10Min?: number | null;
  readonly gap11Count?: readonly DataPointForInt[] | null;
  readonly gap11Max?: number | null;
  readonly gap11Min?: number | null;
  gap1Count?: DataPointForInt[] | null;
  gap1Max?: number;
  gap1Min?: number;
  gap2Count?: DataPointForInt[] | null;
  gap2Max?: number;
  gap2Min?: number;
  gap3Count?: DataPointForInt[] | null;
  gap3Max?: number;
  gap3Min?: number;
  gap4Count?: DataPointForInt[] | null;
  gap4Max?: number | null;
  gap4Min?: number | null;
  gap5Count?: DataPointForInt[] | null;
  gap5Max?: number | null;
  gap5Min?: number | null;
  gap6Count?: DataPointForInt[] | null;
  gap6Max?: number | null;
  gap6Min?: number | null;
  gap7Count?: DataPointForInt[] | null;
  gap7Max?: number | null;
  gap7Min?: number | null;
  gap8Count?: DataPointForInt[] | null;
  gap8Max?: number | null;
  gap8Min?: number | null;
  gap9Count?: DataPointForInt[] | null;
  gap9Max?: number | null;
  gap9Min?: number | null;
  highestTotal?: number;
  locationDescription?: string | null;
  locationIdentifier?: string | null;
  percentTurnableSeries?: DataPointForDouble[] | null;
  phaseDescription?: string | null;
  phaseNumber?: number;
  start?: string;
  sumDuration1?: number | null;
  sumDuration2?: number | null;
  sumDuration3?: number | null;
  sumGreenTime?: number;
  trendLineGapThreshold?: number;
}

export interface LeftTurnGapAnalysisOptions {
  binSize?: number;
  end?: string;
  gap10Max?: number | null;
  gap10Min?: number | null;
  gap1Max?: number;
  gap1Min?: number;
  gap2Max?: number;
  gap2Min?: number;
  gap3Max?: number;
  gap3Min?: number;
  gap4Max?: number | null;
  gap4Min?: number;
  gap5Max?: number | null;
  gap5Min?: number | null;
  gap6Max?: number | null;
  gap6Min?: number | null;
  gap7Max?: number | null;
  gap7Min?: number | null;
  gap8Max?: number | null;
  gap8Min?: number | null;
  gap9Max?: number | null;
  gap9Min?: number | null;
  locationIdentifier?: string | null;
  start?: string;
  sumDurationGap1?: number | null;
  sumDurationGap2?: number | null;
  sumDurationGap3?: number | null;
  trendLineGapThreshold?: number;
}

export type LaneTypes = typeof LaneTypes[keyof typeof LaneTypes];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LaneTypes = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
  NUMBER_4: 4,
  NUMBER_5: 5,
  NUMBER_6: 6,
  NUMBER_7: 7,
} as const;

export interface Lane {
  laneNumber?: number | null;
  laneType?: LaneTypes;
  movementType?: string | null;
  volume?: DataPointForInt[] | null;
}

export interface GreenTimeUtilizationResult {
  approachDescription?: string | null;
  approachId?: number;
  averageSplits?: DataPointForDouble[] | null;
  bins?: BarStack[] | null;
  end?: string;
  locationDescription?: string | null;
  locationIdentifier?: string | null;
  phaseNumber?: number;
  readonly plans?: readonly PlanSplitMonitorData[] | null;
  programmedSplits?: DataPointForDouble[] | null;
  start?: string;
  xAxisBinSize?: number;
  yAxisBinSize?: number;
}

export interface GreenTimeUtilizationOptions {
  end?: string;
  locationIdentifier?: string | null;
  metricTypeId?: number;
  start?: string;
  xAxisBinSize?: number;
  yAxisBinSize?: number;
}

export type GapDurationResultAcceptableGaps = {[key: string]: number} | null;

export interface GapDurationResult {
  acceptableGaps?: GapDurationResultAcceptableGaps;
  capacity?: number;
  demand?: number;
  direction?: string | null;
  gapDurationPercent?: number;
  readonly opposingDirection?: string | null;
}

export interface GapDurationOptions {
  approachId?: number;
  daysOfWeek?: number[] | null;
  end?: string;
  endHour?: number;
  endMinute?: number;
  locationIdentifier?: string | null;
  start?: string;
  startHour?: number;
  startMinute?: number;
}

export interface FilterSignal {
  approaches?: FilterApproach[] | null;
  exclude?: boolean;
  locationIdentifier?: string | null;
}

export interface FilterMovement {
  description?: string | null;
  include?: boolean;
  movementTypeId?: number;
}

export interface FilterDirection {
  description?: string | null;
  directionTypeId?: number;
  include?: boolean;
}

export interface FilterDetector {
  exclude?: boolean;
  id?: number;
}

export interface FilterApproach {
  approachId?: number;
  detectors?: FilterDetector[] | null;
  exclude?: boolean;
}

export interface DetectorEventBase {
  detectorOff?: string | null;
  detectorOn?: string | null;
}

export interface DetectorEventDto {
  events?: DetectorEventBase[] | null;
  name?: string | null;
}

export type DetectionTypes = typeof DetectionTypes[keyof typeof DetectionTypes];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DetectionTypes = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
  NUMBER_4: 4,
  NUMBER_5: 5,
  NUMBER_6: 6,
  NUMBER_7: 7,
  NUMBER_8: 8,
  NUMBER_9: 9,
  NUMBER_10: 10,
  NUMBER_11: 11,
} as const;

export type DayOfWeek = typeof DayOfWeek[keyof typeof DayOfWeek];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DayOfWeek = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
  NUMBER_4: 4,
  NUMBER_5: 5,
  NUMBER_6: 6,
} as const;

export interface DateTimeInt32KeyValuePair {
  key?: string;
  value?: number;
}

export interface DataPointForInt {
  timestamp?: string;
  value?: number;
}

export interface DataPointForDouble {
  timestamp?: string;
  value?: number;
}

export interface DescriptionWithDataPoints {
  description?: string | null;
  value?: DataPointForDouble[] | null;
}

export interface DataPointForDetectorEvent {
  detectorOff?: string | null;
  detectorOn?: string | null;
  value?: number;
}

export interface DataPointBase {
  timestamp?: string;
}

export interface CycleEventsDto {
  start?: string;
  value?: number;
}

export type BinSize = typeof BinSize[keyof typeof BinSize];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const BinSize = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
  NUMBER_4: 4,
  NUMBER_5: 5,
} as const;

export interface BarStack {
  value?: number;
  x?: number;
  y?: number;
}

export interface ArrivalOnRedPlan {
  readonly end?: string;
  percentArrivalOnRed?: number;
  percentRedTime?: number;
  readonly planDescription?: string | null;
  planNumber?: string | null;
  readonly start?: string;
}

export interface ArrivalOnRedResult {
  approachDescription?: string | null;
  approachId?: number;
  arrivalsOnRed?: DataPointForDouble[] | null;
  end?: string;
  locationDescription?: string | null;
  locationIdentifier?: string | null;
  percentArrivalOnRed?: number;
  percentArrivalsOnRed?: DataPointForDouble[] | null;
  phaseDescription?: string | null;
  phaseNumber?: number;
  plans?: ArrivalOnRedPlan[] | null;
  start?: string;
  totalArrivalOnRed?: number;
  totalDetectorHits?: number;
  totalVehicles?: DataPointForDouble[] | null;
}

export interface ArrivalOnRedOptions {
  binSize?: number;
  end?: string;
  getPermissivePhase?: boolean;
  locationIdentifier?: string | null;
  start?: string;
}

export interface AreaDTO {
  id?: number;
  name?: string | null;
}

export interface ApproachVolumeResult {
  combinedDirectionVolumes?: DataPointForInt[] | null;
  detectorType?: string | null;
  distanceFromStopBar?: number;
  end?: string;
  locationDescription?: string | null;
  locationIdentifier?: string | null;
  opposingDFactors?: DataPointForDouble[] | null;
  opposingDirectionName?: string | null;
  opposingDirectionVolumes?: DataPointForInt[] | null;
  primaryDFactors?: DataPointForDouble[] | null;
  primaryDirectionName?: string | null;
  primaryDirectionVolumes?: DataPointForInt[] | null;
  start?: string;
  summaryData?: SummaryData;
}

export interface ApproachVolumeOptions {
  binSize?: number;
  end?: string;
  getVolume?: boolean;
  locationIdentifier?: string | null;
  readonly metricTypeId?: number;
  showAdvanceDetection?: boolean;
  showDirectionalSplits?: boolean;
  showNbEbVolume?: boolean;
  showSbWbVolume?: boolean;
  showTMCDetection?: boolean;
  start?: string;
}

export interface ApproachSpeedResult {
  approachDescription?: string | null;
  approachId?: number;
  averageSpeeds?: DataPointForInt[] | null;
  detectionType?: string | null;
  distanceFromStopBar?: number;
  eightyFifthSpeeds?: DataPointForInt[] | null;
  end?: string;
  fifteenthSpeeds?: DataPointForInt[] | null;
  locationDescription?: string | null;
  locationIdentifier?: string | null;
  phaseDescription?: string | null;
  phaseNumber?: number;
  plans?: SpeedPlan[] | null;
  postedSpeed?: number;
  start?: string;
}

export interface ApproachSpeedOptions {
  binSize?: number;
  end?: string;
  locationIdentifier?: string | null;
  readonly metricTypeId?: number;
  start?: string;
}

export interface ApproachDelayPlan {
  averageDelay?: number;
  readonly end?: string;
  readonly planDescription?: string | null;
  planNumber?: string | null;
  readonly start?: string;
  totalDelay?: number;
}

export interface ApproachDelayResult {
  approachDelayDataPoints?: DataPointForDouble[] | null;
  approachDelayPerVehicleDataPoints?: DataPointForDouble[] | null;
  approachDescription?: string | null;
  approachId?: number;
  averageDelayPerVehicle?: number;
  end?: string;
  locationDescription?: string | null;
  locationIdentifier?: string | null;
  phaseDescription?: string | null;
  phaseNumber?: number;
  plans?: ApproachDelayPlan[] | null;
  start?: string;
  totalDelay?: number;
}

export interface ApproachDelayOptions {
  binSize?: number;
  end?: string;
  getPermissivePhase?: boolean;
  getVolume?: boolean;
  locationIdentifier?: string | null;
  start?: string;
}

export type AggregationType = typeof AggregationType[keyof typeof AggregationType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AggregationType = {
  NUMBER_0: 0,
  NUMBER_1: 1,
  NUMBER_2: 2,
  NUMBER_3: 3,
  NUMBER_4: 4,
  NUMBER_5: 5,
  NUMBER_6: 6,
  NUMBER_7: 7,
  NUMBER_8: 8,
  NUMBER_9: 9,
  NUMBER_10: 10,
  NUMBER_11: 11,
  NUMBER_12: 12,
  NUMBER_13: 13,
} as const;

export interface AggregationResult {
  identifier?: string | null;
  series?: Series[] | null;
}

export interface AggregationOptions {
  aggregationType?: AggregationType;
  dataType?: number;
  detectionType?: DetectionTypes;
  end?: string;
  filterDirections?: FilterDirection[] | null;
  filterMovements?: FilterMovement[] | null;
  locationIdentifiers?: string[] | null;
  locations?: FilterSignal[] | null;
  selectedAggregationType?: AggregationCalculationType;
  selectedSeries?: SeriesType;
  selectedXAxisType?: XAxisType;
  start?: string;
  timeOptions?: TimeOptions;
}

export interface AggregationDataPoint {
  identifier?: string | null;
  start?: string;
  value?: number;
}

export type AggregationCalculationType = typeof AggregationCalculationType[keyof typeof AggregationCalculationType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AggregationCalculationType = {
  NUMBER_0: 0,
  NUMBER_1: 1,
} as const;

