/**
 * Generated by orval v6.23.0 üç∫
 * Do not edit manually.
 * ATSPM Report Data Api
 * ATSPM Report Data with OpenAPI, Swashbuckle, and API versioning.
 * OpenAPI spec version: 1.0
 */
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from 'react-query'
import { useMutation, useQuery } from 'react-query'
import { reportsRequest } from '../../lib/axios'
import type {
  AggregationOptions,
  AggregationResult,
  ApproachDelayOptions,
  ApproachDelayResult,
  ApproachSpeedOptions,
  ApproachSpeedResult,
  ApproachVolumeOptions,
  ApproachVolumeResult,
  ArrivalOnRedOptions,
  ArrivalOnRedResult,
  GapDurationOptions,
  GapDurationResult,
  GreenTimeUtilizationOptions,
  GreenTimeUtilizationResult,
  LeftTurnGapAnalysisOptions,
  LeftTurnGapAnalysisResult,
  LeftTurnGapDataCheckOptions,
  LeftTurnGapDataCheckResult,
  LeftTurnGapReportOptions,
  LeftTurnGapReportResult,
  LeftTurnSplitFailOptions,
  LeftTurnSplitFailResult,
  LinkPivotOptions,
  LinkPivotPcdOptions,
  LinkPivotPcdResult,
  LinkPivotResult,
  PeakHourOptions,
  PeakHourResult,
  PedActuationOptions,
  PedActuationResult,
  PedDelayOptions,
  PedDelayResult,
  PhaseTerminationResult,
  PreemptDetailOptions,
  PreemptDetailResult,
  PreemptServiceOptions,
  PreemptServiceRequestOptions,
  PreemptServiceRequestResult,
  PreemptServiceResult,
  ProblemDetails,
  PurdueCoordinationDiagramOptions,
  PurdueCoordinationDiagramResult,
  PurduePhaseTerminationOptions,
  RampMeteringOptions,
  RampMeteringResult,
  SplitFailOptions,
  SplitFailsResult,
  SplitMonitorOptions,
  SplitMonitorResult,
  TimeSpaceDiagramAverageOptions,
  TimeSpaceDiagramAverageResult,
  TimeSpaceDiagramOptions,
  TimeSpaceDiagramResultForPhase,
  TimingAndActuationsForPhaseResult,
  TimingAndActuationsOptions,
  TransitSignalPriorityOptions,
  TransitSignalPriorityResult,
  TurningMovementCountsOptions,
  TurningMovementCountsResult,
  VolumeOptions,
  VolumeResult,
  WaitTimeOptions,
  WaitTimeResult,
  WatchDogDashboardOptions,
  WatchDogIssueTypeGroup,
  WatchDogOptions,
  WatchDogResult,
  YellowRedActivationsOptions,
  YellowRedActivationsResult,
} from './aTSPMReportDataApi.schemas'

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> =
  (<T>() => T extends X ? 1 : 2) extends <T>() => T extends Y ? 1 : 2 ? A : B

type WritableKeys<T> = {
  [P in keyof T]-?: IfEquals<
    { [Q in P]: T[P] },
    { -readonly [Q in P]: T[P] },
    P
  >
}[keyof T]

type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (
  k: infer I
) => void
  ? I
  : never
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never

type Writable<T> = Pick<T, WritableKeys<T>>
type NonReadonly<T> = [T] extends [UnionToIntersection<T>]
  ? {
      [P in keyof Writable<T>]: T[P] extends object
        ? NonReadonly<NonNullable<T[P]>>
        : T[P]
    }
  : DistributeReadOnlyOverUnions<T>

/**
 * @summary Get example data for testing
 */
export const getAggregationTestData = (signal?: AbortSignal) => {
  return reportsRequest<AggregationResult[]>({
    url: `/Aggregation/test`,
    method: 'GET',
    signal,
  })
}

export const getGetAggregationTestDataQueryKey = () => {
  return [`/Aggregation/test`] as const
}

export const getGetAggregationTestDataQueryOptions = <
  TData = Awaited<ReturnType<typeof getAggregationTestData>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getAggregationTestData>>,
    TError,
    TData
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetAggregationTestDataQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAggregationTestData>>
  > = ({ signal }) => getAggregationTestData(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAggregationTestData>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetAggregationTestDataQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAggregationTestData>>
>
export type GetAggregationTestDataQueryError = ProblemDetails

/**
 * @summary Get example data for testing
 */
export const useGetAggregationTestData = <
  TData = Awaited<ReturnType<typeof getAggregationTestData>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getAggregationTestData>>,
    TError,
    TData
  >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetAggregationTestDataQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get report data
 */
export const getAggregationReportData = (
  aggregationOptions: AggregationOptions
) => {
  return reportsRequest<AggregationResult[]>({
    url: `/Aggregation/getReportData`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: aggregationOptions,
  })
}

export const getGetAggregationReportDataMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getAggregationReportData>>,
    TError,
    { data: AggregationOptions },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof getAggregationReportData>>,
  TError,
  { data: AggregationOptions },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof getAggregationReportData>>,
    { data: AggregationOptions }
  > = (props) => {
    const { data } = props ?? {}

    return getAggregationReportData(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type GetAggregationReportDataMutationResult = NonNullable<
  Awaited<ReturnType<typeof getAggregationReportData>>
>
export type GetAggregationReportDataMutationBody = AggregationOptions
export type GetAggregationReportDataMutationError = ProblemDetails

/**
 * @summary Get report data
 */
export const useGetAggregationReportData = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getAggregationReportData>>,
    TError,
    { data: AggregationOptions },
    TContext
  >
}) => {
  const mutationOptions = getGetAggregationReportDataMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Get example data for testing
 */
export const getApproachDelayTestData = (signal?: AbortSignal) => {
  return reportsRequest<ApproachDelayResult[]>({
    url: `/ApproachDelay/test`,
    method: 'GET',
    signal,
  })
}

export const getGetApproachDelayTestDataQueryKey = () => {
  return [`/ApproachDelay/test`] as const
}

export const getGetApproachDelayTestDataQueryOptions = <
  TData = Awaited<ReturnType<typeof getApproachDelayTestData>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApproachDelayTestData>>,
    TError,
    TData
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetApproachDelayTestDataQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApproachDelayTestData>>
  > = ({ signal }) => getApproachDelayTestData(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApproachDelayTestData>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetApproachDelayTestDataQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApproachDelayTestData>>
>
export type GetApproachDelayTestDataQueryError = ProblemDetails

/**
 * @summary Get example data for testing
 */
export const useGetApproachDelayTestData = <
  TData = Awaited<ReturnType<typeof getApproachDelayTestData>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApproachDelayTestData>>,
    TError,
    TData
  >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApproachDelayTestDataQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get report data
 */
export const getApproachDelayReportData = (
  approachDelayOptions: ApproachDelayOptions
) => {
  return reportsRequest<ApproachDelayResult[]>({
    url: `/ApproachDelay/getReportData`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: approachDelayOptions,
  })
}

export const getGetApproachDelayReportDataMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getApproachDelayReportData>>,
    TError,
    { data: ApproachDelayOptions },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof getApproachDelayReportData>>,
  TError,
  { data: ApproachDelayOptions },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof getApproachDelayReportData>>,
    { data: ApproachDelayOptions }
  > = (props) => {
    const { data } = props ?? {}

    return getApproachDelayReportData(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type GetApproachDelayReportDataMutationResult = NonNullable<
  Awaited<ReturnType<typeof getApproachDelayReportData>>
>
export type GetApproachDelayReportDataMutationBody = ApproachDelayOptions
export type GetApproachDelayReportDataMutationError = ProblemDetails

/**
 * @summary Get report data
 */
export const useGetApproachDelayReportData = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getApproachDelayReportData>>,
    TError,
    { data: ApproachDelayOptions },
    TContext
  >
}) => {
  const mutationOptions = getGetApproachDelayReportDataMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Get example data for testing
 */
export const getApproachSpeedTestData = (signal?: AbortSignal) => {
  return reportsRequest<ApproachSpeedResult[]>({
    url: `/ApproachSpeed/test`,
    method: 'GET',
    signal,
  })
}

export const getGetApproachSpeedTestDataQueryKey = () => {
  return [`/ApproachSpeed/test`] as const
}

export const getGetApproachSpeedTestDataQueryOptions = <
  TData = Awaited<ReturnType<typeof getApproachSpeedTestData>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApproachSpeedTestData>>,
    TError,
    TData
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetApproachSpeedTestDataQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApproachSpeedTestData>>
  > = ({ signal }) => getApproachSpeedTestData(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApproachSpeedTestData>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetApproachSpeedTestDataQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApproachSpeedTestData>>
>
export type GetApproachSpeedTestDataQueryError = ProblemDetails

/**
 * @summary Get example data for testing
 */
export const useGetApproachSpeedTestData = <
  TData = Awaited<ReturnType<typeof getApproachSpeedTestData>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApproachSpeedTestData>>,
    TError,
    TData
  >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApproachSpeedTestDataQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get report data
 */
export const getApproachSpeedReportData = (
  approachSpeedOptions: NonReadonly<ApproachSpeedOptions>
) => {
  return reportsRequest<ApproachSpeedResult[]>({
    url: `/ApproachSpeed/getReportData`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: approachSpeedOptions,
  })
}

export const getGetApproachSpeedReportDataMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getApproachSpeedReportData>>,
    TError,
    { data: NonReadonly<ApproachSpeedOptions> },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof getApproachSpeedReportData>>,
  TError,
  { data: NonReadonly<ApproachSpeedOptions> },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof getApproachSpeedReportData>>,
    { data: NonReadonly<ApproachSpeedOptions> }
  > = (props) => {
    const { data } = props ?? {}

    return getApproachSpeedReportData(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type GetApproachSpeedReportDataMutationResult = NonNullable<
  Awaited<ReturnType<typeof getApproachSpeedReportData>>
>
export type GetApproachSpeedReportDataMutationBody =
  NonReadonly<ApproachSpeedOptions>
export type GetApproachSpeedReportDataMutationError = ProblemDetails

/**
 * @summary Get report data
 */
export const useGetApproachSpeedReportData = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getApproachSpeedReportData>>,
    TError,
    { data: NonReadonly<ApproachSpeedOptions> },
    TContext
  >
}) => {
  const mutationOptions = getGetApproachSpeedReportDataMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Get example data for testing
 */
export const getApproachVolumeTestData = (signal?: AbortSignal) => {
  return reportsRequest<ApproachVolumeResult[]>({
    url: `/ApproachVolume/test`,
    method: 'GET',
    signal,
  })
}

export const getGetApproachVolumeTestDataQueryKey = () => {
  return [`/ApproachVolume/test`] as const
}

export const getGetApproachVolumeTestDataQueryOptions = <
  TData = Awaited<ReturnType<typeof getApproachVolumeTestData>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApproachVolumeTestData>>,
    TError,
    TData
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetApproachVolumeTestDataQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getApproachVolumeTestData>>
  > = ({ signal }) => getApproachVolumeTestData(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApproachVolumeTestData>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetApproachVolumeTestDataQueryResult = NonNullable<
  Awaited<ReturnType<typeof getApproachVolumeTestData>>
>
export type GetApproachVolumeTestDataQueryError = ProblemDetails

/**
 * @summary Get example data for testing
 */
export const useGetApproachVolumeTestData = <
  TData = Awaited<ReturnType<typeof getApproachVolumeTestData>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getApproachVolumeTestData>>,
    TError,
    TData
  >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetApproachVolumeTestDataQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get report data
 */
export const getApproachVolumeReportData = (
  approachVolumeOptions: NonReadonly<ApproachVolumeOptions>
) => {
  return reportsRequest<ApproachVolumeResult[]>({
    url: `/ApproachVolume/getReportData`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: approachVolumeOptions,
  })
}

export const getGetApproachVolumeReportDataMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getApproachVolumeReportData>>,
    TError,
    { data: NonReadonly<ApproachVolumeOptions> },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof getApproachVolumeReportData>>,
  TError,
  { data: NonReadonly<ApproachVolumeOptions> },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof getApproachVolumeReportData>>,
    { data: NonReadonly<ApproachVolumeOptions> }
  > = (props) => {
    const { data } = props ?? {}

    return getApproachVolumeReportData(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type GetApproachVolumeReportDataMutationResult = NonNullable<
  Awaited<ReturnType<typeof getApproachVolumeReportData>>
>
export type GetApproachVolumeReportDataMutationBody =
  NonReadonly<ApproachVolumeOptions>
export type GetApproachVolumeReportDataMutationError = ProblemDetails

/**
 * @summary Get report data
 */
export const useGetApproachVolumeReportData = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getApproachVolumeReportData>>,
    TError,
    { data: NonReadonly<ApproachVolumeOptions> },
    TContext
  >
}) => {
  const mutationOptions = getGetApproachVolumeReportDataMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Get example data for testing
 */
export const getArrivalOnRedTestData = (signal?: AbortSignal) => {
  return reportsRequest<ArrivalOnRedResult[]>({
    url: `/ArrivalOnRed/test`,
    method: 'GET',
    signal,
  })
}

export const getGetArrivalOnRedTestDataQueryKey = () => {
  return [`/ArrivalOnRed/test`] as const
}

export const getGetArrivalOnRedTestDataQueryOptions = <
  TData = Awaited<ReturnType<typeof getArrivalOnRedTestData>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getArrivalOnRedTestData>>,
    TError,
    TData
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetArrivalOnRedTestDataQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getArrivalOnRedTestData>>
  > = ({ signal }) => getArrivalOnRedTestData(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getArrivalOnRedTestData>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetArrivalOnRedTestDataQueryResult = NonNullable<
  Awaited<ReturnType<typeof getArrivalOnRedTestData>>
>
export type GetArrivalOnRedTestDataQueryError = ProblemDetails

/**
 * @summary Get example data for testing
 */
export const useGetArrivalOnRedTestData = <
  TData = Awaited<ReturnType<typeof getArrivalOnRedTestData>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getArrivalOnRedTestData>>,
    TError,
    TData
  >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetArrivalOnRedTestDataQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get report data
 */
export const getArrivalOnRedReportData = (
  arrivalOnRedOptions: ArrivalOnRedOptions
) => {
  return reportsRequest<ArrivalOnRedResult[]>({
    url: `/ArrivalOnRed/getReportData`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: arrivalOnRedOptions,
  })
}

export const getGetArrivalOnRedReportDataMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getArrivalOnRedReportData>>,
    TError,
    { data: ArrivalOnRedOptions },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof getArrivalOnRedReportData>>,
  TError,
  { data: ArrivalOnRedOptions },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof getArrivalOnRedReportData>>,
    { data: ArrivalOnRedOptions }
  > = (props) => {
    const { data } = props ?? {}

    return getArrivalOnRedReportData(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type GetArrivalOnRedReportDataMutationResult = NonNullable<
  Awaited<ReturnType<typeof getArrivalOnRedReportData>>
>
export type GetArrivalOnRedReportDataMutationBody = ArrivalOnRedOptions
export type GetArrivalOnRedReportDataMutationError = ProblemDetails

/**
 * @summary Get report data
 */
export const useGetArrivalOnRedReportData = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getArrivalOnRedReportData>>,
    TError,
    { data: ArrivalOnRedOptions },
    TContext
  >
}) => {
  const mutationOptions = getGetArrivalOnRedReportDataMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Get example data for testing
 */
export const getGreenTimeUtilizationTestData = (signal?: AbortSignal) => {
  return reportsRequest<GreenTimeUtilizationResult[]>({
    url: `/GreenTimeUtilization/test`,
    method: 'GET',
    signal,
  })
}

export const getGetGreenTimeUtilizationTestDataQueryKey = () => {
  return [`/GreenTimeUtilization/test`] as const
}

export const getGetGreenTimeUtilizationTestDataQueryOptions = <
  TData = Awaited<ReturnType<typeof getGreenTimeUtilizationTestData>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getGreenTimeUtilizationTestData>>,
    TError,
    TData
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetGreenTimeUtilizationTestDataQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getGreenTimeUtilizationTestData>>
  > = ({ signal }) => getGreenTimeUtilizationTestData(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getGreenTimeUtilizationTestData>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetGreenTimeUtilizationTestDataQueryResult = NonNullable<
  Awaited<ReturnType<typeof getGreenTimeUtilizationTestData>>
>
export type GetGreenTimeUtilizationTestDataQueryError = ProblemDetails

/**
 * @summary Get example data for testing
 */
export const useGetGreenTimeUtilizationTestData = <
  TData = Awaited<ReturnType<typeof getGreenTimeUtilizationTestData>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getGreenTimeUtilizationTestData>>,
    TError,
    TData
  >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetGreenTimeUtilizationTestDataQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get report data
 */
export const getGreenTimeUtilizationReportData = (
  greenTimeUtilizationOptions: GreenTimeUtilizationOptions
) => {
  return reportsRequest<GreenTimeUtilizationResult[]>({
    url: `/GreenTimeUtilization/getReportData`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: greenTimeUtilizationOptions,
  })
}

export const getGetGreenTimeUtilizationReportDataMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getGreenTimeUtilizationReportData>>,
    TError,
    { data: GreenTimeUtilizationOptions },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof getGreenTimeUtilizationReportData>>,
  TError,
  { data: GreenTimeUtilizationOptions },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof getGreenTimeUtilizationReportData>>,
    { data: GreenTimeUtilizationOptions }
  > = (props) => {
    const { data } = props ?? {}

    return getGreenTimeUtilizationReportData(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type GetGreenTimeUtilizationReportDataMutationResult = NonNullable<
  Awaited<ReturnType<typeof getGreenTimeUtilizationReportData>>
>
export type GetGreenTimeUtilizationReportDataMutationBody =
  GreenTimeUtilizationOptions
export type GetGreenTimeUtilizationReportDataMutationError = ProblemDetails

/**
 * @summary Get report data
 */
export const useGetGreenTimeUtilizationReportData = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getGreenTimeUtilizationReportData>>,
    TError,
    { data: GreenTimeUtilizationOptions },
    TContext
  >
}) => {
  const mutationOptions =
    getGetGreenTimeUtilizationReportDataMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Get example data for testing
 */
export const getLeftTurnGapAnalysisTestData = (signal?: AbortSignal) => {
  return reportsRequest<LeftTurnGapAnalysisResult[]>({
    url: `/LeftTurnGapAnalysis/test`,
    method: 'GET',
    signal,
  })
}

export const getGetLeftTurnGapAnalysisTestDataQueryKey = () => {
  return [`/LeftTurnGapAnalysis/test`] as const
}

export const getGetLeftTurnGapAnalysisTestDataQueryOptions = <
  TData = Awaited<ReturnType<typeof getLeftTurnGapAnalysisTestData>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getLeftTurnGapAnalysisTestData>>,
    TError,
    TData
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetLeftTurnGapAnalysisTestDataQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getLeftTurnGapAnalysisTestData>>
  > = ({ signal }) => getLeftTurnGapAnalysisTestData(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getLeftTurnGapAnalysisTestData>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetLeftTurnGapAnalysisTestDataQueryResult = NonNullable<
  Awaited<ReturnType<typeof getLeftTurnGapAnalysisTestData>>
>
export type GetLeftTurnGapAnalysisTestDataQueryError = ProblemDetails

/**
 * @summary Get example data for testing
 */
export const useGetLeftTurnGapAnalysisTestData = <
  TData = Awaited<ReturnType<typeof getLeftTurnGapAnalysisTestData>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getLeftTurnGapAnalysisTestData>>,
    TError,
    TData
  >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetLeftTurnGapAnalysisTestDataQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get report data
 */
export const getLeftTurnGapAnalysisReportData = (
  leftTurnGapAnalysisOptions: LeftTurnGapAnalysisOptions
) => {
  return reportsRequest<LeftTurnGapAnalysisResult[]>({
    url: `/LeftTurnGapAnalysis/getReportData`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: leftTurnGapAnalysisOptions,
  })
}

export const getGetLeftTurnGapAnalysisReportDataMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getLeftTurnGapAnalysisReportData>>,
    TError,
    { data: LeftTurnGapAnalysisOptions },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof getLeftTurnGapAnalysisReportData>>,
  TError,
  { data: LeftTurnGapAnalysisOptions },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof getLeftTurnGapAnalysisReportData>>,
    { data: LeftTurnGapAnalysisOptions }
  > = (props) => {
    const { data } = props ?? {}

    return getLeftTurnGapAnalysisReportData(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type GetLeftTurnGapAnalysisReportDataMutationResult = NonNullable<
  Awaited<ReturnType<typeof getLeftTurnGapAnalysisReportData>>
>
export type GetLeftTurnGapAnalysisReportDataMutationBody =
  LeftTurnGapAnalysisOptions
export type GetLeftTurnGapAnalysisReportDataMutationError = ProblemDetails

/**
 * @summary Get report data
 */
export const useGetLeftTurnGapAnalysisReportData = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getLeftTurnGapAnalysisReportData>>,
    TError,
    { data: LeftTurnGapAnalysisOptions },
    TContext
  >
}) => {
  const mutationOptions =
    getGetLeftTurnGapAnalysisReportDataMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Get example data for testing
 */
export const getLeftTurnGapDurationTestData = (signal?: AbortSignal) => {
  return reportsRequest<GapDurationResult>({
    url: `/LeftTurnGapDuration/test`,
    method: 'GET',
    signal,
  })
}

export const getGetLeftTurnGapDurationTestDataQueryKey = () => {
  return [`/LeftTurnGapDuration/test`] as const
}

export const getGetLeftTurnGapDurationTestDataQueryOptions = <
  TData = Awaited<ReturnType<typeof getLeftTurnGapDurationTestData>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getLeftTurnGapDurationTestData>>,
    TError,
    TData
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetLeftTurnGapDurationTestDataQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getLeftTurnGapDurationTestData>>
  > = ({ signal }) => getLeftTurnGapDurationTestData(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getLeftTurnGapDurationTestData>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetLeftTurnGapDurationTestDataQueryResult = NonNullable<
  Awaited<ReturnType<typeof getLeftTurnGapDurationTestData>>
>
export type GetLeftTurnGapDurationTestDataQueryError = ProblemDetails

/**
 * @summary Get example data for testing
 */
export const useGetLeftTurnGapDurationTestData = <
  TData = Awaited<ReturnType<typeof getLeftTurnGapDurationTestData>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getLeftTurnGapDurationTestData>>,
    TError,
    TData
  >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetLeftTurnGapDurationTestDataQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get report data
 */
export const getLeftTurnGapDurationReportData = (
  gapDurationOptions: GapDurationOptions
) => {
  return reportsRequest<GapDurationResult>({
    url: `/LeftTurnGapDuration/getReportData`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: gapDurationOptions,
  })
}

export const getGetLeftTurnGapDurationReportDataMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getLeftTurnGapDurationReportData>>,
    TError,
    { data: GapDurationOptions },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof getLeftTurnGapDurationReportData>>,
  TError,
  { data: GapDurationOptions },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof getLeftTurnGapDurationReportData>>,
    { data: GapDurationOptions }
  > = (props) => {
    const { data } = props ?? {}

    return getLeftTurnGapDurationReportData(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type GetLeftTurnGapDurationReportDataMutationResult = NonNullable<
  Awaited<ReturnType<typeof getLeftTurnGapDurationReportData>>
>
export type GetLeftTurnGapDurationReportDataMutationBody = GapDurationOptions
export type GetLeftTurnGapDurationReportDataMutationError = ProblemDetails

/**
 * @summary Get report data
 */
export const useGetLeftTurnGapDurationReportData = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getLeftTurnGapDurationReportData>>,
    TError,
    { data: GapDurationOptions },
    TContext
  >
}) => {
  const mutationOptions =
    getGetLeftTurnGapDurationReportDataMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Get example data for testing
 */
export const getLeftTurnGapReportTestData = (signal?: AbortSignal) => {
  return reportsRequest<LeftTurnGapReportResult[]>({
    url: `/LeftTurnGapReport/test`,
    method: 'GET',
    signal,
  })
}

export const getGetLeftTurnGapReportTestDataQueryKey = () => {
  return [`/LeftTurnGapReport/test`] as const
}

export const getGetLeftTurnGapReportTestDataQueryOptions = <
  TData = Awaited<ReturnType<typeof getLeftTurnGapReportTestData>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getLeftTurnGapReportTestData>>,
    TError,
    TData
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetLeftTurnGapReportTestDataQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getLeftTurnGapReportTestData>>
  > = ({ signal }) => getLeftTurnGapReportTestData(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getLeftTurnGapReportTestData>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetLeftTurnGapReportTestDataQueryResult = NonNullable<
  Awaited<ReturnType<typeof getLeftTurnGapReportTestData>>
>
export type GetLeftTurnGapReportTestDataQueryError = ProblemDetails

/**
 * @summary Get example data for testing
 */
export const useGetLeftTurnGapReportTestData = <
  TData = Awaited<ReturnType<typeof getLeftTurnGapReportTestData>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getLeftTurnGapReportTestData>>,
    TError,
    TData
  >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetLeftTurnGapReportTestDataQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get report data
 */
export const getLeftTurnGapReportReportData = (
  leftTurnGapReportOptions: LeftTurnGapReportOptions
) => {
  return reportsRequest<LeftTurnGapReportResult[]>({
    url: `/LeftTurnGapReport/getReportData`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: leftTurnGapReportOptions,
  })
}

export const getGetLeftTurnGapReportReportDataMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getLeftTurnGapReportReportData>>,
    TError,
    { data: LeftTurnGapReportOptions },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof getLeftTurnGapReportReportData>>,
  TError,
  { data: LeftTurnGapReportOptions },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof getLeftTurnGapReportReportData>>,
    { data: LeftTurnGapReportOptions }
  > = (props) => {
    const { data } = props ?? {}

    return getLeftTurnGapReportReportData(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type GetLeftTurnGapReportReportDataMutationResult = NonNullable<
  Awaited<ReturnType<typeof getLeftTurnGapReportReportData>>
>
export type GetLeftTurnGapReportReportDataMutationBody =
  LeftTurnGapReportOptions
export type GetLeftTurnGapReportReportDataMutationError = ProblemDetails

/**
 * @summary Get report data
 */
export const useGetLeftTurnGapReportReportData = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getLeftTurnGapReportReportData>>,
    TError,
    { data: LeftTurnGapReportOptions },
    TContext
  >
}) => {
  const mutationOptions =
    getGetLeftTurnGapReportReportDataMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Get example data for testing
 */
export const getLeftTurnGapReportDataCheckTestData = (signal?: AbortSignal) => {
  return reportsRequest<LeftTurnGapDataCheckResult>({
    url: `/LeftTurnGapReportDataCheck/test`,
    method: 'GET',
    signal,
  })
}

export const getGetLeftTurnGapReportDataCheckTestDataQueryKey = () => {
  return [`/LeftTurnGapReportDataCheck/test`] as const
}

export const getGetLeftTurnGapReportDataCheckTestDataQueryOptions = <
  TData = Awaited<ReturnType<typeof getLeftTurnGapReportDataCheckTestData>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getLeftTurnGapReportDataCheckTestData>>,
    TError,
    TData
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetLeftTurnGapReportDataCheckTestDataQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getLeftTurnGapReportDataCheckTestData>>
  > = ({ signal }) => getLeftTurnGapReportDataCheckTestData(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getLeftTurnGapReportDataCheckTestData>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetLeftTurnGapReportDataCheckTestDataQueryResult = NonNullable<
  Awaited<ReturnType<typeof getLeftTurnGapReportDataCheckTestData>>
>
export type GetLeftTurnGapReportDataCheckTestDataQueryError = ProblemDetails

/**
 * @summary Get example data for testing
 */
export const useGetLeftTurnGapReportDataCheckTestData = <
  TData = Awaited<ReturnType<typeof getLeftTurnGapReportDataCheckTestData>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getLeftTurnGapReportDataCheckTestData>>,
    TError,
    TData
  >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions =
    getGetLeftTurnGapReportDataCheckTestDataQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get report data
 */
export const getLeftTurnGapReportDataCheckReportData = (
  leftTurnGapDataCheckOptions: LeftTurnGapDataCheckOptions
) => {
  return reportsRequest<LeftTurnGapDataCheckResult>({
    url: `/LeftTurnGapReportDataCheck/getReportData`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: leftTurnGapDataCheckOptions,
  })
}

export const getGetLeftTurnGapReportDataCheckReportDataMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getLeftTurnGapReportDataCheckReportData>>,
    TError,
    { data: LeftTurnGapDataCheckOptions },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof getLeftTurnGapReportDataCheckReportData>>,
  TError,
  { data: LeftTurnGapDataCheckOptions },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof getLeftTurnGapReportDataCheckReportData>>,
    { data: LeftTurnGapDataCheckOptions }
  > = (props) => {
    const { data } = props ?? {}

    return getLeftTurnGapReportDataCheckReportData(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type GetLeftTurnGapReportDataCheckReportDataMutationResult = NonNullable<
  Awaited<ReturnType<typeof getLeftTurnGapReportDataCheckReportData>>
>
export type GetLeftTurnGapReportDataCheckReportDataMutationBody =
  LeftTurnGapDataCheckOptions
export type GetLeftTurnGapReportDataCheckReportDataMutationError =
  ProblemDetails

/**
 * @summary Get report data
 */
export const useGetLeftTurnGapReportDataCheckReportData = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getLeftTurnGapReportDataCheckReportData>>,
    TError,
    { data: LeftTurnGapDataCheckOptions },
    TContext
  >
}) => {
  const mutationOptions =
    getGetLeftTurnGapReportDataCheckReportDataMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Get example data for testing
 */
export const getLeftTurnPeakHoursTestData = (signal?: AbortSignal) => {
  return reportsRequest<PeakHourResult>({
    url: `/LeftTurnPeakHours/test`,
    method: 'GET',
    signal,
  })
}

export const getGetLeftTurnPeakHoursTestDataQueryKey = () => {
  return [`/LeftTurnPeakHours/test`] as const
}

export const getGetLeftTurnPeakHoursTestDataQueryOptions = <
  TData = Awaited<ReturnType<typeof getLeftTurnPeakHoursTestData>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getLeftTurnPeakHoursTestData>>,
    TError,
    TData
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetLeftTurnPeakHoursTestDataQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getLeftTurnPeakHoursTestData>>
  > = ({ signal }) => getLeftTurnPeakHoursTestData(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getLeftTurnPeakHoursTestData>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetLeftTurnPeakHoursTestDataQueryResult = NonNullable<
  Awaited<ReturnType<typeof getLeftTurnPeakHoursTestData>>
>
export type GetLeftTurnPeakHoursTestDataQueryError = ProblemDetails

/**
 * @summary Get example data for testing
 */
export const useGetLeftTurnPeakHoursTestData = <
  TData = Awaited<ReturnType<typeof getLeftTurnPeakHoursTestData>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getLeftTurnPeakHoursTestData>>,
    TError,
    TData
  >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetLeftTurnPeakHoursTestDataQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get report data
 */
export const getLeftTurnPeakHoursReportData = (
  peakHourOptions: PeakHourOptions
) => {
  return reportsRequest<PeakHourResult>({
    url: `/LeftTurnPeakHours/getReportData`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: peakHourOptions,
  })
}

export const getGetLeftTurnPeakHoursReportDataMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getLeftTurnPeakHoursReportData>>,
    TError,
    { data: PeakHourOptions },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof getLeftTurnPeakHoursReportData>>,
  TError,
  { data: PeakHourOptions },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof getLeftTurnPeakHoursReportData>>,
    { data: PeakHourOptions }
  > = (props) => {
    const { data } = props ?? {}

    return getLeftTurnPeakHoursReportData(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type GetLeftTurnPeakHoursReportDataMutationResult = NonNullable<
  Awaited<ReturnType<typeof getLeftTurnPeakHoursReportData>>
>
export type GetLeftTurnPeakHoursReportDataMutationBody = PeakHourOptions
export type GetLeftTurnPeakHoursReportDataMutationError = ProblemDetails

/**
 * @summary Get report data
 */
export const useGetLeftTurnPeakHoursReportData = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getLeftTurnPeakHoursReportData>>,
    TError,
    { data: PeakHourOptions },
    TContext
  >
}) => {
  const mutationOptions =
    getGetLeftTurnPeakHoursReportDataMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Get example data for testing
 */
export const getLeftTurnPedActuationTestData = (signal?: AbortSignal) => {
  return reportsRequest<PedActuationResult>({
    url: `/LeftTurnPedActuation/test`,
    method: 'GET',
    signal,
  })
}

export const getGetLeftTurnPedActuationTestDataQueryKey = () => {
  return [`/LeftTurnPedActuation/test`] as const
}

export const getGetLeftTurnPedActuationTestDataQueryOptions = <
  TData = Awaited<ReturnType<typeof getLeftTurnPedActuationTestData>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getLeftTurnPedActuationTestData>>,
    TError,
    TData
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetLeftTurnPedActuationTestDataQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getLeftTurnPedActuationTestData>>
  > = ({ signal }) => getLeftTurnPedActuationTestData(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getLeftTurnPedActuationTestData>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetLeftTurnPedActuationTestDataQueryResult = NonNullable<
  Awaited<ReturnType<typeof getLeftTurnPedActuationTestData>>
>
export type GetLeftTurnPedActuationTestDataQueryError = ProblemDetails

/**
 * @summary Get example data for testing
 */
export const useGetLeftTurnPedActuationTestData = <
  TData = Awaited<ReturnType<typeof getLeftTurnPedActuationTestData>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getLeftTurnPedActuationTestData>>,
    TError,
    TData
  >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetLeftTurnPedActuationTestDataQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get report data
 */
export const getLeftTurnPedActuationReportData = (
  pedActuationOptions: PedActuationOptions
) => {
  return reportsRequest<PedActuationResult>({
    url: `/LeftTurnPedActuation/getReportData`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: pedActuationOptions,
  })
}

export const getGetLeftTurnPedActuationReportDataMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getLeftTurnPedActuationReportData>>,
    TError,
    { data: PedActuationOptions },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof getLeftTurnPedActuationReportData>>,
  TError,
  { data: PedActuationOptions },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof getLeftTurnPedActuationReportData>>,
    { data: PedActuationOptions }
  > = (props) => {
    const { data } = props ?? {}

    return getLeftTurnPedActuationReportData(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type GetLeftTurnPedActuationReportDataMutationResult = NonNullable<
  Awaited<ReturnType<typeof getLeftTurnPedActuationReportData>>
>
export type GetLeftTurnPedActuationReportDataMutationBody = PedActuationOptions
export type GetLeftTurnPedActuationReportDataMutationError = ProblemDetails

/**
 * @summary Get report data
 */
export const useGetLeftTurnPedActuationReportData = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getLeftTurnPedActuationReportData>>,
    TError,
    { data: PedActuationOptions },
    TContext
  >
}) => {
  const mutationOptions =
    getGetLeftTurnPedActuationReportDataMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Get example data for testing
 */
export const getLeftTurnSplitFailTestData = (signal?: AbortSignal) => {
  return reportsRequest<LeftTurnSplitFailResult>({
    url: `/LeftTurnSplitFail/test`,
    method: 'GET',
    signal,
  })
}

export const getGetLeftTurnSplitFailTestDataQueryKey = () => {
  return [`/LeftTurnSplitFail/test`] as const
}

export const getGetLeftTurnSplitFailTestDataQueryOptions = <
  TData = Awaited<ReturnType<typeof getLeftTurnSplitFailTestData>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getLeftTurnSplitFailTestData>>,
    TError,
    TData
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetLeftTurnSplitFailTestDataQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getLeftTurnSplitFailTestData>>
  > = ({ signal }) => getLeftTurnSplitFailTestData(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getLeftTurnSplitFailTestData>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetLeftTurnSplitFailTestDataQueryResult = NonNullable<
  Awaited<ReturnType<typeof getLeftTurnSplitFailTestData>>
>
export type GetLeftTurnSplitFailTestDataQueryError = ProblemDetails

/**
 * @summary Get example data for testing
 */
export const useGetLeftTurnSplitFailTestData = <
  TData = Awaited<ReturnType<typeof getLeftTurnSplitFailTestData>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getLeftTurnSplitFailTestData>>,
    TError,
    TData
  >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetLeftTurnSplitFailTestDataQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get report data
 */
export const getLeftTurnSplitFailReportData = (
  leftTurnSplitFailOptions: LeftTurnSplitFailOptions
) => {
  return reportsRequest<LeftTurnSplitFailResult>({
    url: `/LeftTurnSplitFail/getReportData`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: leftTurnSplitFailOptions,
  })
}

export const getGetLeftTurnSplitFailReportDataMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getLeftTurnSplitFailReportData>>,
    TError,
    { data: LeftTurnSplitFailOptions },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof getLeftTurnSplitFailReportData>>,
  TError,
  { data: LeftTurnSplitFailOptions },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof getLeftTurnSplitFailReportData>>,
    { data: LeftTurnSplitFailOptions }
  > = (props) => {
    const { data } = props ?? {}

    return getLeftTurnSplitFailReportData(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type GetLeftTurnSplitFailReportDataMutationResult = NonNullable<
  Awaited<ReturnType<typeof getLeftTurnSplitFailReportData>>
>
export type GetLeftTurnSplitFailReportDataMutationBody =
  LeftTurnSplitFailOptions
export type GetLeftTurnSplitFailReportDataMutationError = ProblemDetails

/**
 * @summary Get report data
 */
export const useGetLeftTurnSplitFailReportData = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getLeftTurnSplitFailReportData>>,
    TError,
    { data: LeftTurnSplitFailOptions },
    TContext
  >
}) => {
  const mutationOptions =
    getGetLeftTurnSplitFailReportDataMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Get example data for testing
 */
export const getLeftTurnVolumeTestData = (signal?: AbortSignal) => {
  return reportsRequest<VolumeResult>({
    url: `/LeftTurnVolume/test`,
    method: 'GET',
    signal,
  })
}

export const getGetLeftTurnVolumeTestDataQueryKey = () => {
  return [`/LeftTurnVolume/test`] as const
}

export const getGetLeftTurnVolumeTestDataQueryOptions = <
  TData = Awaited<ReturnType<typeof getLeftTurnVolumeTestData>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getLeftTurnVolumeTestData>>,
    TError,
    TData
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetLeftTurnVolumeTestDataQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getLeftTurnVolumeTestData>>
  > = ({ signal }) => getLeftTurnVolumeTestData(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getLeftTurnVolumeTestData>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetLeftTurnVolumeTestDataQueryResult = NonNullable<
  Awaited<ReturnType<typeof getLeftTurnVolumeTestData>>
>
export type GetLeftTurnVolumeTestDataQueryError = ProblemDetails

/**
 * @summary Get example data for testing
 */
export const useGetLeftTurnVolumeTestData = <
  TData = Awaited<ReturnType<typeof getLeftTurnVolumeTestData>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getLeftTurnVolumeTestData>>,
    TError,
    TData
  >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetLeftTurnVolumeTestDataQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get report data
 */
export const getLeftTurnVolumeReportData = (volumeOptions: VolumeOptions) => {
  return reportsRequest<VolumeResult>({
    url: `/LeftTurnVolume/getReportData`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: volumeOptions,
  })
}

export const getGetLeftTurnVolumeReportDataMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getLeftTurnVolumeReportData>>,
    TError,
    { data: VolumeOptions },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof getLeftTurnVolumeReportData>>,
  TError,
  { data: VolumeOptions },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof getLeftTurnVolumeReportData>>,
    { data: VolumeOptions }
  > = (props) => {
    const { data } = props ?? {}

    return getLeftTurnVolumeReportData(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type GetLeftTurnVolumeReportDataMutationResult = NonNullable<
  Awaited<ReturnType<typeof getLeftTurnVolumeReportData>>
>
export type GetLeftTurnVolumeReportDataMutationBody = VolumeOptions
export type GetLeftTurnVolumeReportDataMutationError = ProblemDetails

/**
 * @summary Get report data
 */
export const useGetLeftTurnVolumeReportData = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getLeftTurnVolumeReportData>>,
    TError,
    { data: VolumeOptions },
    TContext
  >
}) => {
  const mutationOptions = getGetLeftTurnVolumeReportDataMutationOptions(options)

  return useMutation(mutationOptions)
}

export const getLinkPivotPcdData = (
  linkPivotPcdOptions: LinkPivotPcdOptions
) => {
  return reportsRequest<LinkPivotPcdResult>({
    url: `/LinkPivot/getPcdData`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: linkPivotPcdOptions,
  })
}

export const getGetLinkPivotPcdDataMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getLinkPivotPcdData>>,
    TError,
    { data: LinkPivotPcdOptions },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof getLinkPivotPcdData>>,
  TError,
  { data: LinkPivotPcdOptions },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof getLinkPivotPcdData>>,
    { data: LinkPivotPcdOptions }
  > = (props) => {
    const { data } = props ?? {}

    return getLinkPivotPcdData(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type GetLinkPivotPcdDataMutationResult = NonNullable<
  Awaited<ReturnType<typeof getLinkPivotPcdData>>
>
export type GetLinkPivotPcdDataMutationBody = LinkPivotPcdOptions
export type GetLinkPivotPcdDataMutationError = ProblemDetails

export const useGetLinkPivotPcdData = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getLinkPivotPcdData>>,
    TError,
    { data: LinkPivotPcdOptions },
    TContext
  >
}) => {
  const mutationOptions = getGetLinkPivotPcdDataMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Get example data for testing
 */
export const getLinkPivotTestData = (signal?: AbortSignal) => {
  return reportsRequest<LinkPivotResult>({
    url: `/LinkPivot/test`,
    method: 'GET',
    signal,
  })
}

export const getGetLinkPivotTestDataQueryKey = () => {
  return [`/LinkPivot/test`] as const
}

export const getGetLinkPivotTestDataQueryOptions = <
  TData = Awaited<ReturnType<typeof getLinkPivotTestData>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getLinkPivotTestData>>,
    TError,
    TData
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetLinkPivotTestDataQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getLinkPivotTestData>>
  > = ({ signal }) => getLinkPivotTestData(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getLinkPivotTestData>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetLinkPivotTestDataQueryResult = NonNullable<
  Awaited<ReturnType<typeof getLinkPivotTestData>>
>
export type GetLinkPivotTestDataQueryError = ProblemDetails

/**
 * @summary Get example data for testing
 */
export const useGetLinkPivotTestData = <
  TData = Awaited<ReturnType<typeof getLinkPivotTestData>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getLinkPivotTestData>>,
    TError,
    TData
  >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetLinkPivotTestDataQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get report data
 */
export const getLinkPivotReportData = (linkPivotOptions: LinkPivotOptions) => {
  return reportsRequest<LinkPivotResult>({
    url: `/LinkPivot/getReportData`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: linkPivotOptions,
  })
}

export const getGetLinkPivotReportDataMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getLinkPivotReportData>>,
    TError,
    { data: LinkPivotOptions },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof getLinkPivotReportData>>,
  TError,
  { data: LinkPivotOptions },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof getLinkPivotReportData>>,
    { data: LinkPivotOptions }
  > = (props) => {
    const { data } = props ?? {}

    return getLinkPivotReportData(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type GetLinkPivotReportDataMutationResult = NonNullable<
  Awaited<ReturnType<typeof getLinkPivotReportData>>
>
export type GetLinkPivotReportDataMutationBody = LinkPivotOptions
export type GetLinkPivotReportDataMutationError = ProblemDetails

/**
 * @summary Get report data
 */
export const useGetLinkPivotReportData = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getLinkPivotReportData>>,
    TError,
    { data: LinkPivotOptions },
    TContext
  >
}) => {
  const mutationOptions = getGetLinkPivotReportDataMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Get example data for testing
 */
export const getPedDelayTestData = (signal?: AbortSignal) => {
  return reportsRequest<PedDelayResult[]>({
    url: `/PedDelay/test`,
    method: 'GET',
    signal,
  })
}

export const getGetPedDelayTestDataQueryKey = () => {
  return [`/PedDelay/test`] as const
}

export const getGetPedDelayTestDataQueryOptions = <
  TData = Awaited<ReturnType<typeof getPedDelayTestData>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getPedDelayTestData>>,
    TError,
    TData
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetPedDelayTestDataQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getPedDelayTestData>>
  > = ({ signal }) => getPedDelayTestData(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPedDelayTestData>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetPedDelayTestDataQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPedDelayTestData>>
>
export type GetPedDelayTestDataQueryError = ProblemDetails

/**
 * @summary Get example data for testing
 */
export const useGetPedDelayTestData = <
  TData = Awaited<ReturnType<typeof getPedDelayTestData>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getPedDelayTestData>>,
    TError,
    TData
  >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetPedDelayTestDataQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get report data
 */
export const getPedDelayReportData = (pedDelayOptions: PedDelayOptions) => {
  return reportsRequest<PedDelayResult[]>({
    url: `/PedDelay/getReportData`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: pedDelayOptions,
  })
}

export const getGetPedDelayReportDataMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getPedDelayReportData>>,
    TError,
    { data: PedDelayOptions },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof getPedDelayReportData>>,
  TError,
  { data: PedDelayOptions },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof getPedDelayReportData>>,
    { data: PedDelayOptions }
  > = (props) => {
    const { data } = props ?? {}

    return getPedDelayReportData(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type GetPedDelayReportDataMutationResult = NonNullable<
  Awaited<ReturnType<typeof getPedDelayReportData>>
>
export type GetPedDelayReportDataMutationBody = PedDelayOptions
export type GetPedDelayReportDataMutationError = ProblemDetails

/**
 * @summary Get report data
 */
export const useGetPedDelayReportData = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getPedDelayReportData>>,
    TError,
    { data: PedDelayOptions },
    TContext
  >
}) => {
  const mutationOptions = getGetPedDelayReportDataMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Get example data for testing
 */
export const getPreemptDetailTestData = (signal?: AbortSignal) => {
  return reportsRequest<PreemptDetailResult>({
    url: `/PreemptDetail/test`,
    method: 'GET',
    signal,
  })
}

export const getGetPreemptDetailTestDataQueryKey = () => {
  return [`/PreemptDetail/test`] as const
}

export const getGetPreemptDetailTestDataQueryOptions = <
  TData = Awaited<ReturnType<typeof getPreemptDetailTestData>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getPreemptDetailTestData>>,
    TError,
    TData
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetPreemptDetailTestDataQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getPreemptDetailTestData>>
  > = ({ signal }) => getPreemptDetailTestData(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPreemptDetailTestData>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetPreemptDetailTestDataQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPreemptDetailTestData>>
>
export type GetPreemptDetailTestDataQueryError = ProblemDetails

/**
 * @summary Get example data for testing
 */
export const useGetPreemptDetailTestData = <
  TData = Awaited<ReturnType<typeof getPreemptDetailTestData>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getPreemptDetailTestData>>,
    TError,
    TData
  >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetPreemptDetailTestDataQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get report data
 */
export const getPreemptDetailReportData = (
  preemptDetailOptions: PreemptDetailOptions
) => {
  return reportsRequest<PreemptDetailResult>({
    url: `/PreemptDetail/getReportData`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: preemptDetailOptions,
  })
}

export const getGetPreemptDetailReportDataMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getPreemptDetailReportData>>,
    TError,
    { data: PreemptDetailOptions },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof getPreemptDetailReportData>>,
  TError,
  { data: PreemptDetailOptions },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof getPreemptDetailReportData>>,
    { data: PreemptDetailOptions }
  > = (props) => {
    const { data } = props ?? {}

    return getPreemptDetailReportData(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type GetPreemptDetailReportDataMutationResult = NonNullable<
  Awaited<ReturnType<typeof getPreemptDetailReportData>>
>
export type GetPreemptDetailReportDataMutationBody = PreemptDetailOptions
export type GetPreemptDetailReportDataMutationError = ProblemDetails

/**
 * @summary Get report data
 */
export const useGetPreemptDetailReportData = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getPreemptDetailReportData>>,
    TError,
    { data: PreemptDetailOptions },
    TContext
  >
}) => {
  const mutationOptions = getGetPreemptDetailReportDataMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Get example data for testing
 */
export const getPreemptServiceTestData = (signal?: AbortSignal) => {
  return reportsRequest<PreemptServiceResult>({
    url: `/PreemptService/test`,
    method: 'GET',
    signal,
  })
}

export const getGetPreemptServiceTestDataQueryKey = () => {
  return [`/PreemptService/test`] as const
}

export const getGetPreemptServiceTestDataQueryOptions = <
  TData = Awaited<ReturnType<typeof getPreemptServiceTestData>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getPreemptServiceTestData>>,
    TError,
    TData
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetPreemptServiceTestDataQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getPreemptServiceTestData>>
  > = ({ signal }) => getPreemptServiceTestData(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPreemptServiceTestData>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetPreemptServiceTestDataQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPreemptServiceTestData>>
>
export type GetPreemptServiceTestDataQueryError = ProblemDetails

/**
 * @summary Get example data for testing
 */
export const useGetPreemptServiceTestData = <
  TData = Awaited<ReturnType<typeof getPreemptServiceTestData>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getPreemptServiceTestData>>,
    TError,
    TData
  >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetPreemptServiceTestDataQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get report data
 */
export const getPreemptServiceReportData = (
  preemptServiceOptions: PreemptServiceOptions
) => {
  return reportsRequest<PreemptServiceResult>({
    url: `/PreemptService/getReportData`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: preemptServiceOptions,
  })
}

export const getGetPreemptServiceReportDataMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getPreemptServiceReportData>>,
    TError,
    { data: PreemptServiceOptions },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof getPreemptServiceReportData>>,
  TError,
  { data: PreemptServiceOptions },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof getPreemptServiceReportData>>,
    { data: PreemptServiceOptions }
  > = (props) => {
    const { data } = props ?? {}

    return getPreemptServiceReportData(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type GetPreemptServiceReportDataMutationResult = NonNullable<
  Awaited<ReturnType<typeof getPreemptServiceReportData>>
>
export type GetPreemptServiceReportDataMutationBody = PreemptServiceOptions
export type GetPreemptServiceReportDataMutationError = ProblemDetails

/**
 * @summary Get report data
 */
export const useGetPreemptServiceReportData = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getPreemptServiceReportData>>,
    TError,
    { data: PreemptServiceOptions },
    TContext
  >
}) => {
  const mutationOptions = getGetPreemptServiceReportDataMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Get example data for testing
 */
export const getPreemptServiceRequestTestData = (signal?: AbortSignal) => {
  return reportsRequest<PreemptServiceRequestResult>({
    url: `/PreemptServiceRequest/test`,
    method: 'GET',
    signal,
  })
}

export const getGetPreemptServiceRequestTestDataQueryKey = () => {
  return [`/PreemptServiceRequest/test`] as const
}

export const getGetPreemptServiceRequestTestDataQueryOptions = <
  TData = Awaited<ReturnType<typeof getPreemptServiceRequestTestData>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getPreemptServiceRequestTestData>>,
    TError,
    TData
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetPreemptServiceRequestTestDataQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getPreemptServiceRequestTestData>>
  > = ({ signal }) => getPreemptServiceRequestTestData(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPreemptServiceRequestTestData>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetPreemptServiceRequestTestDataQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPreemptServiceRequestTestData>>
>
export type GetPreemptServiceRequestTestDataQueryError = ProblemDetails

/**
 * @summary Get example data for testing
 */
export const useGetPreemptServiceRequestTestData = <
  TData = Awaited<ReturnType<typeof getPreemptServiceRequestTestData>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getPreemptServiceRequestTestData>>,
    TError,
    TData
  >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetPreemptServiceRequestTestDataQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get report data
 */
export const getPreemptServiceRequestReportData = (
  preemptServiceRequestOptions: PreemptServiceRequestOptions
) => {
  return reportsRequest<PreemptServiceRequestResult>({
    url: `/PreemptServiceRequest/getReportData`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: preemptServiceRequestOptions,
  })
}

export const getGetPreemptServiceRequestReportDataMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getPreemptServiceRequestReportData>>,
    TError,
    { data: PreemptServiceRequestOptions },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof getPreemptServiceRequestReportData>>,
  TError,
  { data: PreemptServiceRequestOptions },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof getPreemptServiceRequestReportData>>,
    { data: PreemptServiceRequestOptions }
  > = (props) => {
    const { data } = props ?? {}

    return getPreemptServiceRequestReportData(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type GetPreemptServiceRequestReportDataMutationResult = NonNullable<
  Awaited<ReturnType<typeof getPreemptServiceRequestReportData>>
>
export type GetPreemptServiceRequestReportDataMutationBody =
  PreemptServiceRequestOptions
export type GetPreemptServiceRequestReportDataMutationError = ProblemDetails

/**
 * @summary Get report data
 */
export const useGetPreemptServiceRequestReportData = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getPreemptServiceRequestReportData>>,
    TError,
    { data: PreemptServiceRequestOptions },
    TContext
  >
}) => {
  const mutationOptions =
    getGetPreemptServiceRequestReportDataMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Get example data for testing
 */
export const getPurdueCoordinationDiagramTestData = (signal?: AbortSignal) => {
  return reportsRequest<PurdueCoordinationDiagramResult[]>({
    url: `/PurdueCoordinationDiagram/test`,
    method: 'GET',
    signal,
  })
}

export const getGetPurdueCoordinationDiagramTestDataQueryKey = () => {
  return [`/PurdueCoordinationDiagram/test`] as const
}

export const getGetPurdueCoordinationDiagramTestDataQueryOptions = <
  TData = Awaited<ReturnType<typeof getPurdueCoordinationDiagramTestData>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getPurdueCoordinationDiagramTestData>>,
    TError,
    TData
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetPurdueCoordinationDiagramTestDataQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getPurdueCoordinationDiagramTestData>>
  > = ({ signal }) => getPurdueCoordinationDiagramTestData(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPurdueCoordinationDiagramTestData>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetPurdueCoordinationDiagramTestDataQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPurdueCoordinationDiagramTestData>>
>
export type GetPurdueCoordinationDiagramTestDataQueryError = ProblemDetails

/**
 * @summary Get example data for testing
 */
export const useGetPurdueCoordinationDiagramTestData = <
  TData = Awaited<ReturnType<typeof getPurdueCoordinationDiagramTestData>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getPurdueCoordinationDiagramTestData>>,
    TError,
    TData
  >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions =
    getGetPurdueCoordinationDiagramTestDataQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get report data
 */
export const getPurdueCoordinationDiagramReportData = (
  purdueCoordinationDiagramOptions: PurdueCoordinationDiagramOptions
) => {
  return reportsRequest<PurdueCoordinationDiagramResult[]>({
    url: `/PurdueCoordinationDiagram/getReportData`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: purdueCoordinationDiagramOptions,
  })
}

export const getGetPurdueCoordinationDiagramReportDataMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getPurdueCoordinationDiagramReportData>>,
    TError,
    { data: PurdueCoordinationDiagramOptions },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof getPurdueCoordinationDiagramReportData>>,
  TError,
  { data: PurdueCoordinationDiagramOptions },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof getPurdueCoordinationDiagramReportData>>,
    { data: PurdueCoordinationDiagramOptions }
  > = (props) => {
    const { data } = props ?? {}

    return getPurdueCoordinationDiagramReportData(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type GetPurdueCoordinationDiagramReportDataMutationResult = NonNullable<
  Awaited<ReturnType<typeof getPurdueCoordinationDiagramReportData>>
>
export type GetPurdueCoordinationDiagramReportDataMutationBody =
  PurdueCoordinationDiagramOptions
export type GetPurdueCoordinationDiagramReportDataMutationError = ProblemDetails

/**
 * @summary Get report data
 */
export const useGetPurdueCoordinationDiagramReportData = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getPurdueCoordinationDiagramReportData>>,
    TError,
    { data: PurdueCoordinationDiagramOptions },
    TContext
  >
}) => {
  const mutationOptions =
    getGetPurdueCoordinationDiagramReportDataMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Get example data for testing
 */
export const getPurduePhaseTerminationTestData = (signal?: AbortSignal) => {
  return reportsRequest<PhaseTerminationResult>({
    url: `/PurduePhaseTermination/test`,
    method: 'GET',
    signal,
  })
}

export const getGetPurduePhaseTerminationTestDataQueryKey = () => {
  return [`/PurduePhaseTermination/test`] as const
}

export const getGetPurduePhaseTerminationTestDataQueryOptions = <
  TData = Awaited<ReturnType<typeof getPurduePhaseTerminationTestData>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getPurduePhaseTerminationTestData>>,
    TError,
    TData
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetPurduePhaseTerminationTestDataQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getPurduePhaseTerminationTestData>>
  > = ({ signal }) => getPurduePhaseTerminationTestData(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getPurduePhaseTerminationTestData>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetPurduePhaseTerminationTestDataQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPurduePhaseTerminationTestData>>
>
export type GetPurduePhaseTerminationTestDataQueryError = ProblemDetails

/**
 * @summary Get example data for testing
 */
export const useGetPurduePhaseTerminationTestData = <
  TData = Awaited<ReturnType<typeof getPurduePhaseTerminationTestData>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getPurduePhaseTerminationTestData>>,
    TError,
    TData
  >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetPurduePhaseTerminationTestDataQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get report data
 */
export const getPurduePhaseTerminationReportData = (
  purduePhaseTerminationOptions: PurduePhaseTerminationOptions
) => {
  return reportsRequest<PhaseTerminationResult>({
    url: `/PurduePhaseTermination/getReportData`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: purduePhaseTerminationOptions,
  })
}

export const getGetPurduePhaseTerminationReportDataMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getPurduePhaseTerminationReportData>>,
    TError,
    { data: PurduePhaseTerminationOptions },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof getPurduePhaseTerminationReportData>>,
  TError,
  { data: PurduePhaseTerminationOptions },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof getPurduePhaseTerminationReportData>>,
    { data: PurduePhaseTerminationOptions }
  > = (props) => {
    const { data } = props ?? {}

    return getPurduePhaseTerminationReportData(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type GetPurduePhaseTerminationReportDataMutationResult = NonNullable<
  Awaited<ReturnType<typeof getPurduePhaseTerminationReportData>>
>
export type GetPurduePhaseTerminationReportDataMutationBody =
  PurduePhaseTerminationOptions
export type GetPurduePhaseTerminationReportDataMutationError = ProblemDetails

/**
 * @summary Get report data
 */
export const useGetPurduePhaseTerminationReportData = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getPurduePhaseTerminationReportData>>,
    TError,
    { data: PurduePhaseTerminationOptions },
    TContext
  >
}) => {
  const mutationOptions =
    getGetPurduePhaseTerminationReportDataMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Get example data for testing
 */
export const getRampMeteringTestData = (signal?: AbortSignal) => {
  return reportsRequest<RampMeteringResult>({
    url: `/RampMetering/test`,
    method: 'GET',
    signal,
  })
}

export const getGetRampMeteringTestDataQueryKey = () => {
  return [`/RampMetering/test`] as const
}

export const getGetRampMeteringTestDataQueryOptions = <
  TData = Awaited<ReturnType<typeof getRampMeteringTestData>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getRampMeteringTestData>>,
    TError,
    TData
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetRampMeteringTestDataQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getRampMeteringTestData>>
  > = ({ signal }) => getRampMeteringTestData(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getRampMeteringTestData>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetRampMeteringTestDataQueryResult = NonNullable<
  Awaited<ReturnType<typeof getRampMeteringTestData>>
>
export type GetRampMeteringTestDataQueryError = ProblemDetails

/**
 * @summary Get example data for testing
 */
export const useGetRampMeteringTestData = <
  TData = Awaited<ReturnType<typeof getRampMeteringTestData>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getRampMeteringTestData>>,
    TError,
    TData
  >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetRampMeteringTestDataQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get report data
 */
export const getRampMeteringReportData = (
  rampMeteringOptions: RampMeteringOptions
) => {
  return reportsRequest<RampMeteringResult>({
    url: `/RampMetering/getReportData`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: rampMeteringOptions,
  })
}

export const getGetRampMeteringReportDataMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getRampMeteringReportData>>,
    TError,
    { data: RampMeteringOptions },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof getRampMeteringReportData>>,
  TError,
  { data: RampMeteringOptions },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof getRampMeteringReportData>>,
    { data: RampMeteringOptions }
  > = (props) => {
    const { data } = props ?? {}

    return getRampMeteringReportData(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type GetRampMeteringReportDataMutationResult = NonNullable<
  Awaited<ReturnType<typeof getRampMeteringReportData>>
>
export type GetRampMeteringReportDataMutationBody = RampMeteringOptions
export type GetRampMeteringReportDataMutationError = ProblemDetails

/**
 * @summary Get report data
 */
export const useGetRampMeteringReportData = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getRampMeteringReportData>>,
    TError,
    { data: RampMeteringOptions },
    TContext
  >
}) => {
  const mutationOptions = getGetRampMeteringReportDataMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Get example data for testing
 */
export const getSplitFailTestData = (signal?: AbortSignal) => {
  return reportsRequest<SplitFailsResult[]>({
    url: `/SplitFail/test`,
    method: 'GET',
    signal,
  })
}

export const getGetSplitFailTestDataQueryKey = () => {
  return [`/SplitFail/test`] as const
}

export const getGetSplitFailTestDataQueryOptions = <
  TData = Awaited<ReturnType<typeof getSplitFailTestData>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getSplitFailTestData>>,
    TError,
    TData
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetSplitFailTestDataQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getSplitFailTestData>>
  > = ({ signal }) => getSplitFailTestData(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getSplitFailTestData>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetSplitFailTestDataQueryResult = NonNullable<
  Awaited<ReturnType<typeof getSplitFailTestData>>
>
export type GetSplitFailTestDataQueryError = ProblemDetails

/**
 * @summary Get example data for testing
 */
export const useGetSplitFailTestData = <
  TData = Awaited<ReturnType<typeof getSplitFailTestData>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getSplitFailTestData>>,
    TError,
    TData
  >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetSplitFailTestDataQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get report data
 */
export const getSplitFailReportData = (splitFailOptions: SplitFailOptions) => {
  return reportsRequest<SplitFailsResult[]>({
    url: `/SplitFail/getReportData`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: splitFailOptions,
  })
}

export const getGetSplitFailReportDataMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getSplitFailReportData>>,
    TError,
    { data: SplitFailOptions },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof getSplitFailReportData>>,
  TError,
  { data: SplitFailOptions },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof getSplitFailReportData>>,
    { data: SplitFailOptions }
  > = (props) => {
    const { data } = props ?? {}

    return getSplitFailReportData(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type GetSplitFailReportDataMutationResult = NonNullable<
  Awaited<ReturnType<typeof getSplitFailReportData>>
>
export type GetSplitFailReportDataMutationBody = SplitFailOptions
export type GetSplitFailReportDataMutationError = ProblemDetails

/**
 * @summary Get report data
 */
export const useGetSplitFailReportData = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getSplitFailReportData>>,
    TError,
    { data: SplitFailOptions },
    TContext
  >
}) => {
  const mutationOptions = getGetSplitFailReportDataMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Get example data for testing
 */
export const getSplitMonitorTestData = (signal?: AbortSignal) => {
  return reportsRequest<SplitMonitorResult[]>({
    url: `/SplitMonitor/test`,
    method: 'GET',
    signal,
  })
}

export const getGetSplitMonitorTestDataQueryKey = () => {
  return [`/SplitMonitor/test`] as const
}

export const getGetSplitMonitorTestDataQueryOptions = <
  TData = Awaited<ReturnType<typeof getSplitMonitorTestData>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getSplitMonitorTestData>>,
    TError,
    TData
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetSplitMonitorTestDataQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getSplitMonitorTestData>>
  > = ({ signal }) => getSplitMonitorTestData(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getSplitMonitorTestData>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetSplitMonitorTestDataQueryResult = NonNullable<
  Awaited<ReturnType<typeof getSplitMonitorTestData>>
>
export type GetSplitMonitorTestDataQueryError = ProblemDetails

/**
 * @summary Get example data for testing
 */
export const useGetSplitMonitorTestData = <
  TData = Awaited<ReturnType<typeof getSplitMonitorTestData>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getSplitMonitorTestData>>,
    TError,
    TData
  >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetSplitMonitorTestDataQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get report data
 */
export const getSplitMonitorReportData = (
  splitMonitorOptions: SplitMonitorOptions
) => {
  return reportsRequest<SplitMonitorResult[]>({
    url: `/SplitMonitor/getReportData`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: splitMonitorOptions,
  })
}

export const getGetSplitMonitorReportDataMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getSplitMonitorReportData>>,
    TError,
    { data: SplitMonitorOptions },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof getSplitMonitorReportData>>,
  TError,
  { data: SplitMonitorOptions },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof getSplitMonitorReportData>>,
    { data: SplitMonitorOptions }
  > = (props) => {
    const { data } = props ?? {}

    return getSplitMonitorReportData(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type GetSplitMonitorReportDataMutationResult = NonNullable<
  Awaited<ReturnType<typeof getSplitMonitorReportData>>
>
export type GetSplitMonitorReportDataMutationBody = SplitMonitorOptions
export type GetSplitMonitorReportDataMutationError = ProblemDetails

/**
 * @summary Get report data
 */
export const useGetSplitMonitorReportData = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getSplitMonitorReportData>>,
    TError,
    { data: SplitMonitorOptions },
    TContext
  >
}) => {
  const mutationOptions = getGetSplitMonitorReportDataMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Get example data for testing
 */
export const getTimeSpaceDiagramTestData = (signal?: AbortSignal) => {
  return reportsRequest<TimeSpaceDiagramResultForPhase[]>({
    url: `/TimeSpaceDiagram/test`,
    method: 'GET',
    signal,
  })
}

export const getGetTimeSpaceDiagramTestDataQueryKey = () => {
  return [`/TimeSpaceDiagram/test`] as const
}

export const getGetTimeSpaceDiagramTestDataQueryOptions = <
  TData = Awaited<ReturnType<typeof getTimeSpaceDiagramTestData>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getTimeSpaceDiagramTestData>>,
    TError,
    TData
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetTimeSpaceDiagramTestDataQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getTimeSpaceDiagramTestData>>
  > = ({ signal }) => getTimeSpaceDiagramTestData(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getTimeSpaceDiagramTestData>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetTimeSpaceDiagramTestDataQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTimeSpaceDiagramTestData>>
>
export type GetTimeSpaceDiagramTestDataQueryError = ProblemDetails

/**
 * @summary Get example data for testing
 */
export const useGetTimeSpaceDiagramTestData = <
  TData = Awaited<ReturnType<typeof getTimeSpaceDiagramTestData>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getTimeSpaceDiagramTestData>>,
    TError,
    TData
  >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetTimeSpaceDiagramTestDataQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get report data
 */
export const getTimeSpaceDiagramReportData = (
  timeSpaceDiagramOptions: TimeSpaceDiagramOptions
) => {
  return reportsRequest<TimeSpaceDiagramResultForPhase[]>({
    url: `/TimeSpaceDiagram/getReportData`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: timeSpaceDiagramOptions,
  })
}

export const getGetTimeSpaceDiagramReportDataMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getTimeSpaceDiagramReportData>>,
    TError,
    { data: TimeSpaceDiagramOptions },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof getTimeSpaceDiagramReportData>>,
  TError,
  { data: TimeSpaceDiagramOptions },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof getTimeSpaceDiagramReportData>>,
    { data: TimeSpaceDiagramOptions }
  > = (props) => {
    const { data } = props ?? {}

    return getTimeSpaceDiagramReportData(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type GetTimeSpaceDiagramReportDataMutationResult = NonNullable<
  Awaited<ReturnType<typeof getTimeSpaceDiagramReportData>>
>
export type GetTimeSpaceDiagramReportDataMutationBody = TimeSpaceDiagramOptions
export type GetTimeSpaceDiagramReportDataMutationError = ProblemDetails

/**
 * @summary Get report data
 */
export const useGetTimeSpaceDiagramReportData = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getTimeSpaceDiagramReportData>>,
    TError,
    { data: TimeSpaceDiagramOptions },
    TContext
  >
}) => {
  const mutationOptions =
    getGetTimeSpaceDiagramReportDataMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Get example data for testing
 */
export const getTimeSpaceDiagramAverageTestData = (signal?: AbortSignal) => {
  return reportsRequest<TimeSpaceDiagramAverageResult[]>({
    url: `/TimeSpaceDiagramAverage/test`,
    method: 'GET',
    signal,
  })
}

export const getGetTimeSpaceDiagramAverageTestDataQueryKey = () => {
  return [`/TimeSpaceDiagramAverage/test`] as const
}

export const getGetTimeSpaceDiagramAverageTestDataQueryOptions = <
  TData = Awaited<ReturnType<typeof getTimeSpaceDiagramAverageTestData>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getTimeSpaceDiagramAverageTestData>>,
    TError,
    TData
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetTimeSpaceDiagramAverageTestDataQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getTimeSpaceDiagramAverageTestData>>
  > = ({ signal }) => getTimeSpaceDiagramAverageTestData(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getTimeSpaceDiagramAverageTestData>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetTimeSpaceDiagramAverageTestDataQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTimeSpaceDiagramAverageTestData>>
>
export type GetTimeSpaceDiagramAverageTestDataQueryError = ProblemDetails

/**
 * @summary Get example data for testing
 */
export const useGetTimeSpaceDiagramAverageTestData = <
  TData = Awaited<ReturnType<typeof getTimeSpaceDiagramAverageTestData>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getTimeSpaceDiagramAverageTestData>>,
    TError,
    TData
  >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions =
    getGetTimeSpaceDiagramAverageTestDataQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get report data
 */
export const getTimeSpaceDiagramAverageReportData = (
  timeSpaceDiagramAverageOptions: TimeSpaceDiagramAverageOptions
) => {
  return reportsRequest<TimeSpaceDiagramAverageResult[]>({
    url: `/TimeSpaceDiagramAverage/getReportData`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: timeSpaceDiagramAverageOptions,
  })
}

export const getGetTimeSpaceDiagramAverageReportDataMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getTimeSpaceDiagramAverageReportData>>,
    TError,
    { data: TimeSpaceDiagramAverageOptions },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof getTimeSpaceDiagramAverageReportData>>,
  TError,
  { data: TimeSpaceDiagramAverageOptions },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof getTimeSpaceDiagramAverageReportData>>,
    { data: TimeSpaceDiagramAverageOptions }
  > = (props) => {
    const { data } = props ?? {}

    return getTimeSpaceDiagramAverageReportData(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type GetTimeSpaceDiagramAverageReportDataMutationResult = NonNullable<
  Awaited<ReturnType<typeof getTimeSpaceDiagramAverageReportData>>
>
export type GetTimeSpaceDiagramAverageReportDataMutationBody =
  TimeSpaceDiagramAverageOptions
export type GetTimeSpaceDiagramAverageReportDataMutationError = ProblemDetails

/**
 * @summary Get report data
 */
export const useGetTimeSpaceDiagramAverageReportData = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getTimeSpaceDiagramAverageReportData>>,
    TError,
    { data: TimeSpaceDiagramAverageOptions },
    TContext
  >
}) => {
  const mutationOptions =
    getGetTimeSpaceDiagramAverageReportDataMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Get example data for testing
 */
export const getTimingAndActuationTestData = (signal?: AbortSignal) => {
  return reportsRequest<TimingAndActuationsForPhaseResult[]>({
    url: `/TimingAndActuation/test`,
    method: 'GET',
    signal,
  })
}

export const getGetTimingAndActuationTestDataQueryKey = () => {
  return [`/TimingAndActuation/test`] as const
}

export const getGetTimingAndActuationTestDataQueryOptions = <
  TData = Awaited<ReturnType<typeof getTimingAndActuationTestData>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getTimingAndActuationTestData>>,
    TError,
    TData
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetTimingAndActuationTestDataQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getTimingAndActuationTestData>>
  > = ({ signal }) => getTimingAndActuationTestData(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getTimingAndActuationTestData>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetTimingAndActuationTestDataQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTimingAndActuationTestData>>
>
export type GetTimingAndActuationTestDataQueryError = ProblemDetails

/**
 * @summary Get example data for testing
 */
export const useGetTimingAndActuationTestData = <
  TData = Awaited<ReturnType<typeof getTimingAndActuationTestData>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getTimingAndActuationTestData>>,
    TError,
    TData
  >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetTimingAndActuationTestDataQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get report data
 */
export const getTimingAndActuationReportData = (
  timingAndActuationsOptions: TimingAndActuationsOptions
) => {
  return reportsRequest<TimingAndActuationsForPhaseResult[]>({
    url: `/TimingAndActuation/getReportData`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: timingAndActuationsOptions,
  })
}

export const getGetTimingAndActuationReportDataMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getTimingAndActuationReportData>>,
    TError,
    { data: TimingAndActuationsOptions },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof getTimingAndActuationReportData>>,
  TError,
  { data: TimingAndActuationsOptions },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof getTimingAndActuationReportData>>,
    { data: TimingAndActuationsOptions }
  > = (props) => {
    const { data } = props ?? {}

    return getTimingAndActuationReportData(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type GetTimingAndActuationReportDataMutationResult = NonNullable<
  Awaited<ReturnType<typeof getTimingAndActuationReportData>>
>
export type GetTimingAndActuationReportDataMutationBody =
  TimingAndActuationsOptions
export type GetTimingAndActuationReportDataMutationError = ProblemDetails

/**
 * @summary Get report data
 */
export const useGetTimingAndActuationReportData = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getTimingAndActuationReportData>>,
    TError,
    { data: TimingAndActuationsOptions },
    TContext
  >
}) => {
  const mutationOptions =
    getGetTimingAndActuationReportDataMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Get example data for testing
 */
export const getTransitSignalPriorityTestData = (signal?: AbortSignal) => {
  return reportsRequest<TransitSignalPriorityResult[]>({
    url: `/TransitSignalPriority/test`,
    method: 'GET',
    signal,
  })
}

export const getGetTransitSignalPriorityTestDataQueryKey = () => {
  return [`/TransitSignalPriority/test`] as const
}

export const getGetTransitSignalPriorityTestDataQueryOptions = <
  TData = Awaited<ReturnType<typeof getTransitSignalPriorityTestData>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getTransitSignalPriorityTestData>>,
    TError,
    TData
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetTransitSignalPriorityTestDataQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getTransitSignalPriorityTestData>>
  > = ({ signal }) => getTransitSignalPriorityTestData(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getTransitSignalPriorityTestData>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetTransitSignalPriorityTestDataQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTransitSignalPriorityTestData>>
>
export type GetTransitSignalPriorityTestDataQueryError = ProblemDetails

/**
 * @summary Get example data for testing
 */
export const useGetTransitSignalPriorityTestData = <
  TData = Awaited<ReturnType<typeof getTransitSignalPriorityTestData>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getTransitSignalPriorityTestData>>,
    TError,
    TData
  >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetTransitSignalPriorityTestDataQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get report data
 */
export const getTransitSignalPriorityReportData = (
  transitSignalPriorityOptions: TransitSignalPriorityOptions
) => {
  return reportsRequest<TransitSignalPriorityResult[]>({
    url: `/TransitSignalPriority/getReportData`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: transitSignalPriorityOptions,
  })
}

export const getGetTransitSignalPriorityReportDataMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getTransitSignalPriorityReportData>>,
    TError,
    { data: TransitSignalPriorityOptions },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof getTransitSignalPriorityReportData>>,
  TError,
  { data: TransitSignalPriorityOptions },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof getTransitSignalPriorityReportData>>,
    { data: TransitSignalPriorityOptions }
  > = (props) => {
    const { data } = props ?? {}

    return getTransitSignalPriorityReportData(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type GetTransitSignalPriorityReportDataMutationResult = NonNullable<
  Awaited<ReturnType<typeof getTransitSignalPriorityReportData>>
>
export type GetTransitSignalPriorityReportDataMutationBody =
  TransitSignalPriorityOptions
export type GetTransitSignalPriorityReportDataMutationError = ProblemDetails

/**
 * @summary Get report data
 */
export const useGetTransitSignalPriorityReportData = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getTransitSignalPriorityReportData>>,
    TError,
    { data: TransitSignalPriorityOptions },
    TContext
  >
}) => {
  const mutationOptions =
    getGetTransitSignalPriorityReportDataMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Get example data for testing
 */
export const getTurningMovementCountsTestData = (signal?: AbortSignal) => {
  return reportsRequest<TurningMovementCountsResult>({
    url: `/TurningMovementCounts/test`,
    method: 'GET',
    signal,
  })
}

export const getGetTurningMovementCountsTestDataQueryKey = () => {
  return [`/TurningMovementCounts/test`] as const
}

export const getGetTurningMovementCountsTestDataQueryOptions = <
  TData = Awaited<ReturnType<typeof getTurningMovementCountsTestData>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getTurningMovementCountsTestData>>,
    TError,
    TData
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetTurningMovementCountsTestDataQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getTurningMovementCountsTestData>>
  > = ({ signal }) => getTurningMovementCountsTestData(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getTurningMovementCountsTestData>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetTurningMovementCountsTestDataQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTurningMovementCountsTestData>>
>
export type GetTurningMovementCountsTestDataQueryError = ProblemDetails

/**
 * @summary Get example data for testing
 */
export const useGetTurningMovementCountsTestData = <
  TData = Awaited<ReturnType<typeof getTurningMovementCountsTestData>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getTurningMovementCountsTestData>>,
    TError,
    TData
  >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetTurningMovementCountsTestDataQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get report data
 */
export const getTurningMovementCountsReportData = (
  turningMovementCountsOptions: NonReadonly<TurningMovementCountsOptions>
) => {
  return reportsRequest<TurningMovementCountsResult>({
    url: `/TurningMovementCounts/getReportData`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: turningMovementCountsOptions,
  })
}

export const getGetTurningMovementCountsReportDataMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getTurningMovementCountsReportData>>,
    TError,
    { data: NonReadonly<TurningMovementCountsOptions> },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof getTurningMovementCountsReportData>>,
  TError,
  { data: NonReadonly<TurningMovementCountsOptions> },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof getTurningMovementCountsReportData>>,
    { data: NonReadonly<TurningMovementCountsOptions> }
  > = (props) => {
    const { data } = props ?? {}

    return getTurningMovementCountsReportData(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type GetTurningMovementCountsReportDataMutationResult = NonNullable<
  Awaited<ReturnType<typeof getTurningMovementCountsReportData>>
>
export type GetTurningMovementCountsReportDataMutationBody =
  NonReadonly<TurningMovementCountsOptions>
export type GetTurningMovementCountsReportDataMutationError = ProblemDetails

/**
 * @summary Get report data
 */
export const useGetTurningMovementCountsReportData = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getTurningMovementCountsReportData>>,
    TError,
    { data: NonReadonly<TurningMovementCountsOptions> },
    TContext
  >
}) => {
  const mutationOptions =
    getGetTurningMovementCountsReportDataMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Get example data for testing
 */
export const getWaitTimeTestData = (signal?: AbortSignal) => {
  return reportsRequest<WaitTimeResult[]>({
    url: `/WaitTime/test`,
    method: 'GET',
    signal,
  })
}

export const getGetWaitTimeTestDataQueryKey = () => {
  return [`/WaitTime/test`] as const
}

export const getGetWaitTimeTestDataQueryOptions = <
  TData = Awaited<ReturnType<typeof getWaitTimeTestData>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getWaitTimeTestData>>,
    TError,
    TData
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetWaitTimeTestDataQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getWaitTimeTestData>>
  > = ({ signal }) => getWaitTimeTestData(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getWaitTimeTestData>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetWaitTimeTestDataQueryResult = NonNullable<
  Awaited<ReturnType<typeof getWaitTimeTestData>>
>
export type GetWaitTimeTestDataQueryError = ProblemDetails

/**
 * @summary Get example data for testing
 */
export const useGetWaitTimeTestData = <
  TData = Awaited<ReturnType<typeof getWaitTimeTestData>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getWaitTimeTestData>>,
    TError,
    TData
  >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetWaitTimeTestDataQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get report data
 */
export const getWaitTimeReportData = (waitTimeOptions: WaitTimeOptions) => {
  return reportsRequest<WaitTimeResult[]>({
    url: `/WaitTime/getReportData`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: waitTimeOptions,
  })
}

export const getGetWaitTimeReportDataMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getWaitTimeReportData>>,
    TError,
    { data: WaitTimeOptions },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof getWaitTimeReportData>>,
  TError,
  { data: WaitTimeOptions },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof getWaitTimeReportData>>,
    { data: WaitTimeOptions }
  > = (props) => {
    const { data } = props ?? {}

    return getWaitTimeReportData(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type GetWaitTimeReportDataMutationResult = NonNullable<
  Awaited<ReturnType<typeof getWaitTimeReportData>>
>
export type GetWaitTimeReportDataMutationBody = WaitTimeOptions
export type GetWaitTimeReportDataMutationError = ProblemDetails

/**
 * @summary Get report data
 */
export const useGetWaitTimeReportData = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getWaitTimeReportData>>,
    TError,
    { data: WaitTimeOptions },
    TContext
  >
}) => {
  const mutationOptions = getGetWaitTimeReportDataMutationOptions(options)

  return useMutation(mutationOptions)
}

export const getWatchdogIssueTypes = (signal?: AbortSignal) => {
  return reportsRequest<unknown>({
    url: `/Watchdog/GetIssueTypes`,
    method: 'GET',
    signal,
  })
}

export const getGetWatchdogIssueTypesQueryKey = () => {
  return [`/Watchdog/GetIssueTypes`] as const
}

export const getGetWatchdogIssueTypesQueryOptions = <
  TData = Awaited<ReturnType<typeof getWatchdogIssueTypes>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getWatchdogIssueTypes>>,
    TError,
    TData
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetWatchdogIssueTypesQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getWatchdogIssueTypes>>
  > = ({ signal }) => getWatchdogIssueTypes(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getWatchdogIssueTypes>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetWatchdogIssueTypesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getWatchdogIssueTypes>>
>
export type GetWatchdogIssueTypesQueryError = ProblemDetails

export const useGetWatchdogIssueTypes = <
  TData = Awaited<ReturnType<typeof getWatchdogIssueTypes>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getWatchdogIssueTypes>>,
    TError,
    TData
  >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetWatchdogIssueTypesQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get example data for testing
 */
export const getWatchdogTestData = (signal?: AbortSignal) => {
  return reportsRequest<WatchDogResult>({
    url: `/Watchdog/test`,
    method: 'GET',
    signal,
  })
}

export const getGetWatchdogTestDataQueryKey = () => {
  return [`/Watchdog/test`] as const
}

export const getGetWatchdogTestDataQueryOptions = <
  TData = Awaited<ReturnType<typeof getWatchdogTestData>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getWatchdogTestData>>,
    TError,
    TData
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetWatchdogTestDataQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getWatchdogTestData>>
  > = ({ signal }) => getWatchdogTestData(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getWatchdogTestData>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetWatchdogTestDataQueryResult = NonNullable<
  Awaited<ReturnType<typeof getWatchdogTestData>>
>
export type GetWatchdogTestDataQueryError = ProblemDetails

/**
 * @summary Get example data for testing
 */
export const useGetWatchdogTestData = <
  TData = Awaited<ReturnType<typeof getWatchdogTestData>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getWatchdogTestData>>,
    TError,
    TData
  >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetWatchdogTestDataQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get report data
 */
export const getWatchdogReportData = (watchDogOptions: WatchDogOptions) => {
  return reportsRequest<WatchDogResult>({
    url: `/Watchdog/getReportData`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: watchDogOptions,
  })
}

export const getGetWatchdogReportDataMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getWatchdogReportData>>,
    TError,
    { data: WatchDogOptions },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof getWatchdogReportData>>,
  TError,
  { data: WatchDogOptions },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof getWatchdogReportData>>,
    { data: WatchDogOptions }
  > = (props) => {
    const { data } = props ?? {}

    return getWatchdogReportData(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type GetWatchdogReportDataMutationResult = NonNullable<
  Awaited<ReturnType<typeof getWatchdogReportData>>
>
export type GetWatchdogReportDataMutationBody = WatchDogOptions
export type GetWatchdogReportDataMutationError = ProblemDetails

/**
 * @summary Get report data
 */
export const useGetWatchdogReportData = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getWatchdogReportData>>,
    TError,
    { data: WatchDogOptions },
    TContext
  >
}) => {
  const mutationOptions = getGetWatchdogReportDataMutationOptions(options)

  return useMutation(mutationOptions)
}

export const getWatchDogDashboardDashboardGroup = (
  watchDogDashboardOptions: WatchDogDashboardOptions
) => {
  return reportsRequest<WatchDogIssueTypeGroup>({
    url: `/WatchDogDashboard/getDashboardGroup`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: watchDogDashboardOptions,
  })
}

export const getGetWatchDogDashboardDashboardGroupMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getWatchDogDashboardDashboardGroup>>,
    TError,
    { data: WatchDogDashboardOptions },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof getWatchDogDashboardDashboardGroup>>,
  TError,
  { data: WatchDogDashboardOptions },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof getWatchDogDashboardDashboardGroup>>,
    { data: WatchDogDashboardOptions }
  > = (props) => {
    const { data } = props ?? {}

    return getWatchDogDashboardDashboardGroup(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type GetWatchDogDashboardDashboardGroupMutationResult = NonNullable<
  Awaited<ReturnType<typeof getWatchDogDashboardDashboardGroup>>
>
export type GetWatchDogDashboardDashboardGroupMutationBody =
  WatchDogDashboardOptions
export type GetWatchDogDashboardDashboardGroupMutationError = ProblemDetails

export const useGetWatchDogDashboardDashboardGroup = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getWatchDogDashboardDashboardGroup>>,
    TError,
    { data: WatchDogDashboardOptions },
    TContext
  >
}) => {
  const mutationOptions =
    getGetWatchDogDashboardDashboardGroupMutationOptions(options)

  return useMutation(mutationOptions)
}

/**
 * @summary Get example data for testing
 */
export const getYellowRedActivationsTestData = (signal?: AbortSignal) => {
  return reportsRequest<YellowRedActivationsResult[]>({
    url: `/YellowRedActivations/test`,
    method: 'GET',
    signal,
  })
}

export const getGetYellowRedActivationsTestDataQueryKey = () => {
  return [`/YellowRedActivations/test`] as const
}

export const getGetYellowRedActivationsTestDataQueryOptions = <
  TData = Awaited<ReturnType<typeof getYellowRedActivationsTestData>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getYellowRedActivationsTestData>>,
    TError,
    TData
  >
}) => {
  const { query: queryOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getGetYellowRedActivationsTestDataQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getYellowRedActivationsTestData>>
  > = ({ signal }) => getYellowRedActivationsTestData(signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getYellowRedActivationsTestData>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetYellowRedActivationsTestDataQueryResult = NonNullable<
  Awaited<ReturnType<typeof getYellowRedActivationsTestData>>
>
export type GetYellowRedActivationsTestDataQueryError = ProblemDetails

/**
 * @summary Get example data for testing
 */
export const useGetYellowRedActivationsTestData = <
  TData = Awaited<ReturnType<typeof getYellowRedActivationsTestData>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getYellowRedActivationsTestData>>,
    TError,
    TData
  >
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetYellowRedActivationsTestDataQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Get report data
 */
export const getYellowRedActivationsReportData = (
  yellowRedActivationsOptions: YellowRedActivationsOptions
) => {
  return reportsRequest<YellowRedActivationsResult[]>({
    url: `/YellowRedActivations/getReportData`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: yellowRedActivationsOptions,
  })
}

export const getGetYellowRedActivationsReportDataMutationOptions = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getYellowRedActivationsReportData>>,
    TError,
    { data: YellowRedActivationsOptions },
    TContext
  >
}): UseMutationOptions<
  Awaited<ReturnType<typeof getYellowRedActivationsReportData>>,
  TError,
  { data: YellowRedActivationsOptions },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {}

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof getYellowRedActivationsReportData>>,
    { data: YellowRedActivationsOptions }
  > = (props) => {
    const { data } = props ?? {}

    return getYellowRedActivationsReportData(data)
  }

  return { mutationFn, ...mutationOptions }
}

export type GetYellowRedActivationsReportDataMutationResult = NonNullable<
  Awaited<ReturnType<typeof getYellowRedActivationsReportData>>
>
export type GetYellowRedActivationsReportDataMutationBody =
  YellowRedActivationsOptions
export type GetYellowRedActivationsReportDataMutationError = ProblemDetails

/**
 * @summary Get report data
 */
export const useGetYellowRedActivationsReportData = <
  TError = ProblemDetails,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getYellowRedActivationsReportData>>,
    TError,
    { data: YellowRedActivationsOptions },
    TContext
  >
}) => {
  const mutationOptions =
    getGetYellowRedActivationsReportDataMutationOptions(options)

  return useMutation(mutationOptions)
}
