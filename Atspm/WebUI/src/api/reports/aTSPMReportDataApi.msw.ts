/**
 * Generated by orval v6.23.0 🍺
 * Do not edit manually.
 * ATSPM Report Data Api
 * ATSPM Report Data with OpenAPI, Swashbuckle, and API versioning.
 * OpenAPI spec version: 1.0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'

export const getGetAggregationTestDataMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({identifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), series: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({dataPoints: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({identifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), identifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})))

export const getGetAggregationReportDataMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({identifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), series: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({dataPoints: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({identifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), identifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})))

export const getGetApproachDelayTestDataMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachDelayDataPoints: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), approachDelayPerVehicleDataPoints: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), approachDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), averageDelayPerVehicle: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), locationDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), phaseDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), phaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), plans: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({averageDelay: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), planDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), planNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), totalDelay: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), totalDelay: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getGetApproachDelayReportDataMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachDelayDataPoints: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), approachDelayPerVehicleDataPoints: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), approachDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), averageDelayPerVehicle: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), locationDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), phaseDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), phaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), plans: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({averageDelay: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), planDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), planNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), totalDelay: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), totalDelay: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getGetApproachSpeedTestDataMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), averageSpeeds: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), detectionType: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), eightyFifthSpeeds: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), fifteenthSpeeds: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), locationDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), phaseDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), phaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), plans: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({averageSpeed: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), eightyFifthPercentile: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), fifteenthPercentile: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), planDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), planNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), standardDeviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), postedSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})))

export const getGetApproachSpeedReportDataMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), averageSpeeds: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), detectionType: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), eightyFifthSpeeds: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), fifteenthSpeeds: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), locationDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), phaseDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), phaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), plans: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({averageSpeed: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), eightyFifthPercentile: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), fifteenthPercentile: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), planDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), planNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), standardDeviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), postedSpeed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})))

export const getGetApproachVolumeTestDataMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({combinedDirectionVolumes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), detectorType: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), locationDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), opposingDFactors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), opposingDirectionName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), opposingDirectionVolumes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDFactors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirectionName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), primaryDirectionVolumes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), summaryData: faker.helpers.arrayElement([{kFactor: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDFactor: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingKFactor: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPeakHour: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), opposingPeakHourFactor: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPeakHourVolume: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingTotalVolume: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), peakHour: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), peakHourFactor: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), peakHourVolume: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryDFactor: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryKFactor: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPeakHour: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), primaryPeakHourFactor: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPeakHourVolume: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryTotalVolume: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalVolume: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined])})))

export const getGetApproachVolumeReportDataMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({combinedDirectionVolumes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), detectorType: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), locationDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), opposingDFactors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), opposingDirectionName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), opposingDirectionVolumes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDFactors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirectionName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), primaryDirectionVolumes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), summaryData: faker.helpers.arrayElement([{kFactor: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDFactor: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingKFactor: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPeakHour: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), opposingPeakHourFactor: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPeakHourVolume: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingTotalVolume: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), peakHour: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), peakHourFactor: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), peakHourVolume: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryDFactor: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryKFactor: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPeakHour: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), primaryPeakHourFactor: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPeakHourVolume: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryTotalVolume: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalVolume: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined])})))

export const getGetArrivalOnRedTestDataMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), arrivalsOnRed: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), locationDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), percentArrivalOnRed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), percentArrivalsOnRed: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), phaseDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), phaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), plans: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), percentArrivalOnRed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), percentRedTime: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), planDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), planNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), totalArrivalOnRed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalDetectorHits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalVehicles: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])})))

export const getGetArrivalOnRedReportDataMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), arrivalsOnRed: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), locationDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), percentArrivalOnRed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), percentArrivalsOnRed: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), phaseDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), phaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), plans: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), percentArrivalOnRed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), percentRedTime: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), planDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), planNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), totalArrivalOnRed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalDetectorHits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalVehicles: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])})))

export const getGetGreenTimeUtilizationTestDataMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), averageSplits: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), bins: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), x: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), y: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), locationDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), phaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), plans: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({averageSplit: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), cycleLength: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), highCycleCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minTime: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), offsetLength: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), percentForceOffs: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), percentGapOuts: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), percentileSplit: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), percentileSplit50th: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), percentileSplit85th: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), percentMaxOuts: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), percentSkips: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), planDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), planNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), programmedSplit: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), splits: faker.helpers.arrayElement([{
        [faker.string.alphanumeric(5)]: faker.number.int({min: undefined, max: undefined})
      }, undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), programmedSplits: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), xAxisBinSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), yAxisBinSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getGetGreenTimeUtilizationReportDataMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), averageSplits: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), bins: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), x: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), y: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), locationDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), phaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), plans: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({averageSplit: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), cycleLength: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), highCycleCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minTime: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), offsetLength: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), percentForceOffs: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), percentGapOuts: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), percentileSplit: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), percentileSplit50th: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), percentileSplit85th: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), percentMaxOuts: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), percentSkips: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), planDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), planNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), programmedSplit: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), splits: faker.helpers.arrayElement([{
        [faker.string.alphanumeric(5)]: faker.number.int({min: undefined, max: undefined})
      }, undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), programmedSplits: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), xAxisBinSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), yAxisBinSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getGetLeftTurnGapAnalysisTestDataMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), binSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypeDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypeStr: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), gap10Count: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), gap10Max: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), gap10Min: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), gap11Count: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), gap11Max: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), gap11Min: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), gap1Count: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), gap1Max: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), gap1Min: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), gap2Count: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), gap2Max: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), gap2Min: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), gap3Count: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), gap3Max: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), gap3Min: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), gap4Count: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), gap4Max: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), gap4Min: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), gap5Count: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), gap5Max: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), gap5Min: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), gap6Count: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), gap6Max: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), gap6Min: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), gap7Count: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), gap7Max: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), gap7Min: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), gap8Count: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), gap8Max: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), gap8Min: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), gap9Count: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), gap9Max: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), gap9Min: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), highestTotal: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), percentTurnableSeries: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), phaseDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), phaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), sumDuration1: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), sumDuration2: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), sumDuration3: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), sumGreenTime: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), trendLineGapThreshold: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getGetLeftTurnGapAnalysisReportDataMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), binSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypeDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypeStr: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), gap10Count: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), gap10Max: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), gap10Min: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), gap11Count: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), gap11Max: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), gap11Min: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), gap1Count: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), gap1Max: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), gap1Min: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), gap2Count: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), gap2Max: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), gap2Min: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), gap3Count: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), gap3Max: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), gap3Min: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), gap4Count: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), gap4Max: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), gap4Min: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), gap5Count: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), gap5Max: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), gap5Min: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), gap6Count: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), gap6Max: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), gap6Min: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), gap7Count: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), gap7Max: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), gap7Min: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), gap8Count: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), gap8Max: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), gap8Min: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), gap9Count: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), gap9Max: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), gap9Min: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), highestTotal: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), percentTurnableSeries: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), phaseDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), phaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), sumDuration1: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), sumDuration2: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), sumDuration3: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), sumGreenTime: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), trendLineGapThreshold: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getGetLeftTurnGapDurationTestDataMock = () => ({acceptableGaps: faker.helpers.arrayElement([{
        [faker.string.alphanumeric(5)]: faker.number.int({min: undefined, max: undefined})
      }, undefined]), capacity: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), demand: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), direction: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), gapDurationPercent: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirection: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})

export const getGetLeftTurnGapDurationReportDataMock = () => ({acceptableGaps: faker.helpers.arrayElement([{
        [faker.string.alphanumeric(5)]: faker.number.int({min: undefined, max: undefined})
      }, undefined]), capacity: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), demand: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), direction: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), gapDurationPercent: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirection: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})

export const getGetLeftTurnGapReportTestDataMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({acceptableGapList: faker.helpers.arrayElement([{
        [faker.string.alphanumeric(5)]: faker.number.int({min: undefined, max: undefined})
      }, undefined]), approachDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), calculatedVolumeBoundary: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), capacity: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), crossProductConsiderForStudy: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), crossProductReview: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), crossProductValue: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), cyclesWithPedCallNum: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), cyclesWithPedCallPercent: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), cyclesWithSplitFailNum: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), cyclesWithSplitFailPercent: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decisionBoundariesReview: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), demand: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), demandList: faker.helpers.arrayElement([{
        [faker.string.alphanumeric(5)]: faker.number.int({min: undefined, max: undefined})
      }, undefined]), direction: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), endDate: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), endTime: faker.helpers.arrayElement([faker.word.sample(), undefined]), gapDurationConsiderForStudy: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gapOutPercent: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), get24HourPeriod: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), leftTurnVolume: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), location: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), opposingDirection: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), opposingLanes: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingThroughVolume: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), peakPeriodDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedActuationsConsiderForStudy: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), percentCyclesWithPedsList: faker.helpers.arrayElement([{
        [faker.string.alphanumeric(5)]: faker.number.int({min: undefined, max: undefined})
      }, undefined]), percentCyclesWithSplitFailList: faker.helpers.arrayElement([{
        [faker.string.alphanumeric(5)]: faker.number.int({min: undefined, max: undefined})
      }, undefined]), phaseType: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), signalId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), signalType: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), speedLimit: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), splitFailsConsiderForStudy: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), startDate: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), startTime: faker.helpers.arrayElement([faker.word.sample(), undefined]), vcRatio: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), volumesConsiderForStudy: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})))

export const getGetLeftTurnGapReportReportDataMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({acceptableGapList: faker.helpers.arrayElement([{
        [faker.string.alphanumeric(5)]: faker.number.int({min: undefined, max: undefined})
      }, undefined]), approachDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), calculatedVolumeBoundary: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), capacity: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), crossProductConsiderForStudy: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), crossProductReview: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), crossProductValue: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), cyclesWithPedCallNum: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), cyclesWithPedCallPercent: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), cyclesWithSplitFailNum: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), cyclesWithSplitFailPercent: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decisionBoundariesReview: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), demand: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), demandList: faker.helpers.arrayElement([{
        [faker.string.alphanumeric(5)]: faker.number.int({min: undefined, max: undefined})
      }, undefined]), direction: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), endDate: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), endTime: faker.helpers.arrayElement([faker.word.sample(), undefined]), gapDurationConsiderForStudy: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), gapOutPercent: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), get24HourPeriod: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), leftTurnVolume: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), location: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), opposingDirection: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), opposingLanes: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingThroughVolume: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), peakPeriodDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedActuationsConsiderForStudy: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), percentCyclesWithPedsList: faker.helpers.arrayElement([{
        [faker.string.alphanumeric(5)]: faker.number.int({min: undefined, max: undefined})
      }, undefined]), percentCyclesWithSplitFailList: faker.helpers.arrayElement([{
        [faker.string.alphanumeric(5)]: faker.number.int({min: undefined, max: undefined})
      }, undefined]), phaseType: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), signalId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), signalType: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), speedLimit: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), splitFailsConsiderForStudy: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), startDate: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), startTime: faker.helpers.arrayElement([faker.word.sample(), undefined]), vcRatio: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), volumesConsiderForStudy: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})))

export const getGetLeftTurnGapReportDataCheckTestDataMock = () => ({approachDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), gapOutOk: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), insufficientCycleAggregation: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), insufficientDetectorEventCount: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), insufficientLeftTurnGapAggregations: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), insufficientPedAggregations: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), insufficientPhaseTermination: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), insufficientSplitFailAggregations: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), leftTurnVolumeOk: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedCycleOk: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})

export const getGetLeftTurnGapReportDataCheckReportDataMock = () => ({approachDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), gapOutOk: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), insufficientCycleAggregation: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), insufficientDetectorEventCount: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), insufficientLeftTurnGapAggregations: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), insufficientPedAggregations: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), insufficientPhaseTermination: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), insufficientSplitFailAggregations: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), leftTurnVolumeOk: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedCycleOk: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})

export const getGetLeftTurnPeakHoursTestDataMock = () => ({amEndHour: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), amEndMinute: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), amStartHour: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), amStartMinute: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pmEndHour: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pmEndMinute: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pmStartHour: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pmStartMinute: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})

export const getGetLeftTurnPeakHoursReportDataMock = () => ({amEndHour: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), amEndMinute: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), amStartHour: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), amStartMinute: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pmEndHour: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pmEndMinute: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pmStartHour: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pmStartMinute: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})

export const getGetLeftTurnPedActuationTestDataMock = () => ({cyclesWithPedCallsNum: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), cyclesWithPedCallsPercent: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), direction: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), opposingDirection: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), percentCyclesWithPedsList: faker.helpers.arrayElement([{
        [faker.string.alphanumeric(5)]: faker.number.int({min: undefined, max: undefined})
      }, undefined])})

export const getGetLeftTurnPedActuationReportDataMock = () => ({cyclesWithPedCallsNum: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), cyclesWithPedCallsPercent: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), direction: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), opposingDirection: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), percentCyclesWithPedsList: faker.helpers.arrayElement([{
        [faker.string.alphanumeric(5)]: faker.number.int({min: undefined, max: undefined})
      }, undefined])})

export const getGetLeftTurnSplitFailTestDataMock = () => ({cyclesWithSplitFails: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), direction: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), percentCyclesWithSplitFailList: faker.helpers.arrayElement([{
        [faker.string.alphanumeric(5)]: faker.number.int({min: undefined, max: undefined})
      }, undefined]), splitFailPercent: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})

export const getGetLeftTurnSplitFailReportDataMock = () => ({cyclesWithSplitFails: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), direction: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), percentCyclesWithSplitFailList: faker.helpers.arrayElement([{
        [faker.string.alphanumeric(5)]: faker.number.int({min: undefined, max: undefined})
      }, undefined]), splitFailPercent: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})

export const getGetLeftTurnVolumeTestDataMock = () => ({calculatedVolumeBoundary: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), crossProductReview: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), crossProductValue: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decisionBoundariesReview: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), demandList: faker.helpers.arrayElement([{
        [faker.string.alphanumeric(5)]: faker.number.int({min: undefined, max: undefined})
      }, undefined]), direction: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), leftTurnVolume: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirection: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), opposingLanes: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingThroughVolume: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})

export const getGetLeftTurnVolumeReportDataMock = () => ({calculatedVolumeBoundary: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), crossProductReview: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), crossProductValue: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decisionBoundariesReview: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), demandList: faker.helpers.arrayElement([{
        [faker.string.alphanumeric(5)]: faker.number.int({min: undefined, max: undefined})
      }, undefined]), direction: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), leftTurnVolume: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirection: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), opposingLanes: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingThroughVolume: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})

export const getGetLinkPivotPcdDataMock = () => ({existingTotalAOG: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), existingTotalPAOG: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), existingVolume: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pcdExisting: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorEvents: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), greenSeries: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), locationDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), percentArrivalOnGreen: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), phaseDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), phaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), plans: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), percentArrivalOnGreen: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), percentGreenTime: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), planDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), planNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), platoonRatio: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), redSeries: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), totalDetectorHits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalOnGreenEvents: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), volumePerHour: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), yellowSeries: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])})), undefined]), pcdPredicted: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorEvents: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), greenSeries: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), locationDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), percentArrivalOnGreen: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), phaseDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), phaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), plans: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), percentArrivalOnGreen: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), percentGreenTime: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), planDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), planNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), platoonRatio: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), redSeries: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), totalDetectorHits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalOnGreenEvents: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), volumePerHour: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), yellowSeries: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])})), undefined]), predictedTotalAOG: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), predictedTotalPAOG: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), predictedVolume: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})

export const getGetLinkPivotTestDataMock = () => ({adjustments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({adjustment: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), delta: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), linkNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), location: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), approachLinks: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({aogDownstreamBefore: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), aogDownstreamPredicted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), aogTotalBefore: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), aogTotalPredicted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), aogUpstreamBefore: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), aogUpstreamPredicted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), delta: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), downstreamApproachDirection: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), downstreamChartExisting: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), downstreamChartName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), downstreamChartNegativeChange: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), downstreamChartPositiveChange: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), downstreamChartRemaining: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), downstreamCombinedLocation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), downstreamLocation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), downstreamLocationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), linkNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), location: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), paogDownstreamBefore: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), paogDownstreamPredicted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pAogTotalBefore: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pAogTotalPredicted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), paogUpstreamBefore: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), paogUpstreamPredicted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), resultChartLocation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), totalChartExisting: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalChartName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), totalChartNegativeChange: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalChartPositiveChange: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalChartRemaining: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), upstreamApproachDirection: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), upstreamChartExisting: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), upstreamChartName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), upstreamChartNegativeChange: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), upstreamChartPositiveChange: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), upstreamChartRemaining: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), upstreamCombinedLocation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), totalAogBefore: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalAogDownstreamBefore: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalAogDownstreamPredicted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalAogPredicted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalAogUpstreamBefore: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalAogUpstreamPredicted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalChartExisting: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalChartNegativeChange: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalChartPositiveChange: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalChartRemaining: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalDownstreamChartExisting: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalDownstreamChartNegativeChange: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalDownstreamChartPositiveChange: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalDownstreamChartRemaining: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalPaogBefore: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalPaogDownstreamBefore: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalPaogDownstreamPredicted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalPaogPredicted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalPaogUpstreamBefore: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalPaogUpstreamPredicted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalUpstreamChartExisting: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalUpstreamChartNegativeChange: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalUpstreamChartPositiveChange: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalUpstreamChartRemaining: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})

export const getGetLinkPivotReportDataMock = () => ({adjustments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({adjustment: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), delta: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), linkNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), location: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), approachLinks: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({aogDownstreamBefore: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), aogDownstreamPredicted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), aogTotalBefore: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), aogTotalPredicted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), aogUpstreamBefore: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), aogUpstreamPredicted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), delta: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), downstreamApproachDirection: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), downstreamChartExisting: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), downstreamChartName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), downstreamChartNegativeChange: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), downstreamChartPositiveChange: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), downstreamChartRemaining: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), downstreamCombinedLocation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), downstreamLocation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), downstreamLocationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), linkNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), location: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), paogDownstreamBefore: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), paogDownstreamPredicted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pAogTotalBefore: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pAogTotalPredicted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), paogUpstreamBefore: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), paogUpstreamPredicted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), resultChartLocation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), totalChartExisting: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalChartName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), totalChartNegativeChange: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalChartPositiveChange: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalChartRemaining: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), upstreamApproachDirection: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), upstreamChartExisting: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), upstreamChartName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), upstreamChartNegativeChange: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), upstreamChartPositiveChange: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), upstreamChartRemaining: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), upstreamCombinedLocation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), totalAogBefore: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalAogDownstreamBefore: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalAogDownstreamPredicted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalAogPredicted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalAogUpstreamBefore: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalAogUpstreamPredicted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalChartExisting: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalChartNegativeChange: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalChartPositiveChange: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalChartRemaining: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalDownstreamChartExisting: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalDownstreamChartNegativeChange: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalDownstreamChartPositiveChange: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalDownstreamChartRemaining: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalPaogBefore: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalPaogDownstreamBefore: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalPaogDownstreamPredicted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalPaogPredicted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalPaogUpstreamBefore: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalPaogUpstreamPredicted: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalUpstreamChartExisting: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalUpstreamChartNegativeChange: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalUpstreamChartPositiveChange: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalUpstreamChartRemaining: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})

export const getGetPedDelayTestDataMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), averageDelay: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), cycleLengths: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), cyclesWithPedRequests: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), locationDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), maxDelay: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minDelay: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pedestrianDelay: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), pedPresses: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), percentDelayByCycleLength: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), phaseDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), phaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), plans: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({averageCycleLengthSeconds: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), averageDelaySeconds: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), cyclesWithPedRequests: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), pedPresses: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pedRecallMessage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), planDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), planNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), uniquePedDetections: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), startOfWalk: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), timeBuffered: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uniquePedestrianDetections: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getGetPedDelayReportDataMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), averageDelay: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), cycleLengths: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), cyclesWithPedRequests: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), locationDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), maxDelay: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minDelay: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pedestrianDelay: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), pedPresses: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), percentDelayByCycleLength: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), phaseDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), phaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), plans: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({averageCycleLengthSeconds: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), averageDelaySeconds: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), cyclesWithPedRequests: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), pedPresses: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pedRecallMessage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), planDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), planNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), uniquePedDetections: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), startOfWalk: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), timeBuffered: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), uniquePedestrianDetections: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getGetPreemptDetailTestDataMock = () => ({details: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({cycles: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({callMaxOut: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), delay: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dwellTime: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), gateDown: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), inputOff: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), inputOn: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), timeToService: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), trackClear: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), locationDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), preemptionNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), summary: faker.helpers.arrayElement([{end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), locationDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), requestAndServices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({preemptionNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), requests: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), services: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined])})), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])}, undefined])})

export const getGetPreemptDetailReportDataMock = () => ({details: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({cycles: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({callMaxOut: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), delay: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dwellTime: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), gateDown: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), inputOff: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), inputOn: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), timeToService: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), trackClear: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), locationDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), preemptionNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), summary: faker.helpers.arrayElement([{end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), locationDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), requestAndServices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({preemptionNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), requests: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), services: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined])})), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])}, undefined])})

export const getGetPreemptServiceTestDataMock = () => ({end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), locationDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), plans: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), planDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), planNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), preemptCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), preemptServiceEvents: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})

export const getGetPreemptServiceReportDataMock = () => ({end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), locationDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), plans: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), planDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), planNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), preemptCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), preemptServiceEvents: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})

export const getGetPreemptServiceRequestTestDataMock = () => ({end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), locationDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), plans: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), planDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), planNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), preemptRequests: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})

export const getGetPreemptServiceRequestReportDataMock = () => ({end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), locationDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), plans: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), planDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), planNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), preemptRequests: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})

export const getGetPurdueCoordinationDiagramTestDataMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorEvents: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), greenSeries: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), locationDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), percentArrivalOnGreen: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), phaseDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), phaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), plans: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), percentArrivalOnGreen: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), percentGreenTime: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), planDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), planNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), platoonRatio: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), redSeries: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), totalDetectorHits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalOnGreenEvents: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), volumePerHour: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), yellowSeries: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])})))

export const getGetPurdueCoordinationDiagramReportDataMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorEvents: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), greenSeries: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), locationDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), percentArrivalOnGreen: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), phaseDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), phaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), plans: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), percentArrivalOnGreen: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), percentGreenTime: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), planDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), planNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), platoonRatio: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), redSeries: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), totalDetectorHits: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalOnGreenEvents: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), volumePerHour: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), yellowSeries: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])})))

export const getGetPurduePhaseTerminationTestDataMock = () => ({consecutiveCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), locationDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), phases: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({forceOffs: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (`${faker.date.past().toISOString().split('.')[0]}Z`)), undefined]), gapOuts: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (`${faker.date.past().toISOString().split('.')[0]}Z`)), undefined]), maxOuts: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (`${faker.date.past().toISOString().split('.')[0]}Z`)), undefined]), pedWalkBegins: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (`${faker.date.past().toISOString().split('.')[0]}Z`)), undefined]), phaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), unknownTerminations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (`${faker.date.past().toISOString().split('.')[0]}Z`)), undefined])})), undefined]), plans: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), planDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), planNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})

export const getGetPurduePhaseTerminationReportDataMock = () => ({consecutiveCount: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), locationDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), phases: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({forceOffs: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (`${faker.date.past().toISOString().split('.')[0]}Z`)), undefined]), gapOuts: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (`${faker.date.past().toISOString().split('.')[0]}Z`)), undefined]), maxOuts: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (`${faker.date.past().toISOString().split('.')[0]}Z`)), undefined]), pedWalkBegins: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (`${faker.date.past().toISOString().split('.')[0]}Z`)), undefined]), phaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), unknownTerminations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (`${faker.date.past().toISOString().split('.')[0]}Z`)), undefined])})), undefined]), plans: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), planDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), planNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})

export const getGetRampMeteringTestDataMock = () => ({end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), lanesActiveRate: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])})), undefined]), lanesBaseRate: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])})), undefined]), lanesQueueOnAndOffEvents: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({detectorOff: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), detectorOn: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), locationDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), mainlineAvgFlow: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), mainlineAvgOcc: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), mainlineAvgSpeed: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), shutdownWarning: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({finalX: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), initialX: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), isDetectorOn: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), startUpWarning: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({finalX: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), initialX: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), isDetectorOn: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})

export const getGetRampMeteringReportDataMock = () => ({end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), lanesActiveRate: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])})), undefined]), lanesBaseRate: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])})), undefined]), lanesQueueOnAndOffEvents: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({detectorOff: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), detectorOn: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), locationDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), mainlineAvgFlow: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), mainlineAvgOcc: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), mainlineAvgSpeed: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), shutdownWarning: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({finalX: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), initialX: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), isDetectorOn: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), startUpWarning: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({finalX: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), initialX: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), isDetectorOn: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})

export const getGetSplitFailTestDataMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), averageGor: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), averageRor: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), failLines: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), forceOffGreenOccupancies: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), forceOffRedOccupancies: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), gapOutGreenOccupancies: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), gapOutRedOccupancies: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), locationDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), percentFails: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), phaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), phaseType: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), plans: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), failsInPlan: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), percentFails: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), planDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), planNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), totalCycles: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), totalSplitFails: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getGetSplitFailReportDataMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), averageGor: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), averageRor: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), failLines: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), forceOffGreenOccupancies: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), forceOffRedOccupancies: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), gapOutGreenOccupancies: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), gapOutRedOccupancies: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), locationDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), percentFails: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), phaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), phaseType: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), plans: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), failsInPlan: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), percentFails: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), planDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), planNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), totalCycles: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), totalSplitFails: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getGetSplitMonitorTestDataMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), forceOffs: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), gapOuts: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), locationDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), maxOuts: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), peds: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), percentileSplit: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), phaseDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), phaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), plans: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({averageSplit: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), minTime: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), percentForceOffs: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), percentGapOuts: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), percentileSplit: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), percentileSplit50th: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), percentileSplit85th: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), percentMaxOuts: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), percentSkips: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), planDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), planNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), programmedSplit: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), programmedSplits: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), unknowns: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])})))

export const getGetSplitMonitorReportDataMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), forceOffs: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), gapOuts: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), locationDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), maxOuts: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), peds: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), percentileSplit: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), phaseDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), phaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), plans: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({averageSplit: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), minTime: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), percentForceOffs: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), percentGapOuts: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), percentileSplit: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), percentileSplit50th: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), percentileSplit85th: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), percentMaxOuts: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), percentSkips: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), planDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), planNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), programmedSplit: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), programmedSplits: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), unknowns: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])})))

export const getGetTimeSpaceDiagramTestDataMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({advanceCountDetectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({finalX: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), initialX: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), isDetectorOn: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined]), approachDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), cycleAllEvents: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), distanceToNextLocation: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), greenTimeEvents: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({finalX: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), initialX: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), isDetectorOn: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined]), laneByLaneCountDetectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({finalX: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), initialX: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), isDetectorOn: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined]), locationDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), phaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), phaseNumberSort: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), phaseType: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), speed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), stopBarPresenceDetectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({finalX: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), initialX: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), isDetectorOn: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})))

export const getGetTimeSpaceDiagramReportDataMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({advanceCountDetectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({finalX: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), initialX: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), isDetectorOn: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined]), approachDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), cycleAllEvents: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), distanceToNextLocation: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), greenTimeEvents: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({finalX: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), initialX: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), isDetectorOn: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined]), laneByLaneCountDetectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({finalX: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), initialX: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), isDetectorOn: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined]), locationDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), phaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), phaseNumberSort: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), phaseType: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), speed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), stopBarPresenceDetectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({finalX: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), initialX: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), isDetectorOn: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})))

export const getGetTimeSpaceDiagramAverageTestDataMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), coordinatedPhases: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), cycleAllEvents: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), cycleLength: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), distanceToNextLocation: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), greenTimeEvents: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({finalX: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), initialX: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), isDetectorOn: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined]), locationDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), offset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), phaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), phaseNumberSort: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), phaseType: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), programmedSplit: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), speed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})))

export const getGetTimeSpaceDiagramAverageReportDataMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), coordinatedPhases: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), cycleAllEvents: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), cycleLength: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), distanceToNextLocation: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), greenTimeEvents: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({finalX: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), initialX: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), isDetectorOn: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined]), locationDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), offset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), phaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), phaseNumberSort: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), phaseType: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), programmedSplit: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), speed: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})))

export const getGetTimingAndActuationTestDataMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({advanceCountDetectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({events: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({detectorOff: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), detectorOn: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), advancePresenceDetectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({events: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({detectorOff: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), detectorOn: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), approachDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), cycleAllEvents: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), isPhaseOverLap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), laneByLanesDetectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({events: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({detectorOff: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), detectorOn: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), locationDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianEvents: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({events: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({detectorOff: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), detectorOn: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), pedestrianIntervals: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), phaseCustomEvents: faker.helpers.arrayElement([{
        [faker.string.alphanumeric(5)]: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}))
      }, undefined]), phaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), phaseNumberSort: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), phaseType: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), stopBarDetectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({events: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({detectorOff: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), detectorOn: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})))

export const getGetTimingAndActuationReportDataMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({advanceCountDetectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({events: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({detectorOff: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), detectorOn: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), advancePresenceDetectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({events: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({detectorOff: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), detectorOn: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), approachDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), cycleAllEvents: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), isPhaseOverLap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), laneByLanesDetectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({events: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({detectorOff: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), detectorOn: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), locationDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianEvents: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({events: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({detectorOff: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), detectorOn: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), pedestrianIntervals: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), phaseCustomEvents: faker.helpers.arrayElement([{
        [faker.string.alphanumeric(5)]: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}))
      }, undefined]), phaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), phaseNumberSort: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), phaseType: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), stopBarDetectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({events: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({detectorOff: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), detectorOn: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})))

export const getGetTransitSignalPriorityTestDataMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({locationPhases: faker.helpers.arrayElement([{designatedPhases: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.number.int({min: undefined, max: undefined}))), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), transitSignalPlans: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({phases: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({averageSplit: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), forceOffsLessThan40TSPMax: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), forceOffsLessThan60TSPMax: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), forceOffsLessThan80TSPMax: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), maxExtension: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), maxReduction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minGreen: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minTime: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), percentGapOuts: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), percentileSplit50th: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), percentileSplit85th: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), percentMaxOutsForceOffs: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), percentSkips: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), phaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), priorityMax: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), priorityMin: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), programmedSplit: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), recommendedTSPMax: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), redClearance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), skipsGreaterThan70TSPMax: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), yellow: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), planNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])})))

export const getGetTransitSignalPriorityReportDataMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({locationPhases: faker.helpers.arrayElement([{designatedPhases: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.number.int({min: undefined, max: undefined}))), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), transitSignalPlans: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({phases: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({averageSplit: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), forceOffsLessThan40TSPMax: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), forceOffsLessThan60TSPMax: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), forceOffsLessThan80TSPMax: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), maxExtension: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), maxReduction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minGreen: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minTime: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), percentGapOuts: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), percentileSplit50th: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), percentileSplit85th: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), percentMaxOutsForceOffs: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), percentSkips: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), phaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), priorityMax: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), priorityMin: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), programmedSplit: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), recommendedTSPMax: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), redClearance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), skipsGreaterThan70TSPMax: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), yellow: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), planNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])})))

export const getGetTurningMovementCountsTestDataMock = () => ({charts: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({direction: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), lanes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), volume: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])})), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), laneUtilizationFactor: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), locationDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), peakHour: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), peakHourFactor: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), peakHourVolume: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), plans: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), planDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), planNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), totalHourlyVolumes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), totalVolume: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalVolumes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])})), undefined]), peakHour: faker.helpers.arrayElement([{key: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), peakHourFactor: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), table: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({direction: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), peakHourVolume: faker.helpers.arrayElement([{timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), volumes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])})), undefined])})

export const getGetTurningMovementCountsReportDataMock = () => ({charts: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({direction: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), lanes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), volume: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])})), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), laneUtilizationFactor: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), locationDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), peakHour: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), peakHourFactor: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), peakHourVolume: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), plans: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), planDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), planNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), totalHourlyVolumes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), totalVolume: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), totalVolumes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])})), undefined]), peakHour: faker.helpers.arrayElement([{key: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), peakHourFactor: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), table: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({direction: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), peakHourVolume: faker.helpers.arrayElement([{timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), volumes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])})), undefined])})

export const getGetWaitTimeTestDataMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), average: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), detectionTypes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), forceOffs: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), gapOuts: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), locationDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), maxOuts: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), phaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), plans: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({averageWaitTime: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), maxWaitTime: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), planDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), planNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), planSplits: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), unknowns: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), volumes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])})))

export const getGetWaitTimeReportDataMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), average: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), detectionTypes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), forceOffs: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), gapOuts: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), locationDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), maxOuts: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), phaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), plans: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({averageWaitTime: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), maxWaitTime: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), planDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), planNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), planSplits: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), unknowns: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), volumes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])})))

export const getGetWatchdogTestDataMock = () => ({end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), logEvents: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), componentId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), componentType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), details: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), issueType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), jurisdictionName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), phase: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), regionDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})

export const getGetWatchdogReportDataMock = () => ({end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), logEvents: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), componentId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), componentType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), details: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), issueType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), jurisdictionName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), phase: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), regionDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})

export const getGetWatchDogDashboardDashboardGroupMock = () => ({issueType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), products: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({model: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({firmware: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({counts: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})

export const getGetYellowRedActivationsTestDataMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorEvents: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), direction: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), isPermissivePhase: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), phaseType: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), plans: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({averageTimeViolations: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), percentSevereViolations: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), percentViolations: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), planDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), planNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), severeViolations: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), totalViolations: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), redClearanceEvents: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), redEvents: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), severeViolations: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), totalViolations: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), yellowEvents: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), yellowLightOccurences: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getGetYellowRedActivationsReportDataMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorEvents: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), direction: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), isPermissivePhase: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), phaseType: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), plans: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({averageTimeViolations: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), percentSevereViolations: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), percentViolations: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), planDescription: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), planNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), severeViolations: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), totalViolations: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), redClearanceEvents: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), redEvents: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), severeViolations: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), totalViolations: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), yellowEvents: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({timestamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), value: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), yellowLightOccurences: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getATSPMReportDataApiMock = () => [
http.get('*/api/v1/Aggregation/test', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetAggregationTestDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/Aggregation/getReportData', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetAggregationReportDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/ApproachDelay/test', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetApproachDelayTestDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/ApproachDelay/getReportData', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetApproachDelayReportDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/ApproachSpeed/test', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetApproachSpeedTestDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/ApproachSpeed/getReportData', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetApproachSpeedReportDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/ApproachVolume/test', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetApproachVolumeTestDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/ApproachVolume/getReportData', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetApproachVolumeReportDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/ArrivalOnRed/test', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetArrivalOnRedTestDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/ArrivalOnRed/getReportData', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetArrivalOnRedReportDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/GreenTimeUtilization/test', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetGreenTimeUtilizationTestDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/GreenTimeUtilization/getReportData', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetGreenTimeUtilizationReportDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/LeftTurnGapAnalysis/test', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetLeftTurnGapAnalysisTestDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/LeftTurnGapAnalysis/getReportData', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetLeftTurnGapAnalysisReportDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/LeftTurnGapDuration/test', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetLeftTurnGapDurationTestDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/LeftTurnGapDuration/getReportData', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetLeftTurnGapDurationReportDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/LeftTurnGapReport/test', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetLeftTurnGapReportTestDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/LeftTurnGapReport/getReportData', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetLeftTurnGapReportReportDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/LeftTurnGapReportDataCheck/test', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetLeftTurnGapReportDataCheckTestDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/LeftTurnGapReportDataCheck/getReportData', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetLeftTurnGapReportDataCheckReportDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/LeftTurnPeakHours/test', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetLeftTurnPeakHoursTestDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/LeftTurnPeakHours/getReportData', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetLeftTurnPeakHoursReportDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/LeftTurnPedActuation/test', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetLeftTurnPedActuationTestDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/LeftTurnPedActuation/getReportData', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetLeftTurnPedActuationReportDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/LeftTurnSplitFail/test', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetLeftTurnSplitFailTestDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/LeftTurnSplitFail/getReportData', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetLeftTurnSplitFailReportDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/LeftTurnVolume/test', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetLeftTurnVolumeTestDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/LeftTurnVolume/getReportData', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetLeftTurnVolumeReportDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/LinkPivot/getPcdData', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetLinkPivotPcdDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/LinkPivot/test', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetLinkPivotTestDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/LinkPivot/getReportData', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetLinkPivotReportDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/PedDelay/test', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetPedDelayTestDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/PedDelay/getReportData', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetPedDelayReportDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/PreemptDetail/test', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetPreemptDetailTestDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/PreemptDetail/getReportData', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetPreemptDetailReportDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/PreemptService/test', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetPreemptServiceTestDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/PreemptService/getReportData', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetPreemptServiceReportDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/PreemptServiceRequest/test', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetPreemptServiceRequestTestDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/PreemptServiceRequest/getReportData', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetPreemptServiceRequestReportDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/PurdueCoordinationDiagram/test', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetPurdueCoordinationDiagramTestDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/PurdueCoordinationDiagram/getReportData', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetPurdueCoordinationDiagramReportDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/PurduePhaseTermination/test', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetPurduePhaseTerminationTestDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/PurduePhaseTermination/getReportData', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetPurduePhaseTerminationReportDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/RampMetering/test', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetRampMeteringTestDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/RampMetering/getReportData', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetRampMeteringReportDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/SplitFail/test', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetSplitFailTestDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/SplitFail/getReportData', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetSplitFailReportDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/SplitMonitor/test', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetSplitMonitorTestDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/SplitMonitor/getReportData', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetSplitMonitorReportDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/TimeSpaceDiagram/test', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetTimeSpaceDiagramTestDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/TimeSpaceDiagram/getReportData', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetTimeSpaceDiagramReportDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/TimeSpaceDiagramAverage/test', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetTimeSpaceDiagramAverageTestDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/TimeSpaceDiagramAverage/getReportData', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetTimeSpaceDiagramAverageReportDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/TimingAndActuation/test', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetTimingAndActuationTestDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/TimingAndActuation/getReportData', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetTimingAndActuationReportDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/TransitSignalPriority/test', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetTransitSignalPriorityTestDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/TransitSignalPriority/getReportData', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetTransitSignalPriorityReportDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/TurningMovementCounts/test', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetTurningMovementCountsTestDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/TurningMovementCounts/getReportData', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetTurningMovementCountsReportDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/WaitTime/test', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetWaitTimeTestDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/WaitTime/getReportData', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetWaitTimeReportDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/Watchdog/GetIssueTypes', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/Watchdog/test', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetWatchdogTestDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/Watchdog/getReportData', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetWatchdogReportDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/WatchDogDashboard/getDashboardGroup', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetWatchDogDashboardDashboardGroupMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/YellowRedActivations/test', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetYellowRedActivationsTestDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/YellowRedActivations/getReportData', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetYellowRedActivationsReportDataMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),]
