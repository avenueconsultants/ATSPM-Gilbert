/**
 * Generated by orval v6.23.0 🍺
 * Do not edit manually.
 * ATSPM Log Data Api
 * ATSPM Log Data with OpenAPI, Swashbuckle, and API versioning.
 * OpenAPI spec version: 1.0
 */
import {
  useQuery
} from 'react-query'
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from 'react-query'
import { useQuery } from 'react-query'
import { dataRequest } from '../../lib/axios'
import type {
  DeviceEventDownload,
  GetV1AggregationGetArchivedAggregationsLocationIdentifierDataTypeParams,
  GetV1AggregationGetArchivedAggregationsLocationIdentifierParams,
  GetV1EventLogGetArchivedEventsLocationIdentifierDataTypeParams,
  GetV1EventLogGetArchivedEventsLocationIdentifierDeviceIdDataTypeParams,
  GetV1EventLogGetArchivedEventsLocationIdentifierDeviceIdParams,
  GetV1EventLogGetArchivedEventsLocationIdentifierParams,
  GetV1LoggingLogParams,
  ProblemDetails
} from './aTSPMLogDataApi.schemas'
import { dataRequest } from '../../lib/axios';



/**
 * @summary Returns the possible aggregated data types
 */
export const getV1AggregationGetDataTypes = (
    
 signal?: AbortSignal
) => {
      
      
      return dataRequest<string[]>(
      {url: `/v1/Aggregation/GetDataTypes`, method: 'GET', signal
    },
      );
    }
  

export const getGetV1AggregationGetDataTypesQueryKey = () => {
    return [`/v1/Aggregation/GetDataTypes`] as const;
    }

export const getGetAggregationDataTypesQueryOptions = <
  TData = Awaited<ReturnType<typeof getAggregationDataTypes>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getAggregationDataTypes>>,
    TError,
    TData
  >
}) => {
  const { query: queryOptions } = options ?? {}
    
export const getGetV1AggregationGetDataTypesQueryOptions = <TData = Awaited<ReturnType<typeof getV1AggregationGetDataTypes>>, TError = ProblemDetails>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getV1AggregationGetDataTypes>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetV1AggregationGetDataTypesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getV1AggregationGetDataTypes>>> = ({ signal }) => getV1AggregationGetDataTypes(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getV1AggregationGetDataTypes>>, TError, TData> & { queryKey: QueryKey }
}

export type GetV1AggregationGetDataTypesQueryResult = NonNullable<Awaited<ReturnType<typeof getV1AggregationGetDataTypes>>>
export type GetV1AggregationGetDataTypesQueryError = ProblemDetails

/**
 * @summary Returns the possible aggregated data types
 */
export const useGetV1AggregationGetDataTypes = <TData = Awaited<ReturnType<typeof getV1AggregationGetDataTypes>>, TError = ProblemDetails>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getV1AggregationGetDataTypes>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetV1AggregationGetDataTypesQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get all aggregations for location by date
 */
export const getV1AggregationGetArchivedAggregationsLocationIdentifier = (
    locationIdentifier: string,
    params?: GetV1AggregationGetArchivedAggregationsLocationIdentifierParams,
 signal?: AbortSignal
) => {
      
      
      return dataRequest<void>(
      {url: `/v1/Aggregation/GetArchivedAggregations/${locationIdentifier}`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetV1AggregationGetArchivedAggregationsLocationIdentifierQueryKey = (locationIdentifier: string,
    params?: GetV1AggregationGetArchivedAggregationsLocationIdentifierParams,) => {
    return [`/v1/Aggregation/GetArchivedAggregations/${locationIdentifier}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetV1AggregationGetArchivedAggregationsLocationIdentifierQueryOptions = <TData = Awaited<ReturnType<typeof getV1AggregationGetArchivedAggregationsLocationIdentifier>>, TError = ProblemDetails>(locationIdentifier: string,
    params?: GetV1AggregationGetArchivedAggregationsLocationIdentifierParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getV1AggregationGetArchivedAggregationsLocationIdentifier>>, TError, TData>, }
) => {
    const { query: queryOptions } = options ?? {}

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetV1AggregationGetArchivedAggregationsLocationIdentifierQueryKey(locationIdentifier,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getV1AggregationGetArchivedAggregationsLocationIdentifier>>> = ({ signal }) => getV1AggregationGetArchivedAggregationsLocationIdentifier(locationIdentifier,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(locationIdentifier), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getV1AggregationGetArchivedAggregationsLocationIdentifier>>, TError, TData> & { queryKey: QueryKey }
}

export type GetV1AggregationGetArchivedAggregationsLocationIdentifierQueryResult = NonNullable<Awaited<ReturnType<typeof getV1AggregationGetArchivedAggregationsLocationIdentifier>>>
export type GetV1AggregationGetArchivedAggregationsLocationIdentifierQueryError = ProblemDetails

/**
 * @summary Get all aggregations for location by date
 */
export const useGetV1AggregationGetArchivedAggregationsLocationIdentifier = <TData = Awaited<ReturnType<typeof getV1AggregationGetArchivedAggregationsLocationIdentifier>>, TError = ProblemDetails>(
 locationIdentifier: string,
    params?: GetV1AggregationGetArchivedAggregationsLocationIdentifierParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getV1AggregationGetArchivedAggregationsLocationIdentifier>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetV1AggregationGetArchivedAggregationsLocationIdentifierQueryOptions(locationIdentifier,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get all aggregations for location by date and datatype
 */
export const getV1AggregationGetArchivedAggregationsLocationIdentifierDataType = (
    locationIdentifier: string,
    dataType: string,
    params?: GetV1AggregationGetArchivedAggregationsLocationIdentifierDataTypeParams,
 signal?: AbortSignal
) => {
      
      
      return dataRequest<void>(
      {url: `/v1/Aggregation/GetArchivedAggregations/${locationIdentifier}/${dataType}`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetV1AggregationGetArchivedAggregationsLocationIdentifierDataTypeQueryKey = (locationIdentifier: string,
    dataType: string,
    params?: GetV1AggregationGetArchivedAggregationsLocationIdentifierDataTypeParams,) => {
    return [`/v1/Aggregation/GetArchivedAggregations/${locationIdentifier}/${dataType}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetV1AggregationGetArchivedAggregationsLocationIdentifierDataTypeQueryOptions = <TData = Awaited<ReturnType<typeof getV1AggregationGetArchivedAggregationsLocationIdentifierDataType>>, TError = ProblemDetails>(locationIdentifier: string,
    dataType: string,
    params?: GetV1AggregationGetArchivedAggregationsLocationIdentifierDataTypeParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getV1AggregationGetArchivedAggregationsLocationIdentifierDataType>>, TError, TData>, }
) => {
    const { query: queryOptions } = options ?? {}

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetV1AggregationGetArchivedAggregationsLocationIdentifierDataTypeQueryKey(locationIdentifier,dataType,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getV1AggregationGetArchivedAggregationsLocationIdentifierDataType>>> = ({ signal }) => getV1AggregationGetArchivedAggregationsLocationIdentifierDataType(locationIdentifier,dataType,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(locationIdentifier && dataType), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getV1AggregationGetArchivedAggregationsLocationIdentifierDataType>>, TError, TData> & { queryKey: QueryKey }
}

export type GetV1AggregationGetArchivedAggregationsLocationIdentifierDataTypeQueryResult = NonNullable<Awaited<ReturnType<typeof getV1AggregationGetArchivedAggregationsLocationIdentifierDataType>>>
export type GetV1AggregationGetArchivedAggregationsLocationIdentifierDataTypeQueryError = ProblemDetails

/**
 * @summary Get all aggregations for location by date and datatype
 */
export const useGetV1AggregationGetArchivedAggregationsLocationIdentifierDataType = <TData = Awaited<ReturnType<typeof getV1AggregationGetArchivedAggregationsLocationIdentifierDataType>>, TError = ProblemDetails>(
 locationIdentifier: string,
    dataType: string,
    params?: GetV1AggregationGetArchivedAggregationsLocationIdentifierDataTypeParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getV1AggregationGetArchivedAggregationsLocationIdentifierDataType>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetV1AggregationGetArchivedAggregationsLocationIdentifierDataTypeQueryOptions(locationIdentifier,dataType,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Returns the possible event log data types
 */
export const getV1EventLogGetDataTypes = (
    
 signal?: AbortSignal
) => {
      
      
      return dataRequest<string[]>(
      {url: `/v1/EventLog/GetDataTypes`, method: 'GET', signal
    },
      );
    }
  

export const getGetV1EventLogGetDataTypesQueryKey = () => {
    return [`/v1/EventLog/GetDataTypes`] as const;
    }

export const getGetEventLogDataTypesQueryOptions = <
  TData = Awaited<ReturnType<typeof getEventLogDataTypes>>,
  TError = ProblemDetails,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getEventLogDataTypes>>,
    TError,
    TData
  >
}) => {
  const { query: queryOptions } = options ?? {}
    
export const getGetV1EventLogGetDataTypesQueryOptions = <TData = Awaited<ReturnType<typeof getV1EventLogGetDataTypes>>, TError = ProblemDetails>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getV1EventLogGetDataTypes>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetV1EventLogGetDataTypesQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getV1EventLogGetDataTypes>>> = ({ signal }) => getV1EventLogGetDataTypes(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getV1EventLogGetDataTypes>>, TError, TData> & { queryKey: QueryKey }
}

export type GetV1EventLogGetDataTypesQueryResult = NonNullable<Awaited<ReturnType<typeof getV1EventLogGetDataTypes>>>
export type GetV1EventLogGetDataTypesQueryError = ProblemDetails

/**
 * @summary Returns the possible event log data types
 */
export const useGetV1EventLogGetDataTypes = <TData = Awaited<ReturnType<typeof getV1EventLogGetDataTypes>>, TError = ProblemDetails>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getV1EventLogGetDataTypes>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetV1EventLogGetDataTypesQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get all event logs for location by date
 */
export const getV1EventLogGetArchivedEventsLocationIdentifier = (
    locationIdentifier: string,
    params?: GetV1EventLogGetArchivedEventsLocationIdentifierParams,
 signal?: AbortSignal
) => {
      
      
      return dataRequest<void>(
      {url: `/v1/EventLog/GetArchivedEvents/${locationIdentifier}`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetV1EventLogGetArchivedEventsLocationIdentifierQueryKey = (locationIdentifier: string,
    params?: GetV1EventLogGetArchivedEventsLocationIdentifierParams,) => {
    return [`/v1/EventLog/GetArchivedEvents/${locationIdentifier}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetV1EventLogGetArchivedEventsLocationIdentifierQueryOptions = <TData = Awaited<ReturnType<typeof getV1EventLogGetArchivedEventsLocationIdentifier>>, TError = ProblemDetails>(locationIdentifier: string,
    params?: GetV1EventLogGetArchivedEventsLocationIdentifierParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getV1EventLogGetArchivedEventsLocationIdentifier>>, TError, TData>, }
) => {
  const { query: queryOptions } = options ?? {}

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetV1EventLogGetArchivedEventsLocationIdentifierQueryKey(locationIdentifier,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getV1EventLogGetArchivedEventsLocationIdentifier>>> = ({ signal }) => getV1EventLogGetArchivedEventsLocationIdentifier(locationIdentifier,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(locationIdentifier), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getV1EventLogGetArchivedEventsLocationIdentifier>>, TError, TData> & { queryKey: QueryKey }
}

export type GetV1EventLogGetArchivedEventsLocationIdentifierQueryResult = NonNullable<Awaited<ReturnType<typeof getV1EventLogGetArchivedEventsLocationIdentifier>>>
export type GetV1EventLogGetArchivedEventsLocationIdentifierQueryError = ProblemDetails

/**
 * @summary Get all event logs for location by date
 */
export const useGetV1EventLogGetArchivedEventsLocationIdentifier = <TData = Awaited<ReturnType<typeof getV1EventLogGetArchivedEventsLocationIdentifier>>, TError = ProblemDetails>(
 locationIdentifier: string,
    params?: GetV1EventLogGetArchivedEventsLocationIdentifierParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getV1EventLogGetArchivedEventsLocationIdentifier>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetV1EventLogGetArchivedEventsLocationIdentifierQueryOptions(locationIdentifier,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get all event logs for location by date and device id
 */
export const getV1EventLogGetArchivedEventsLocationIdentifierDeviceId = (
    locationIdentifier: string,
    deviceId: number,
    params?: GetV1EventLogGetArchivedEventsLocationIdentifierDeviceIdParams,
 signal?: AbortSignal
) => {
      
      
      return dataRequest<void>(
      {url: `/v1/EventLog/GetArchivedEvents/${locationIdentifier}/${deviceId}`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetV1EventLogGetArchivedEventsLocationIdentifierDeviceIdQueryKey = (locationIdentifier: string,
    deviceId: number,
    params?: GetV1EventLogGetArchivedEventsLocationIdentifierDeviceIdParams,) => {
    return [`/v1/EventLog/GetArchivedEvents/${locationIdentifier}/${deviceId}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetV1EventLogGetArchivedEventsLocationIdentifierDeviceIdQueryOptions = <TData = Awaited<ReturnType<typeof getV1EventLogGetArchivedEventsLocationIdentifierDeviceId>>, TError = ProblemDetails>(locationIdentifier: string,
    deviceId: number,
    params?: GetV1EventLogGetArchivedEventsLocationIdentifierDeviceIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getV1EventLogGetArchivedEventsLocationIdentifierDeviceId>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetV1EventLogGetArchivedEventsLocationIdentifierDeviceIdQueryKey(locationIdentifier,deviceId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getV1EventLogGetArchivedEventsLocationIdentifierDeviceId>>> = ({ signal }) => getV1EventLogGetArchivedEventsLocationIdentifierDeviceId(locationIdentifier,deviceId,params, signal);

      

    const queryKey =
      queryOptions?.queryKey ??
      getGetEventLogArchivedEventsFromLocationIdentifierAndDeviceIdQueryKey(
        locationIdentifier,
        deviceId,
        params
      )
      
    const queryFn: QueryFunction<
      Awaited<
        ReturnType<
          typeof getEventLogArchivedEventsFromLocationIdentifierAndDeviceId
        >
      >
    > = ({ signal }) =>
      getEventLogArchivedEventsFromLocationIdentifierAndDeviceId(
        locationIdentifier,
        deviceId,
        params,
        signal
      )

   return  { queryKey, queryFn, enabled: !!(locationIdentifier && deviceId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getV1EventLogGetArchivedEventsLocationIdentifierDeviceId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetV1EventLogGetArchivedEventsLocationIdentifierDeviceIdQueryResult = NonNullable<Awaited<ReturnType<typeof getV1EventLogGetArchivedEventsLocationIdentifierDeviceId>>>
export type GetV1EventLogGetArchivedEventsLocationIdentifierDeviceIdQueryError = ProblemDetails

/**
 * @summary Get all event logs for location by date and device id
 */
export const useGetV1EventLogGetArchivedEventsLocationIdentifierDeviceId = <TData = Awaited<ReturnType<typeof getV1EventLogGetArchivedEventsLocationIdentifierDeviceId>>, TError = ProblemDetails>(
 locationIdentifier: string,
    deviceId: number,
    params?: GetV1EventLogGetArchivedEventsLocationIdentifierDeviceIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getV1EventLogGetArchivedEventsLocationIdentifierDeviceId>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetV1EventLogGetArchivedEventsLocationIdentifierDeviceIdQueryOptions(locationIdentifier,deviceId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



  return query
}

/**
 * @summary Get all event logs for location by date and datatype
 */
export const getV1EventLogGetArchivedEventsLocationIdentifierDataType = (
    locationIdentifier: string,
    dataType: string,
    params?: GetV1EventLogGetArchivedEventsLocationIdentifierDataTypeParams,
 signal?: AbortSignal
) => {
      
      
      return dataRequest<void>(
      {url: `/v1/EventLog/GetArchivedEvents/${locationIdentifier}/${dataType}`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetV1EventLogGetArchivedEventsLocationIdentifierDataTypeQueryKey = (locationIdentifier: string,
    dataType: string,
    params?: GetV1EventLogGetArchivedEventsLocationIdentifierDataTypeParams,) => {
    return [`/v1/EventLog/GetArchivedEvents/${locationIdentifier}/${dataType}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetV1EventLogGetArchivedEventsLocationIdentifierDataTypeQueryOptions = <TData = Awaited<ReturnType<typeof getV1EventLogGetArchivedEventsLocationIdentifierDataType>>, TError = ProblemDetails>(locationIdentifier: string,
    dataType: string,
    params?: GetV1EventLogGetArchivedEventsLocationIdentifierDataTypeParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getV1EventLogGetArchivedEventsLocationIdentifierDataType>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetV1EventLogGetArchivedEventsLocationIdentifierDataTypeQueryKey(locationIdentifier,dataType,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getV1EventLogGetArchivedEventsLocationIdentifierDataType>>> = ({ signal }) => getV1EventLogGetArchivedEventsLocationIdentifierDataType(locationIdentifier,dataType,params, signal);

      

    const queryKey =
      queryOptions?.queryKey ??
      getGetEventLogArchivedEventsFromLocationIdentifierAndDataTypeQueryKey(
        locationIdentifier,
        dataType,
        params
      )
      
    const queryFn: QueryFunction<
      Awaited<
        ReturnType<
          typeof getEventLogArchivedEventsFromLocationIdentifierAndDataType
        >
      >
    > = ({ signal }) =>
      getEventLogArchivedEventsFromLocationIdentifierAndDataType(
        locationIdentifier,
        dataType,
        params,
        signal
      )

   return  { queryKey, queryFn, enabled: !!(locationIdentifier && dataType), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getV1EventLogGetArchivedEventsLocationIdentifierDataType>>, TError, TData> & { queryKey: QueryKey }
}

export type GetV1EventLogGetArchivedEventsLocationIdentifierDataTypeQueryResult = NonNullable<Awaited<ReturnType<typeof getV1EventLogGetArchivedEventsLocationIdentifierDataType>>>
export type GetV1EventLogGetArchivedEventsLocationIdentifierDataTypeQueryError = ProblemDetails

/**
 * @summary Get all event logs for location by date and datatype
 */
export const useGetV1EventLogGetArchivedEventsLocationIdentifierDataType = <TData = Awaited<ReturnType<typeof getV1EventLogGetArchivedEventsLocationIdentifierDataType>>, TError = ProblemDetails>(
 locationIdentifier: string,
    dataType: string,
    params?: GetV1EventLogGetArchivedEventsLocationIdentifierDataTypeParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getV1EventLogGetArchivedEventsLocationIdentifierDataType>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetV1EventLogGetArchivedEventsLocationIdentifierDataTypeQueryOptions(locationIdentifier,dataType,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



  return query
}

/**
 * @summary Get all event logs for location by date, device id and datatype
 */
export const getV1EventLogGetArchivedEventsLocationIdentifierDeviceIdDataType = (
    locationIdentifier: string,
    deviceId: number,
    dataType: string,
    params?: GetV1EventLogGetArchivedEventsLocationIdentifierDeviceIdDataTypeParams,
 signal?: AbortSignal
) => {
      
      
      return dataRequest<void>(
      {url: `/v1/EventLog/GetArchivedEvents/${locationIdentifier}/${deviceId}/${dataType}`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetV1EventLogGetArchivedEventsLocationIdentifierDeviceIdDataTypeQueryKey = (locationIdentifier: string,
    deviceId: number,
    dataType: string,
    params?: GetV1EventLogGetArchivedEventsLocationIdentifierDeviceIdDataTypeParams,) => {
    return [`/v1/EventLog/GetArchivedEvents/${locationIdentifier}/${deviceId}/${dataType}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetV1EventLogGetArchivedEventsLocationIdentifierDeviceIdDataTypeQueryOptions = <TData = Awaited<ReturnType<typeof getV1EventLogGetArchivedEventsLocationIdentifierDeviceIdDataType>>, TError = ProblemDetails>(locationIdentifier: string,
    deviceId: number,
    dataType: string,
    params?: GetV1EventLogGetArchivedEventsLocationIdentifierDeviceIdDataTypeParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getV1EventLogGetArchivedEventsLocationIdentifierDeviceIdDataType>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetV1EventLogGetArchivedEventsLocationIdentifierDeviceIdDataTypeQueryKey(locationIdentifier,deviceId,dataType,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getV1EventLogGetArchivedEventsLocationIdentifierDeviceIdDataType>>> = ({ signal }) => getV1EventLogGetArchivedEventsLocationIdentifierDeviceIdDataType(locationIdentifier,deviceId,dataType,params, signal);

      

    const queryKey =
      queryOptions?.queryKey ??
      getGetEventLogArchivedEventsFromLocationIdentifierAndDeviceIdAndDataTypeQueryKey(
        locationIdentifier,
        deviceId,
        dataType,
        params
      )
      
    const queryFn: QueryFunction<
      Awaited<
        ReturnType<
          typeof getEventLogArchivedEventsFromLocationIdentifierAndDeviceIdAndDataType
        >
      >
    > = ({ signal }) =>
      getEventLogArchivedEventsFromLocationIdentifierAndDeviceIdAndDataType(
        locationIdentifier,
        deviceId,
        dataType,
        params,
        signal
      )

   return  { queryKey, queryFn, enabled: !!(locationIdentifier && deviceId && dataType), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getV1EventLogGetArchivedEventsLocationIdentifierDeviceIdDataType>>, TError, TData> & { queryKey: QueryKey }
}

export type GetV1EventLogGetArchivedEventsLocationIdentifierDeviceIdDataTypeQueryResult = NonNullable<Awaited<ReturnType<typeof getV1EventLogGetArchivedEventsLocationIdentifierDeviceIdDataType>>>
export type GetV1EventLogGetArchivedEventsLocationIdentifierDeviceIdDataTypeQueryError = ProblemDetails

/**
 * @summary Get all event logs for location by date, device id and datatype
 */
export const useGetV1EventLogGetArchivedEventsLocationIdentifierDeviceIdDataType = <TData = Awaited<ReturnType<typeof getV1EventLogGetArchivedEventsLocationIdentifierDeviceIdDataType>>, TError = ProblemDetails>(
 locationIdentifier: string,
    deviceId: number,
    dataType: string,
    params?: GetV1EventLogGetArchivedEventsLocationIdentifierDeviceIdDataTypeParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getV1EventLogGetArchivedEventsLocationIdentifierDeviceIdDataType>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetV1EventLogGetArchivedEventsLocationIdentifierDeviceIdDataTypeQueryOptions(locationIdentifier,deviceId,dataType,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



    return query
  }

/**
 * @summary This will kick off the workflow to pull events.
 */
export const getV1LoggingLog = (
    params?: GetV1LoggingLogParams,
 signal?: AbortSignal
) => {
      
      
      return dataRequest<DeviceEventDownload[]>(
      {url: `/v1/Logging/log`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetV1LoggingLogQueryKey = (params?: GetV1LoggingLogParams,) => {
    return [`/v1/Logging/log`, ...(params ? [params]: [])] as const;
    }

    
export const getGetV1LoggingLogQueryOptions = <TData = Awaited<ReturnType<typeof getV1LoggingLog>>, TError = ProblemDetails>(params?: GetV1LoggingLogParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getV1LoggingLog>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetV1LoggingLogQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getV1LoggingLog>>> = ({ signal }) => getV1LoggingLog(params, signal);

      

    const queryKey =
      queryOptions?.queryKey ??
      getGetEventLogDaysWithEventLogsFromLocationIdentifierQueryKey(
        locationIdentifier,
        params
      )
      
    const queryFn: QueryFunction<
      Awaited<
        ReturnType<typeof getEventLogDaysWithEventLogsFromLocationIdentifier>
      >
    > = ({ signal }) =>
      getEventLogDaysWithEventLogsFromLocationIdentifier(
        locationIdentifier,
        params,
        signal
      )

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getV1LoggingLog>>, TError, TData> & { queryKey: QueryKey }
}

export type GetV1LoggingLogQueryResult = NonNullable<Awaited<ReturnType<typeof getV1LoggingLog>>>
export type GetV1LoggingLogQueryError = ProblemDetails

/**
 * @summary This will kick off the workflow to pull events.
 */
export const useGetV1LoggingLog = <TData = Awaited<ReturnType<typeof getV1LoggingLog>>, TError = ProblemDetails>(
 params?: GetV1LoggingLogParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getV1LoggingLog>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetV1LoggingLogQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




  return query
}
