/**
 * Generated by orval v7.1.1 🍺
 * Do not edit manually.
 * ATSPM Configuration Api
 * ATSPM Configuration with OData, OpenAPI, Swashbuckle, and API versioning.
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from 'react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from 'react-query'
import type {
  ApiVVersionApiVersionApproachCountParams,
  ApiVVersionApiVersionApproachKeyDetectorsCountParams,
  ApiVVersionApiVersionApproachKeyDetectorsParams,
  ApiVVersionApiVersionApproachKeyParams,
  ApiVVersionApiVersionApproachParams,
  ApiVVersionApiVersionAreaCountParams,
  ApiVVersionApiVersionAreaKeyLocationsCountParams,
  ApiVVersionApiVersionAreaKeyLocationsParams,
  ApiVVersionApiVersionAreaKeyParams,
  ApiVVersionApiVersionAreaParams,
  ApiVVersionApiVersionDetectionTypeCountParams,
  ApiVVersionApiVersionDetectionTypeKeyDetectorsCountParams,
  ApiVVersionApiVersionDetectionTypeKeyDetectorsParams,
  ApiVVersionApiVersionDetectionTypeKeyMeasureTypesCountParams,
  ApiVVersionApiVersionDetectionTypeKeyMeasureTypesParams,
  ApiVVersionApiVersionDetectionTypeParams,
  ApiVVersionApiVersionDetectorCommentCountParams,
  ApiVVersionApiVersionDetectorCommentParams,
  ApiVVersionApiVersionDetectorCountParams,
  ApiVVersionApiVersionDetectorKeyDetectionTypesCountParams,
  ApiVVersionApiVersionDetectorKeyDetectionTypesParams,
  ApiVVersionApiVersionDetectorKeyDetectorCommentsCountParams,
  ApiVVersionApiVersionDetectorKeyDetectorCommentsParams,
  ApiVVersionApiVersionDetectorParams,
  ApiVVersionApiVersionDeviceConfigurationCountParams,
  ApiVVersionApiVersionDeviceConfigurationKeyDevicesCountParams,
  ApiVVersionApiVersionDeviceConfigurationKeyDevicesParams,
  ApiVVersionApiVersionDeviceConfigurationParams,
  ApiVVersionApiVersionDeviceCountParams,
  ApiVVersionApiVersionDeviceGetActiveDevicesByLocationLocationIdLocationIdParams,
  ApiVVersionApiVersionDeviceGetActiveDevicesCountParams,
  ApiVVersionApiVersionDeviceParams,
  ApiVVersionApiVersionDirectionTypeCountParams,
  ApiVVersionApiVersionDirectionTypeKeyApproachesCountParams,
  ApiVVersionApiVersionDirectionTypeKeyApproachesParams,
  ApiVVersionApiVersionDirectionTypeKeyOpposingDirectionsCountParams,
  ApiVVersionApiVersionDirectionTypeKeyOpposingDirectionsParams,
  ApiVVersionApiVersionDirectionTypeKeyPrimaryDirectionsCountParams,
  ApiVVersionApiVersionDirectionTypeKeyPrimaryDirectionsParams,
  ApiVVersionApiVersionDirectionTypeParams,
  ApiVVersionApiVersionFaqCountParams,
  ApiVVersionApiVersionFaqKeyParams,
  ApiVVersionApiVersionFaqParams,
  ApiVVersionApiVersionJurisdictionCountParams,
  ApiVVersionApiVersionJurisdictionKeyLocationsCountParams,
  ApiVVersionApiVersionJurisdictionKeyLocationsParams,
  ApiVVersionApiVersionJurisdictionKeyParams,
  ApiVVersionApiVersionJurisdictionParams,
  ApiVVersionApiVersionLocationCountParams,
  ApiVVersionApiVersionLocationGetAllVersionsOfLocationIdentifierIdentifierParams,
  ApiVVersionApiVersionLocationGetDetectionTypeCountParams,
  ApiVVersionApiVersionLocationGetLatestVersionOfAllLocationsParams,
  ApiVVersionApiVersionLocationGetLatestVersionOfLocationIdentifierIdentifierParams,
  ApiVVersionApiVersionLocationGetLocationsForSearchParams,
  ApiVVersionApiVersionLocationKeyApproachesCountParams,
  ApiVVersionApiVersionLocationKeyApproachesParams,
  ApiVVersionApiVersionLocationKeyAreasCountParams,
  ApiVVersionApiVersionLocationKeyAreasParams,
  ApiVVersionApiVersionLocationKeyCopyLocationToNewVersionParams,
  ApiVVersionApiVersionLocationKeyDevicesCountParams,
  ApiVVersionApiVersionLocationKeyDevicesParams,
  ApiVVersionApiVersionLocationKeySaveTemplatedLocationParams,
  ApiVVersionApiVersionLocationKeySetLocationToDeletedParams,
  ApiVVersionApiVersionLocationKeySyncLocationParams,
  ApiVVersionApiVersionLocationParams,
  ApiVVersionApiVersionLocationTypeCountParams,
  ApiVVersionApiVersionLocationTypeKeyLocationsCountParams,
  ApiVVersionApiVersionLocationTypeKeyLocationsParams,
  ApiVVersionApiVersionLocationTypeParams,
  ApiVVersionApiVersionMapLayerCountParams,
  ApiVVersionApiVersionMapLayerParams,
  ApiVVersionApiVersionMeasureCommentCountParams,
  ApiVVersionApiVersionMeasureCommentKeyMeasureTypesCountParams,
  ApiVVersionApiVersionMeasureCommentKeyMeasureTypesParams,
  ApiVVersionApiVersionMeasureCommentParams,
  ApiVVersionApiVersionMeasureOptionCountParams,
  ApiVVersionApiVersionMeasureOptionParams,
  ApiVVersionApiVersionMeasureTypeCountParams,
  ApiVVersionApiVersionMeasureTypeKeyDetectionTypesCountParams,
  ApiVVersionApiVersionMeasureTypeKeyDetectionTypesParams,
  ApiVVersionApiVersionMeasureTypeKeyMeasureCommentsCountParams,
  ApiVVersionApiVersionMeasureTypeKeyMeasureCommentsParams,
  ApiVVersionApiVersionMeasureTypeParams,
  ApiVVersionApiVersionMenuItemsCountParams,
  ApiVVersionApiVersionMenuItemsParams,
  ApiVVersionApiVersionProductCountParams,
  ApiVVersionApiVersionProductParams,
  ApiVVersionApiVersionRegionCountParams,
  ApiVVersionApiVersionRegionKeyLocationsCountParams,
  ApiVVersionApiVersionRegionKeyLocationsParams,
  ApiVVersionApiVersionRegionKeyParams,
  ApiVVersionApiVersionRegionParams,
  ApiVVersionApiVersionRouteCountParams,
  ApiVVersionApiVersionRouteDistanceCountParams,
  ApiVVersionApiVersionRouteDistanceGetRouteDistanceByLocationIdentifiersLocationALocationALocationBLocationBParams,
  ApiVVersionApiVersionRouteDistanceKeyNextLocationsCountParams,
  ApiVVersionApiVersionRouteDistanceKeyNextLocationsParams,
  ApiVVersionApiVersionRouteDistanceKeyPreviousLocationsCountParams,
  ApiVVersionApiVersionRouteDistanceKeyPreviousLocationsParams,
  ApiVVersionApiVersionRouteDistanceParams,
  ApiVVersionApiVersionRouteKeyRouteLocationsCountParams,
  ApiVVersionApiVersionRouteKeyRouteLocationsParams,
  ApiVVersionApiVersionRouteLocationCountParams,
  ApiVVersionApiVersionRouteLocationParams,
  ApiVVersionApiVersionRouteParams,
  ApiVVersionApiVersionVersionHistoryCountParams,
  ApiVVersionApiVersionVersionHistoryParams,
  ApiVVersionApiVersionWatchDogIgnoreEventCountParams,
  ApiVVersionApiVersionWatchDogIgnoreEventParams,
  GetApiV1GetApproachDtoIdParams,
  GetApiV1GetRouteViewIdParams,
  LocationDefaultLocationSaveTemplatedLocationParameters,
  PostApiV1UpsertApproachParams,
  PostApiV1UpsertRouteParams,
  UtahUdotATSPMConfigApiModelsDeviceGroup,
  UtahUdotAtspmBusinessWatchdogDetectionTypeGroup,
  UtahUdotAtspmConfigApiModelsApproachDto,
  UtahUdotAtspmConfigApiModelsRouteDto,
  UtahUdotAtspmConfigApiModelsSearchLocation,
  UtahUdotAtspmDataEnumsDetectionTypes,
  UtahUdotAtspmDataEnumsDirectionTypes,
  UtahUdotAtspmDataModelsApproach,
  UtahUdotAtspmDataModelsArea,
  UtahUdotAtspmDataModelsDetectionType,
  UtahUdotAtspmDataModelsDetector,
  UtahUdotAtspmDataModelsDetectorComment,
  UtahUdotAtspmDataModelsDevice,
  UtahUdotAtspmDataModelsDeviceConfiguration,
  UtahUdotAtspmDataModelsDirectionType,
  UtahUdotAtspmDataModelsFaq,
  UtahUdotAtspmDataModelsJurisdiction,
  UtahUdotAtspmDataModelsLocation,
  UtahUdotAtspmDataModelsLocationType,
  UtahUdotAtspmDataModelsMapLayer,
  UtahUdotAtspmDataModelsMeasureComment,
  UtahUdotAtspmDataModelsMeasureOption,
  UtahUdotAtspmDataModelsMeasureType,
  UtahUdotAtspmDataModelsMenuItem,
  UtahUdotAtspmDataModelsProduct,
  UtahUdotAtspmDataModelsRegion,
  UtahUdotAtspmDataModelsRoute,
  UtahUdotAtspmDataModelsRouteDistance,
  UtahUdotAtspmDataModelsRouteLocation,
  UtahUdotAtspmDataModelsVersionHistory,
  UtahUdotAtspmDataModelsWatchDogIgnoreEvent
} from './aTSPMConfigurationApi.schemas'
import { configRequest } from '../../lib/axios';



/**
 * @summary Utah.Udot.Atspm.Data.Models.Detector navigation property action
 */
export const apiVVersionApiVersionApproachKeyDetectors = (
    key: number,
    params?: ApiVVersionApiVersionApproachKeyDetectorsParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsDetector[]>(
      {url: `/api/v1/Approach/${key}/detectors`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionApproachKeyDetectorsQueryKey = (key: number,
    params?: ApiVVersionApiVersionApproachKeyDetectorsParams,) => {
    return [`/api/v1/Approach/${key}/detectors`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionApproachKeyDetectorsQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionApproachKeyDetectors>>, TError = void>(key: number,
    params?: ApiVVersionApiVersionApproachKeyDetectorsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionApproachKeyDetectors>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionApproachKeyDetectorsQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionApproachKeyDetectors>>> = ({ signal }) => apiVVersionApiVersionApproachKeyDetectors(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionApproachKeyDetectors>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionApproachKeyDetectorsQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionApproachKeyDetectors>>>
export type ApiVVersionApiVersionApproachKeyDetectorsQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.Detector navigation property action
 */

export function useApiVVersionApiVersionApproachKeyDetectors<TData = Awaited<ReturnType<typeof apiVVersionApiVersionApproachKeyDetectors>>, TError = void>(
 key: number,
    params?: ApiVVersionApiVersionApproachKeyDetectorsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionApproachKeyDetectors>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionApproachKeyDetectorsQueryOptions(key,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Utah.Udot.Atspm.Data.Models.Detector navigation property action
 */
export const apiVVersionApiVersionApproachKeyDetectorsCount = (
    key: number,
    params?: ApiVVersionApiVersionApproachKeyDetectorsCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsDetector[]>(
      {url: `/api/v1/Approach/${key}/detectors/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionApproachKeyDetectorsCountQueryKey = (key: number,
    params?: ApiVVersionApiVersionApproachKeyDetectorsCountParams,) => {
    return [`/api/v1/Approach/${key}/detectors/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionApproachKeyDetectorsCountQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionApproachKeyDetectorsCount>>, TError = void>(key: number,
    params?: ApiVVersionApiVersionApproachKeyDetectorsCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionApproachKeyDetectorsCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionApproachKeyDetectorsCountQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionApproachKeyDetectorsCount>>> = ({ signal }) => apiVVersionApiVersionApproachKeyDetectorsCount(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionApproachKeyDetectorsCount>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionApproachKeyDetectorsCountQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionApproachKeyDetectorsCount>>>
export type ApiVVersionApiVersionApproachKeyDetectorsCountQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.Detector navigation property action
 */

export function useApiVVersionApiVersionApproachKeyDetectorsCount<TData = Awaited<ReturnType<typeof apiVVersionApiVersionApproachKeyDetectorsCount>>, TError = void>(
 key: number,
    params?: ApiVVersionApiVersionApproachKeyDetectorsCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionApproachKeyDetectorsCount>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionApproachKeyDetectorsCountQueryOptions(key,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const postApiV1UpsertApproach = (
    utahUdotAtspmConfigApiModelsApproachDto: UtahUdotAtspmConfigApiModelsApproachDto,
    params: PostApiV1UpsertApproachParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/UpsertApproach`, method: 'POST',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: utahUdotAtspmConfigApiModelsApproachDto,
        params
    },
      );
    }
  


export const getPostApiV1UpsertApproachMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1UpsertApproach>>, TError,{data: UtahUdotAtspmConfigApiModelsApproachDto;params: PostApiV1UpsertApproachParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiV1UpsertApproach>>, TError,{data: UtahUdotAtspmConfigApiModelsApproachDto;params: PostApiV1UpsertApproachParams}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiV1UpsertApproach>>, {data: UtahUdotAtspmConfigApiModelsApproachDto;params: PostApiV1UpsertApproachParams}> = (props) => {
          const {data,params} = props ?? {};

          return  postApiV1UpsertApproach(data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1UpsertApproachMutationResult = NonNullable<Awaited<ReturnType<typeof postApiV1UpsertApproach>>>
    export type PostApiV1UpsertApproachMutationBody = UtahUdotAtspmConfigApiModelsApproachDto
    export type PostApiV1UpsertApproachMutationError = void

    export const usePostApiV1UpsertApproach = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1UpsertApproach>>, TError,{data: UtahUdotAtspmConfigApiModelsApproachDto;params: PostApiV1UpsertApproachParams}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postApiV1UpsertApproach>>,
        TError,
        {data: UtahUdotAtspmConfigApiModelsApproachDto;params: PostApiV1UpsertApproachParams},
        TContext
      > => {

      const mutationOptions = getPostApiV1UpsertApproachMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiV1GetApproachDtoId = (
    id: number,
    params: GetApiV1GetApproachDtoIdParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/GetApproachDto/${id}`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetApiV1GetApproachDtoIdQueryKey = (id: number,
    params: GetApiV1GetApproachDtoIdParams,) => {
    return [`/api/v1/GetApproachDto/${id}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiV1GetApproachDtoIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1GetApproachDtoId>>, TError = void>(id: number,
    params: GetApiV1GetApproachDtoIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiV1GetApproachDtoId>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1GetApproachDtoIdQueryKey(id,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1GetApproachDtoId>>> = ({ signal }) => getApiV1GetApproachDtoId(id,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1GetApproachDtoId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1GetApproachDtoIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1GetApproachDtoId>>>
export type GetApiV1GetApproachDtoIdQueryError = void



export function useGetApiV1GetApproachDtoId<TData = Awaited<ReturnType<typeof getApiV1GetApproachDtoId>>, TError = void>(
 id: number,
    params: GetApiV1GetApproachDtoIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiV1GetApproachDtoId>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiV1GetApproachDtoIdQueryOptions(id,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Collection of objects from oData query.
 */
export const apiVVersionApiVersionApproach = (
    params?: ApiVVersionApiVersionApproachParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsApproach[]>(
      {url: `/api/v1/Approach`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionApproachQueryKey = (params?: ApiVVersionApiVersionApproachParams,) => {
    return [`/api/v1/Approach`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionApproachQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionApproach>>, TError = void>(params?: ApiVVersionApiVersionApproachParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionApproach>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionApproachQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionApproach>>> = ({ signal }) => apiVVersionApiVersionApproach(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionApproach>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionApproachQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionApproach>>>
export type ApiVVersionApiVersionApproachQueryError = void


/**
 * @summary Collection of objects from oData query.
 */

export function useApiVVersionApiVersionApproach<TData = Awaited<ReturnType<typeof apiVVersionApiVersionApproach>>, TError = void>(
 params?: ApiVVersionApiVersionApproachParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionApproach>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionApproachQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const apiVVersionApiVersionApproachKey = (
    key: number,
    utahUdotAtspmDataModelsApproach: UtahUdotAtspmDataModelsApproach,
    params?: ApiVVersionApiVersionApproachKeyParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/Approach/${key}`, method: 'PUT',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: utahUdotAtspmDataModelsApproach,
        params
    },
      );
    }
  


export const getApiVVersionApiVersionApproachKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionApproachKey>>, TError,{key: number;data: UtahUdotAtspmDataModelsApproach;params?: ApiVVersionApiVersionApproachKeyParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionApproachKey>>, TError,{key: number;data: UtahUdotAtspmDataModelsApproach;params?: ApiVVersionApiVersionApproachKeyParams}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiVVersionApiVersionApproachKey>>, {key: number;data: UtahUdotAtspmDataModelsApproach;params?: ApiVVersionApiVersionApproachKeyParams}> = (props) => {
          const {key,data,params} = props ?? {};

          return  apiVVersionApiVersionApproachKey(key,data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiVVersionApiVersionApproachKeyMutationResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionApproachKey>>>
    export type ApiVVersionApiVersionApproachKeyMutationBody = UtahUdotAtspmDataModelsApproach
    export type ApiVVersionApiVersionApproachKeyMutationError = void

    export const useApiVVersionApiVersionApproachKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionApproachKey>>, TError,{key: number;data: UtahUdotAtspmDataModelsApproach;params?: ApiVVersionApiVersionApproachKeyParams}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof apiVVersionApiVersionApproachKey>>,
        TError,
        {key: number;data: UtahUdotAtspmDataModelsApproach;params?: ApiVVersionApiVersionApproachKeyParams},
        TContext
      > => {

      const mutationOptions = getApiVVersionApiVersionApproachKeyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Collection of objects from oData query.
 */
export const apiVVersionApiVersionApproachCount = (
    params?: ApiVVersionApiVersionApproachCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsApproach[]>(
      {url: `/api/v1/Approach/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionApproachCountQueryKey = (params?: ApiVVersionApiVersionApproachCountParams,) => {
    return [`/api/v1/Approach/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionApproachCountQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionApproachCount>>, TError = void>(params?: ApiVVersionApiVersionApproachCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionApproachCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionApproachCountQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionApproachCount>>> = ({ signal }) => apiVVersionApiVersionApproachCount(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionApproachCount>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionApproachCountQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionApproachCount>>>
export type ApiVVersionApiVersionApproachCountQueryError = void


/**
 * @summary Collection of objects from oData query.
 */

export function useApiVVersionApiVersionApproachCount<TData = Awaited<ReturnType<typeof apiVVersionApiVersionApproachCount>>, TError = void>(
 params?: ApiVVersionApiVersionApproachCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionApproachCount>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionApproachCountQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Utah.Udot.Atspm.Data.Models.Location navigation property action
 */
export const apiVVersionApiVersionAreaKeyLocations = (
    key: number,
    params?: ApiVVersionApiVersionAreaKeyLocationsParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsLocation[]>(
      {url: `/api/v1/Area/${key}/locations`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionAreaKeyLocationsQueryKey = (key: number,
    params?: ApiVVersionApiVersionAreaKeyLocationsParams,) => {
    return [`/api/v1/Area/${key}/locations`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionAreaKeyLocationsQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionAreaKeyLocations>>, TError = void>(key: number,
    params?: ApiVVersionApiVersionAreaKeyLocationsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionAreaKeyLocations>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionAreaKeyLocationsQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionAreaKeyLocations>>> = ({ signal }) => apiVVersionApiVersionAreaKeyLocations(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionAreaKeyLocations>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionAreaKeyLocationsQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionAreaKeyLocations>>>
export type ApiVVersionApiVersionAreaKeyLocationsQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.Location navigation property action
 */

export function useApiVVersionApiVersionAreaKeyLocations<TData = Awaited<ReturnType<typeof apiVVersionApiVersionAreaKeyLocations>>, TError = void>(
 key: number,
    params?: ApiVVersionApiVersionAreaKeyLocationsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionAreaKeyLocations>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionAreaKeyLocationsQueryOptions(key,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Utah.Udot.Atspm.Data.Models.Location navigation property action
 */
export const apiVVersionApiVersionAreaKeyLocationsCount = (
    key: number,
    params?: ApiVVersionApiVersionAreaKeyLocationsCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsLocation[]>(
      {url: `/api/v1/Area/${key}/locations/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionAreaKeyLocationsCountQueryKey = (key: number,
    params?: ApiVVersionApiVersionAreaKeyLocationsCountParams,) => {
    return [`/api/v1/Area/${key}/locations/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionAreaKeyLocationsCountQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionAreaKeyLocationsCount>>, TError = void>(key: number,
    params?: ApiVVersionApiVersionAreaKeyLocationsCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionAreaKeyLocationsCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionAreaKeyLocationsCountQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionAreaKeyLocationsCount>>> = ({ signal }) => apiVVersionApiVersionAreaKeyLocationsCount(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionAreaKeyLocationsCount>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionAreaKeyLocationsCountQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionAreaKeyLocationsCount>>>
export type ApiVVersionApiVersionAreaKeyLocationsCountQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.Location navigation property action
 */

export function useApiVVersionApiVersionAreaKeyLocationsCount<TData = Awaited<ReturnType<typeof apiVVersionApiVersionAreaKeyLocationsCount>>, TError = void>(
 key: number,
    params?: ApiVVersionApiVersionAreaKeyLocationsCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionAreaKeyLocationsCount>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionAreaKeyLocationsCountQueryOptions(key,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Collection of objects from oData query.
 */
export const apiVVersionApiVersionArea = (
    params?: ApiVVersionApiVersionAreaParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsArea[]>(
      {url: `/api/v1/Area`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionAreaQueryKey = (params?: ApiVVersionApiVersionAreaParams,) => {
    return [`/api/v1/Area`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionAreaQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionArea>>, TError = void>(params?: ApiVVersionApiVersionAreaParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionArea>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionAreaQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionArea>>> = ({ signal }) => apiVVersionApiVersionArea(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionArea>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionAreaQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionArea>>>
export type ApiVVersionApiVersionAreaQueryError = void


/**
 * @summary Collection of objects from oData query.
 */

export function useApiVVersionApiVersionArea<TData = Awaited<ReturnType<typeof apiVVersionApiVersionArea>>, TError = void>(
 params?: ApiVVersionApiVersionAreaParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionArea>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionAreaQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const apiVVersionApiVersionAreaKey = (
    key: number,
    utahUdotAtspmDataModelsArea: UtahUdotAtspmDataModelsArea,
    params?: ApiVVersionApiVersionAreaKeyParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/Area/${key}`, method: 'PUT',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: utahUdotAtspmDataModelsArea,
        params
    },
      );
    }
  


export const getApiVVersionApiVersionAreaKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionAreaKey>>, TError,{key: number;data: UtahUdotAtspmDataModelsArea;params?: ApiVVersionApiVersionAreaKeyParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionAreaKey>>, TError,{key: number;data: UtahUdotAtspmDataModelsArea;params?: ApiVVersionApiVersionAreaKeyParams}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiVVersionApiVersionAreaKey>>, {key: number;data: UtahUdotAtspmDataModelsArea;params?: ApiVVersionApiVersionAreaKeyParams}> = (props) => {
          const {key,data,params} = props ?? {};

          return  apiVVersionApiVersionAreaKey(key,data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiVVersionApiVersionAreaKeyMutationResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionAreaKey>>>
    export type ApiVVersionApiVersionAreaKeyMutationBody = UtahUdotAtspmDataModelsArea
    export type ApiVVersionApiVersionAreaKeyMutationError = void

    export const useApiVVersionApiVersionAreaKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionAreaKey>>, TError,{key: number;data: UtahUdotAtspmDataModelsArea;params?: ApiVVersionApiVersionAreaKeyParams}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof apiVVersionApiVersionAreaKey>>,
        TError,
        {key: number;data: UtahUdotAtspmDataModelsArea;params?: ApiVVersionApiVersionAreaKeyParams},
        TContext
      > => {

      const mutationOptions = getApiVVersionApiVersionAreaKeyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Collection of objects from oData query.
 */
export const apiVVersionApiVersionAreaCount = (
    params?: ApiVVersionApiVersionAreaCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsArea[]>(
      {url: `/api/v1/Area/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionAreaCountQueryKey = (params?: ApiVVersionApiVersionAreaCountParams,) => {
    return [`/api/v1/Area/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionAreaCountQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionAreaCount>>, TError = void>(params?: ApiVVersionApiVersionAreaCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionAreaCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionAreaCountQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionAreaCount>>> = ({ signal }) => apiVVersionApiVersionAreaCount(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionAreaCount>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionAreaCountQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionAreaCount>>>
export type ApiVVersionApiVersionAreaCountQueryError = void


/**
 * @summary Collection of objects from oData query.
 */

export function useApiVVersionApiVersionAreaCount<TData = Awaited<ReturnType<typeof apiVVersionApiVersionAreaCount>>, TError = void>(
 params?: ApiVVersionApiVersionAreaCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionAreaCount>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionAreaCountQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Utah.Udot.Atspm.Data.Models.Detector navigation property action
 */
export const apiVVersionApiVersionDetectionTypeKeyDetectors = (
    key: number,
    params?: ApiVVersionApiVersionDetectionTypeKeyDetectorsParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsDetector[]>(
      {url: `/api/v1/DetectionType/${key}/detectors`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionDetectionTypeKeyDetectorsQueryKey = (key: number,
    params?: ApiVVersionApiVersionDetectionTypeKeyDetectorsParams,) => {
    return [`/api/v1/DetectionType/${key}/detectors`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionDetectionTypeKeyDetectorsQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionDetectionTypeKeyDetectors>>, TError = void>(key: number,
    params?: ApiVVersionApiVersionDetectionTypeKeyDetectorsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDetectionTypeKeyDetectors>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionDetectionTypeKeyDetectorsQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionDetectionTypeKeyDetectors>>> = ({ signal }) => apiVVersionApiVersionDetectionTypeKeyDetectors(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDetectionTypeKeyDetectors>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionDetectionTypeKeyDetectorsQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionDetectionTypeKeyDetectors>>>
export type ApiVVersionApiVersionDetectionTypeKeyDetectorsQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.Detector navigation property action
 */

export function useApiVVersionApiVersionDetectionTypeKeyDetectors<TData = Awaited<ReturnType<typeof apiVVersionApiVersionDetectionTypeKeyDetectors>>, TError = void>(
 key: number,
    params?: ApiVVersionApiVersionDetectionTypeKeyDetectorsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDetectionTypeKeyDetectors>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionDetectionTypeKeyDetectorsQueryOptions(key,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Utah.Udot.Atspm.Data.Models.Detector navigation property action
 */
export const apiVVersionApiVersionDetectionTypeKeyDetectorsCount = (
    key: number,
    params?: ApiVVersionApiVersionDetectionTypeKeyDetectorsCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsDetector[]>(
      {url: `/api/v1/DetectionType/${key}/detectors/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionDetectionTypeKeyDetectorsCountQueryKey = (key: number,
    params?: ApiVVersionApiVersionDetectionTypeKeyDetectorsCountParams,) => {
    return [`/api/v1/DetectionType/${key}/detectors/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionDetectionTypeKeyDetectorsCountQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionDetectionTypeKeyDetectorsCount>>, TError = void>(key: number,
    params?: ApiVVersionApiVersionDetectionTypeKeyDetectorsCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDetectionTypeKeyDetectorsCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionDetectionTypeKeyDetectorsCountQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionDetectionTypeKeyDetectorsCount>>> = ({ signal }) => apiVVersionApiVersionDetectionTypeKeyDetectorsCount(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDetectionTypeKeyDetectorsCount>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionDetectionTypeKeyDetectorsCountQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionDetectionTypeKeyDetectorsCount>>>
export type ApiVVersionApiVersionDetectionTypeKeyDetectorsCountQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.Detector navigation property action
 */

export function useApiVVersionApiVersionDetectionTypeKeyDetectorsCount<TData = Awaited<ReturnType<typeof apiVVersionApiVersionDetectionTypeKeyDetectorsCount>>, TError = void>(
 key: number,
    params?: ApiVVersionApiVersionDetectionTypeKeyDetectorsCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDetectionTypeKeyDetectorsCount>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionDetectionTypeKeyDetectorsCountQueryOptions(key,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Utah.Udot.Atspm.Data.Models.MeasureType navigation property action
 */
export const apiVVersionApiVersionDetectionTypeKeyMeasureTypes = (
    key: number,
    params?: ApiVVersionApiVersionDetectionTypeKeyMeasureTypesParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsMeasureType[]>(
      {url: `/api/v1/DetectionType/${key}/measureTypes`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionDetectionTypeKeyMeasureTypesQueryKey = (key: number,
    params?: ApiVVersionApiVersionDetectionTypeKeyMeasureTypesParams,) => {
    return [`/api/v1/DetectionType/${key}/measureTypes`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionDetectionTypeKeyMeasureTypesQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionDetectionTypeKeyMeasureTypes>>, TError = void>(key: number,
    params?: ApiVVersionApiVersionDetectionTypeKeyMeasureTypesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDetectionTypeKeyMeasureTypes>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionDetectionTypeKeyMeasureTypesQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionDetectionTypeKeyMeasureTypes>>> = ({ signal }) => apiVVersionApiVersionDetectionTypeKeyMeasureTypes(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDetectionTypeKeyMeasureTypes>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionDetectionTypeKeyMeasureTypesQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionDetectionTypeKeyMeasureTypes>>>
export type ApiVVersionApiVersionDetectionTypeKeyMeasureTypesQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.MeasureType navigation property action
 */

export function useApiVVersionApiVersionDetectionTypeKeyMeasureTypes<TData = Awaited<ReturnType<typeof apiVVersionApiVersionDetectionTypeKeyMeasureTypes>>, TError = void>(
 key: number,
    params?: ApiVVersionApiVersionDetectionTypeKeyMeasureTypesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDetectionTypeKeyMeasureTypes>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionDetectionTypeKeyMeasureTypesQueryOptions(key,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Utah.Udot.Atspm.Data.Models.MeasureType navigation property action
 */
export const apiVVersionApiVersionDetectionTypeKeyMeasureTypesCount = (
    key: number,
    params?: ApiVVersionApiVersionDetectionTypeKeyMeasureTypesCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsMeasureType[]>(
      {url: `/api/v1/DetectionType/${key}/measureTypes/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionDetectionTypeKeyMeasureTypesCountQueryKey = (key: number,
    params?: ApiVVersionApiVersionDetectionTypeKeyMeasureTypesCountParams,) => {
    return [`/api/v1/DetectionType/${key}/measureTypes/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionDetectionTypeKeyMeasureTypesCountQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionDetectionTypeKeyMeasureTypesCount>>, TError = void>(key: number,
    params?: ApiVVersionApiVersionDetectionTypeKeyMeasureTypesCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDetectionTypeKeyMeasureTypesCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionDetectionTypeKeyMeasureTypesCountQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionDetectionTypeKeyMeasureTypesCount>>> = ({ signal }) => apiVVersionApiVersionDetectionTypeKeyMeasureTypesCount(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDetectionTypeKeyMeasureTypesCount>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionDetectionTypeKeyMeasureTypesCountQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionDetectionTypeKeyMeasureTypesCount>>>
export type ApiVVersionApiVersionDetectionTypeKeyMeasureTypesCountQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.MeasureType navigation property action
 */

export function useApiVVersionApiVersionDetectionTypeKeyMeasureTypesCount<TData = Awaited<ReturnType<typeof apiVVersionApiVersionDetectionTypeKeyMeasureTypesCount>>, TError = void>(
 key: number,
    params?: ApiVVersionApiVersionDetectionTypeKeyMeasureTypesCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDetectionTypeKeyMeasureTypesCount>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionDetectionTypeKeyMeasureTypesCountQueryOptions(key,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Insert object of specified type
 */
export const apiVVersionApiVersionDetectionType = (
    utahUdotAtspmDataModelsDetectionType: UtahUdotAtspmDataModelsDetectionType,
    params?: ApiVVersionApiVersionDetectionTypeParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/DetectionType`, method: 'POST',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: utahUdotAtspmDataModelsDetectionType,
        params
    },
      );
    }
  


export const getApiVVersionApiVersionDetectionTypeMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDetectionType>>, TError,{data: UtahUdotAtspmDataModelsDetectionType;params?: ApiVVersionApiVersionDetectionTypeParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDetectionType>>, TError,{data: UtahUdotAtspmDataModelsDetectionType;params?: ApiVVersionApiVersionDetectionTypeParams}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiVVersionApiVersionDetectionType>>, {data: UtahUdotAtspmDataModelsDetectionType;params?: ApiVVersionApiVersionDetectionTypeParams}> = (props) => {
          const {data,params} = props ?? {};

          return  apiVVersionApiVersionDetectionType(data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiVVersionApiVersionDetectionTypeMutationResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionDetectionType>>>
    export type ApiVVersionApiVersionDetectionTypeMutationBody = UtahUdotAtspmDataModelsDetectionType
    export type ApiVVersionApiVersionDetectionTypeMutationError = void

    /**
 * @summary Insert object of specified type
 */
export const useApiVVersionApiVersionDetectionType = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDetectionType>>, TError,{data: UtahUdotAtspmDataModelsDetectionType;params?: ApiVVersionApiVersionDetectionTypeParams}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof apiVVersionApiVersionDetectionType>>,
        TError,
        {data: UtahUdotAtspmDataModelsDetectionType;params?: ApiVVersionApiVersionDetectionTypeParams},
        TContext
      > => {

      const mutationOptions = getApiVVersionApiVersionDetectionTypeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Collection of objects from oData query.
 */
export const apiVVersionApiVersionDetectionTypeCount = (
    params?: ApiVVersionApiVersionDetectionTypeCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsDetectionType[]>(
      {url: `/api/v1/DetectionType/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionDetectionTypeCountQueryKey = (params?: ApiVVersionApiVersionDetectionTypeCountParams,) => {
    return [`/api/v1/DetectionType/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionDetectionTypeCountQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionDetectionTypeCount>>, TError = void>(params?: ApiVVersionApiVersionDetectionTypeCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDetectionTypeCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionDetectionTypeCountQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionDetectionTypeCount>>> = ({ signal }) => apiVVersionApiVersionDetectionTypeCount(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDetectionTypeCount>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionDetectionTypeCountQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionDetectionTypeCount>>>
export type ApiVVersionApiVersionDetectionTypeCountQueryError = void


/**
 * @summary Collection of objects from oData query.
 */

export function useApiVVersionApiVersionDetectionTypeCount<TData = Awaited<ReturnType<typeof apiVVersionApiVersionDetectionTypeCount>>, TError = void>(
 params?: ApiVVersionApiVersionDetectionTypeCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDetectionTypeCount>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionDetectionTypeCountQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Delete object of specified type
 */
export const apiVVersionApiVersionDetectionTypeKey = (
    key: UtahUdotAtspmDataEnumsDetectionTypes,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/DetectionType/${key}`, method: 'DELETE'
    },
      );
    }
  


export const getApiVVersionApiVersionDetectionTypeKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDetectionTypeKey>>, TError,{key: UtahUdotAtspmDataEnumsDetectionTypes}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDetectionTypeKey>>, TError,{key: UtahUdotAtspmDataEnumsDetectionTypes}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiVVersionApiVersionDetectionTypeKey>>, {key: UtahUdotAtspmDataEnumsDetectionTypes}> = (props) => {
          const {key} = props ?? {};

          return  apiVVersionApiVersionDetectionTypeKey(key,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiVVersionApiVersionDetectionTypeKeyMutationResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionDetectionTypeKey>>>
    
    export type ApiVVersionApiVersionDetectionTypeKeyMutationError = void

    /**
 * @summary Delete object of specified type
 */
export const useApiVVersionApiVersionDetectionTypeKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDetectionTypeKey>>, TError,{key: UtahUdotAtspmDataEnumsDetectionTypes}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof apiVVersionApiVersionDetectionTypeKey>>,
        TError,
        {key: UtahUdotAtspmDataEnumsDetectionTypes},
        TContext
      > => {

      const mutationOptions = getApiVVersionApiVersionDetectionTypeKeyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Utah.Udot.Atspm.Data.Models.DetectorComment navigation property action
 */
export const apiVVersionApiVersionDetectorKeyDetectorComments = (
    key: number,
    params?: ApiVVersionApiVersionDetectorKeyDetectorCommentsParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsDetectorComment[]>(
      {url: `/api/v1/Detector/${key}/detectorComments`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionDetectorKeyDetectorCommentsQueryKey = (key: number,
    params?: ApiVVersionApiVersionDetectorKeyDetectorCommentsParams,) => {
    return [`/api/v1/Detector/${key}/detectorComments`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionDetectorKeyDetectorCommentsQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionDetectorKeyDetectorComments>>, TError = void>(key: number,
    params?: ApiVVersionApiVersionDetectorKeyDetectorCommentsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDetectorKeyDetectorComments>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionDetectorKeyDetectorCommentsQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionDetectorKeyDetectorComments>>> = ({ signal }) => apiVVersionApiVersionDetectorKeyDetectorComments(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDetectorKeyDetectorComments>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionDetectorKeyDetectorCommentsQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionDetectorKeyDetectorComments>>>
export type ApiVVersionApiVersionDetectorKeyDetectorCommentsQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.DetectorComment navigation property action
 */

export function useApiVVersionApiVersionDetectorKeyDetectorComments<TData = Awaited<ReturnType<typeof apiVVersionApiVersionDetectorKeyDetectorComments>>, TError = void>(
 key: number,
    params?: ApiVVersionApiVersionDetectorKeyDetectorCommentsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDetectorKeyDetectorComments>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionDetectorKeyDetectorCommentsQueryOptions(key,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Utah.Udot.Atspm.Data.Models.DetectorComment navigation property action
 */
export const apiVVersionApiVersionDetectorKeyDetectorCommentsCount = (
    key: number,
    params?: ApiVVersionApiVersionDetectorKeyDetectorCommentsCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsDetectorComment[]>(
      {url: `/api/v1/Detector/${key}/detectorComments/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionDetectorKeyDetectorCommentsCountQueryKey = (key: number,
    params?: ApiVVersionApiVersionDetectorKeyDetectorCommentsCountParams,) => {
    return [`/api/v1/Detector/${key}/detectorComments/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionDetectorKeyDetectorCommentsCountQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionDetectorKeyDetectorCommentsCount>>, TError = void>(key: number,
    params?: ApiVVersionApiVersionDetectorKeyDetectorCommentsCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDetectorKeyDetectorCommentsCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionDetectorKeyDetectorCommentsCountQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionDetectorKeyDetectorCommentsCount>>> = ({ signal }) => apiVVersionApiVersionDetectorKeyDetectorCommentsCount(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDetectorKeyDetectorCommentsCount>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionDetectorKeyDetectorCommentsCountQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionDetectorKeyDetectorCommentsCount>>>
export type ApiVVersionApiVersionDetectorKeyDetectorCommentsCountQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.DetectorComment navigation property action
 */

export function useApiVVersionApiVersionDetectorKeyDetectorCommentsCount<TData = Awaited<ReturnType<typeof apiVVersionApiVersionDetectorKeyDetectorCommentsCount>>, TError = void>(
 key: number,
    params?: ApiVVersionApiVersionDetectorKeyDetectorCommentsCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDetectorKeyDetectorCommentsCount>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionDetectorKeyDetectorCommentsCountQueryOptions(key,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Utah.Udot.Atspm.Data.Models.DetectionType navigation property action
 */
export const apiVVersionApiVersionDetectorKeyDetectionTypes = (
    key: number,
    params?: ApiVVersionApiVersionDetectorKeyDetectionTypesParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsDetectionType[]>(
      {url: `/api/v1/Detector/${key}/detectionTypes`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionDetectorKeyDetectionTypesQueryKey = (key: number,
    params?: ApiVVersionApiVersionDetectorKeyDetectionTypesParams,) => {
    return [`/api/v1/Detector/${key}/detectionTypes`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionDetectorKeyDetectionTypesQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionDetectorKeyDetectionTypes>>, TError = void>(key: number,
    params?: ApiVVersionApiVersionDetectorKeyDetectionTypesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDetectorKeyDetectionTypes>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionDetectorKeyDetectionTypesQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionDetectorKeyDetectionTypes>>> = ({ signal }) => apiVVersionApiVersionDetectorKeyDetectionTypes(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDetectorKeyDetectionTypes>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionDetectorKeyDetectionTypesQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionDetectorKeyDetectionTypes>>>
export type ApiVVersionApiVersionDetectorKeyDetectionTypesQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.DetectionType navigation property action
 */

export function useApiVVersionApiVersionDetectorKeyDetectionTypes<TData = Awaited<ReturnType<typeof apiVVersionApiVersionDetectorKeyDetectionTypes>>, TError = void>(
 key: number,
    params?: ApiVVersionApiVersionDetectorKeyDetectionTypesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDetectorKeyDetectionTypes>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionDetectorKeyDetectionTypesQueryOptions(key,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Utah.Udot.Atspm.Data.Models.DetectionType navigation property action
 */
export const apiVVersionApiVersionDetectorKeyDetectionTypesCount = (
    key: number,
    params?: ApiVVersionApiVersionDetectorKeyDetectionTypesCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsDetectionType[]>(
      {url: `/api/v1/Detector/${key}/detectionTypes/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionDetectorKeyDetectionTypesCountQueryKey = (key: number,
    params?: ApiVVersionApiVersionDetectorKeyDetectionTypesCountParams,) => {
    return [`/api/v1/Detector/${key}/detectionTypes/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionDetectorKeyDetectionTypesCountQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionDetectorKeyDetectionTypesCount>>, TError = void>(key: number,
    params?: ApiVVersionApiVersionDetectorKeyDetectionTypesCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDetectorKeyDetectionTypesCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionDetectorKeyDetectionTypesCountQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionDetectorKeyDetectionTypesCount>>> = ({ signal }) => apiVVersionApiVersionDetectorKeyDetectionTypesCount(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDetectorKeyDetectionTypesCount>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionDetectorKeyDetectionTypesCountQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionDetectorKeyDetectionTypesCount>>>
export type ApiVVersionApiVersionDetectorKeyDetectionTypesCountQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.DetectionType navigation property action
 */

export function useApiVVersionApiVersionDetectorKeyDetectionTypesCount<TData = Awaited<ReturnType<typeof apiVVersionApiVersionDetectorKeyDetectionTypesCount>>, TError = void>(
 key: number,
    params?: ApiVVersionApiVersionDetectorKeyDetectionTypesCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDetectorKeyDetectionTypesCount>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionDetectorKeyDetectionTypesCountQueryOptions(key,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Insert object of specified type
 */
export const apiVVersionApiVersionDetector = (
    utahUdotAtspmDataModelsDetector: UtahUdotAtspmDataModelsDetector,
    params?: ApiVVersionApiVersionDetectorParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/Detector`, method: 'POST',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: utahUdotAtspmDataModelsDetector,
        params
    },
      );
    }
  


export const getApiVVersionApiVersionDetectorMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDetector>>, TError,{data: UtahUdotAtspmDataModelsDetector;params?: ApiVVersionApiVersionDetectorParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDetector>>, TError,{data: UtahUdotAtspmDataModelsDetector;params?: ApiVVersionApiVersionDetectorParams}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiVVersionApiVersionDetector>>, {data: UtahUdotAtspmDataModelsDetector;params?: ApiVVersionApiVersionDetectorParams}> = (props) => {
          const {data,params} = props ?? {};

          return  apiVVersionApiVersionDetector(data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiVVersionApiVersionDetectorMutationResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionDetector>>>
    export type ApiVVersionApiVersionDetectorMutationBody = UtahUdotAtspmDataModelsDetector
    export type ApiVVersionApiVersionDetectorMutationError = void

    /**
 * @summary Insert object of specified type
 */
export const useApiVVersionApiVersionDetector = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDetector>>, TError,{data: UtahUdotAtspmDataModelsDetector;params?: ApiVVersionApiVersionDetectorParams}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof apiVVersionApiVersionDetector>>,
        TError,
        {data: UtahUdotAtspmDataModelsDetector;params?: ApiVVersionApiVersionDetectorParams},
        TContext
      > => {

      const mutationOptions = getApiVVersionApiVersionDetectorMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Collection of objects from oData query.
 */
export const apiVVersionApiVersionDetectorCount = (
    params?: ApiVVersionApiVersionDetectorCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsDetector[]>(
      {url: `/api/v1/Detector/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionDetectorCountQueryKey = (params?: ApiVVersionApiVersionDetectorCountParams,) => {
    return [`/api/v1/Detector/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionDetectorCountQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionDetectorCount>>, TError = void>(params?: ApiVVersionApiVersionDetectorCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDetectorCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionDetectorCountQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionDetectorCount>>> = ({ signal }) => apiVVersionApiVersionDetectorCount(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDetectorCount>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionDetectorCountQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionDetectorCount>>>
export type ApiVVersionApiVersionDetectorCountQueryError = void


/**
 * @summary Collection of objects from oData query.
 */

export function useApiVVersionApiVersionDetectorCount<TData = Awaited<ReturnType<typeof apiVVersionApiVersionDetectorCount>>, TError = void>(
 params?: ApiVVersionApiVersionDetectorCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDetectorCount>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionDetectorCountQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Delete object of specified type
 */
export const apiVVersionApiVersionDetectorKey = (
    key: number,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/Detector/${key}`, method: 'DELETE'
    },
      );
    }
  


export const getApiVVersionApiVersionDetectorKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDetectorKey>>, TError,{key: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDetectorKey>>, TError,{key: number}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiVVersionApiVersionDetectorKey>>, {key: number}> = (props) => {
          const {key} = props ?? {};

          return  apiVVersionApiVersionDetectorKey(key,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiVVersionApiVersionDetectorKeyMutationResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionDetectorKey>>>
    
    export type ApiVVersionApiVersionDetectorKeyMutationError = void

    /**
 * @summary Delete object of specified type
 */
export const useApiVVersionApiVersionDetectorKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDetectorKey>>, TError,{key: number}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof apiVVersionApiVersionDetectorKey>>,
        TError,
        {key: number},
        TContext
      > => {

      const mutationOptions = getApiVVersionApiVersionDetectorKeyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Insert object of specified type
 */
export const apiVVersionApiVersionDetectorComment = (
    utahUdotAtspmDataModelsDetectorComment: UtahUdotAtspmDataModelsDetectorComment,
    params?: ApiVVersionApiVersionDetectorCommentParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/DetectorComment`, method: 'POST',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: utahUdotAtspmDataModelsDetectorComment,
        params
    },
      );
    }
  


export const getApiVVersionApiVersionDetectorCommentMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDetectorComment>>, TError,{data: UtahUdotAtspmDataModelsDetectorComment;params?: ApiVVersionApiVersionDetectorCommentParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDetectorComment>>, TError,{data: UtahUdotAtspmDataModelsDetectorComment;params?: ApiVVersionApiVersionDetectorCommentParams}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiVVersionApiVersionDetectorComment>>, {data: UtahUdotAtspmDataModelsDetectorComment;params?: ApiVVersionApiVersionDetectorCommentParams}> = (props) => {
          const {data,params} = props ?? {};

          return  apiVVersionApiVersionDetectorComment(data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiVVersionApiVersionDetectorCommentMutationResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionDetectorComment>>>
    export type ApiVVersionApiVersionDetectorCommentMutationBody = UtahUdotAtspmDataModelsDetectorComment
    export type ApiVVersionApiVersionDetectorCommentMutationError = void

    /**
 * @summary Insert object of specified type
 */
export const useApiVVersionApiVersionDetectorComment = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDetectorComment>>, TError,{data: UtahUdotAtspmDataModelsDetectorComment;params?: ApiVVersionApiVersionDetectorCommentParams}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof apiVVersionApiVersionDetectorComment>>,
        TError,
        {data: UtahUdotAtspmDataModelsDetectorComment;params?: ApiVVersionApiVersionDetectorCommentParams},
        TContext
      > => {

      const mutationOptions = getApiVVersionApiVersionDetectorCommentMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Collection of objects from oData query.
 */
export const apiVVersionApiVersionDetectorCommentCount = (
    params?: ApiVVersionApiVersionDetectorCommentCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsDetectorComment[]>(
      {url: `/api/v1/DetectorComment/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionDetectorCommentCountQueryKey = (params?: ApiVVersionApiVersionDetectorCommentCountParams,) => {
    return [`/api/v1/DetectorComment/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionDetectorCommentCountQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionDetectorCommentCount>>, TError = void>(params?: ApiVVersionApiVersionDetectorCommentCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDetectorCommentCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionDetectorCommentCountQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionDetectorCommentCount>>> = ({ signal }) => apiVVersionApiVersionDetectorCommentCount(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDetectorCommentCount>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionDetectorCommentCountQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionDetectorCommentCount>>>
export type ApiVVersionApiVersionDetectorCommentCountQueryError = void


/**
 * @summary Collection of objects from oData query.
 */

export function useApiVVersionApiVersionDetectorCommentCount<TData = Awaited<ReturnType<typeof apiVVersionApiVersionDetectorCommentCount>>, TError = void>(
 params?: ApiVVersionApiVersionDetectorCommentCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDetectorCommentCount>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionDetectorCommentCountQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Delete object of specified type
 */
export const apiVVersionApiVersionDetectorCommentKey = (
    key: number,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/DetectorComment/${key}`, method: 'DELETE'
    },
      );
    }
  


export const getApiVVersionApiVersionDetectorCommentKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDetectorCommentKey>>, TError,{key: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDetectorCommentKey>>, TError,{key: number}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiVVersionApiVersionDetectorCommentKey>>, {key: number}> = (props) => {
          const {key} = props ?? {};

          return  apiVVersionApiVersionDetectorCommentKey(key,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiVVersionApiVersionDetectorCommentKeyMutationResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionDetectorCommentKey>>>
    
    export type ApiVVersionApiVersionDetectorCommentKeyMutationError = void

    /**
 * @summary Delete object of specified type
 */
export const useApiVVersionApiVersionDetectorCommentKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDetectorCommentKey>>, TError,{key: number}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof apiVVersionApiVersionDetectorCommentKey>>,
        TError,
        {key: number},
        TContext
      > => {

      const mutationOptions = getApiVVersionApiVersionDetectorCommentKeyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Gets all Utah.Udot.Atspm.Data.Models.Device from locationId where Utah.Udot.Atspm.Data.Models.Device.DeviceStatus equals Utah.Udot.Atspm.Data.Enums.DeviceStatus.Active
 */
export const apiVVersionApiVersionDeviceGetActiveDevicesByLocationLocationIdLocationId = (
    locationId: number,
    params?: ApiVVersionApiVersionDeviceGetActiveDevicesByLocationLocationIdLocationIdParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsDevice[]>(
      {url: `/api/v1/Device/GetActiveDevicesByLocation(locationId=${locationId})`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionDeviceGetActiveDevicesByLocationLocationIdLocationIdQueryKey = (locationId: number,
    params?: ApiVVersionApiVersionDeviceGetActiveDevicesByLocationLocationIdLocationIdParams,) => {
    return [`/api/v1/Device/GetActiveDevicesByLocation(locationId=${locationId})`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionDeviceGetActiveDevicesByLocationLocationIdLocationIdQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionDeviceGetActiveDevicesByLocationLocationIdLocationId>>, TError = void>(locationId: number,
    params?: ApiVVersionApiVersionDeviceGetActiveDevicesByLocationLocationIdLocationIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDeviceGetActiveDevicesByLocationLocationIdLocationId>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionDeviceGetActiveDevicesByLocationLocationIdLocationIdQueryKey(locationId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionDeviceGetActiveDevicesByLocationLocationIdLocationId>>> = ({ signal }) => apiVVersionApiVersionDeviceGetActiveDevicesByLocationLocationIdLocationId(locationId,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(locationId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDeviceGetActiveDevicesByLocationLocationIdLocationId>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionDeviceGetActiveDevicesByLocationLocationIdLocationIdQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionDeviceGetActiveDevicesByLocationLocationIdLocationId>>>
export type ApiVVersionApiVersionDeviceGetActiveDevicesByLocationLocationIdLocationIdQueryError = void


/**
 * @summary Gets all Utah.Udot.Atspm.Data.Models.Device from locationId where Utah.Udot.Atspm.Data.Models.Device.DeviceStatus equals Utah.Udot.Atspm.Data.Enums.DeviceStatus.Active
 */

export function useApiVVersionApiVersionDeviceGetActiveDevicesByLocationLocationIdLocationId<TData = Awaited<ReturnType<typeof apiVVersionApiVersionDeviceGetActiveDevicesByLocationLocationIdLocationId>>, TError = void>(
 locationId: number,
    params?: ApiVVersionApiVersionDeviceGetActiveDevicesByLocationLocationIdLocationIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDeviceGetActiveDevicesByLocationLocationIdLocationId>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionDeviceGetActiveDevicesByLocationLocationIdLocationIdQueryOptions(locationId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Gets a count of device type for all active devices Utah.Udot.Atspm.Data.Models.Device where Utah.Udot.Atspm.Data.Models.Device.DeviceStatus equals Utah.Udot.Atspm.Data.Enums.DeviceStatus.Active
 */
export const apiVVersionApiVersionDeviceGetActiveDevicesCount = (
    params?: ApiVVersionApiVersionDeviceGetActiveDevicesCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotATSPMConfigApiModelsDeviceGroup[]>(
      {url: `/api/v1/Device/GetActiveDevicesCount`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionDeviceGetActiveDevicesCountQueryKey = (params?: ApiVVersionApiVersionDeviceGetActiveDevicesCountParams,) => {
    return [`/api/v1/Device/GetActiveDevicesCount`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionDeviceGetActiveDevicesCountQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionDeviceGetActiveDevicesCount>>, TError = void>(params?: ApiVVersionApiVersionDeviceGetActiveDevicesCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDeviceGetActiveDevicesCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionDeviceGetActiveDevicesCountQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionDeviceGetActiveDevicesCount>>> = ({ signal }) => apiVVersionApiVersionDeviceGetActiveDevicesCount(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDeviceGetActiveDevicesCount>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionDeviceGetActiveDevicesCountQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionDeviceGetActiveDevicesCount>>>
export type ApiVVersionApiVersionDeviceGetActiveDevicesCountQueryError = void


/**
 * @summary Gets a count of device type for all active devices Utah.Udot.Atspm.Data.Models.Device where Utah.Udot.Atspm.Data.Models.Device.DeviceStatus equals Utah.Udot.Atspm.Data.Enums.DeviceStatus.Active
 */

export function useApiVVersionApiVersionDeviceGetActiveDevicesCount<TData = Awaited<ReturnType<typeof apiVVersionApiVersionDeviceGetActiveDevicesCount>>, TError = void>(
 params?: ApiVVersionApiVersionDeviceGetActiveDevicesCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDeviceGetActiveDevicesCount>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionDeviceGetActiveDevicesCountQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Insert object of specified type
 */
export const apiVVersionApiVersionDevice = (
    utahUdotAtspmDataModelsDevice: UtahUdotAtspmDataModelsDevice,
    params?: ApiVVersionApiVersionDeviceParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/Device`, method: 'POST',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: utahUdotAtspmDataModelsDevice,
        params
    },
      );
    }
  


export const getApiVVersionApiVersionDeviceMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDevice>>, TError,{data: UtahUdotAtspmDataModelsDevice;params?: ApiVVersionApiVersionDeviceParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDevice>>, TError,{data: UtahUdotAtspmDataModelsDevice;params?: ApiVVersionApiVersionDeviceParams}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiVVersionApiVersionDevice>>, {data: UtahUdotAtspmDataModelsDevice;params?: ApiVVersionApiVersionDeviceParams}> = (props) => {
          const {data,params} = props ?? {};

          return  apiVVersionApiVersionDevice(data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiVVersionApiVersionDeviceMutationResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionDevice>>>
    export type ApiVVersionApiVersionDeviceMutationBody = UtahUdotAtspmDataModelsDevice
    export type ApiVVersionApiVersionDeviceMutationError = void

    /**
 * @summary Insert object of specified type
 */
export const useApiVVersionApiVersionDevice = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDevice>>, TError,{data: UtahUdotAtspmDataModelsDevice;params?: ApiVVersionApiVersionDeviceParams}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof apiVVersionApiVersionDevice>>,
        TError,
        {data: UtahUdotAtspmDataModelsDevice;params?: ApiVVersionApiVersionDeviceParams},
        TContext
      > => {

      const mutationOptions = getApiVVersionApiVersionDeviceMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Collection of objects from oData query.
 */
export const apiVVersionApiVersionDeviceCount = (
    params?: ApiVVersionApiVersionDeviceCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsDevice[]>(
      {url: `/api/v1/Device/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionDeviceCountQueryKey = (params?: ApiVVersionApiVersionDeviceCountParams,) => {
    return [`/api/v1/Device/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionDeviceCountQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionDeviceCount>>, TError = void>(params?: ApiVVersionApiVersionDeviceCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDeviceCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionDeviceCountQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionDeviceCount>>> = ({ signal }) => apiVVersionApiVersionDeviceCount(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDeviceCount>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionDeviceCountQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionDeviceCount>>>
export type ApiVVersionApiVersionDeviceCountQueryError = void


/**
 * @summary Collection of objects from oData query.
 */

export function useApiVVersionApiVersionDeviceCount<TData = Awaited<ReturnType<typeof apiVVersionApiVersionDeviceCount>>, TError = void>(
 params?: ApiVVersionApiVersionDeviceCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDeviceCount>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionDeviceCountQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Delete object of specified type
 */
export const apiVVersionApiVersionDeviceKey = (
    key: number,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/Device/${key}`, method: 'DELETE'
    },
      );
    }
  


export const getApiVVersionApiVersionDeviceKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDeviceKey>>, TError,{key: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDeviceKey>>, TError,{key: number}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiVVersionApiVersionDeviceKey>>, {key: number}> = (props) => {
          const {key} = props ?? {};

          return  apiVVersionApiVersionDeviceKey(key,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiVVersionApiVersionDeviceKeyMutationResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionDeviceKey>>>
    
    export type ApiVVersionApiVersionDeviceKeyMutationError = void

    /**
 * @summary Delete object of specified type
 */
export const useApiVVersionApiVersionDeviceKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDeviceKey>>, TError,{key: number}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof apiVVersionApiVersionDeviceKey>>,
        TError,
        {key: number},
        TContext
      > => {

      const mutationOptions = getApiVVersionApiVersionDeviceKeyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Utah.Udot.Atspm.Data.Models.Device navigation property action
 */
export const apiVVersionApiVersionDeviceConfigurationKeyDevices = (
    key: number,
    params?: ApiVVersionApiVersionDeviceConfigurationKeyDevicesParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsDevice[]>(
      {url: `/api/v1/DeviceConfiguration/${key}/devices`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionDeviceConfigurationKeyDevicesQueryKey = (key: number,
    params?: ApiVVersionApiVersionDeviceConfigurationKeyDevicesParams,) => {
    return [`/api/v1/DeviceConfiguration/${key}/devices`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionDeviceConfigurationKeyDevicesQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionDeviceConfigurationKeyDevices>>, TError = void>(key: number,
    params?: ApiVVersionApiVersionDeviceConfigurationKeyDevicesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDeviceConfigurationKeyDevices>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionDeviceConfigurationKeyDevicesQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionDeviceConfigurationKeyDevices>>> = ({ signal }) => apiVVersionApiVersionDeviceConfigurationKeyDevices(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDeviceConfigurationKeyDevices>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionDeviceConfigurationKeyDevicesQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionDeviceConfigurationKeyDevices>>>
export type ApiVVersionApiVersionDeviceConfigurationKeyDevicesQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.Device navigation property action
 */

export function useApiVVersionApiVersionDeviceConfigurationKeyDevices<TData = Awaited<ReturnType<typeof apiVVersionApiVersionDeviceConfigurationKeyDevices>>, TError = void>(
 key: number,
    params?: ApiVVersionApiVersionDeviceConfigurationKeyDevicesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDeviceConfigurationKeyDevices>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionDeviceConfigurationKeyDevicesQueryOptions(key,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Utah.Udot.Atspm.Data.Models.Device navigation property action
 */
export const apiVVersionApiVersionDeviceConfigurationKeyDevicesCount = (
    key: number,
    params?: ApiVVersionApiVersionDeviceConfigurationKeyDevicesCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsDevice[]>(
      {url: `/api/v1/DeviceConfiguration/${key}/devices/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionDeviceConfigurationKeyDevicesCountQueryKey = (key: number,
    params?: ApiVVersionApiVersionDeviceConfigurationKeyDevicesCountParams,) => {
    return [`/api/v1/DeviceConfiguration/${key}/devices/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionDeviceConfigurationKeyDevicesCountQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionDeviceConfigurationKeyDevicesCount>>, TError = void>(key: number,
    params?: ApiVVersionApiVersionDeviceConfigurationKeyDevicesCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDeviceConfigurationKeyDevicesCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionDeviceConfigurationKeyDevicesCountQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionDeviceConfigurationKeyDevicesCount>>> = ({ signal }) => apiVVersionApiVersionDeviceConfigurationKeyDevicesCount(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDeviceConfigurationKeyDevicesCount>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionDeviceConfigurationKeyDevicesCountQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionDeviceConfigurationKeyDevicesCount>>>
export type ApiVVersionApiVersionDeviceConfigurationKeyDevicesCountQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.Device navigation property action
 */

export function useApiVVersionApiVersionDeviceConfigurationKeyDevicesCount<TData = Awaited<ReturnType<typeof apiVVersionApiVersionDeviceConfigurationKeyDevicesCount>>, TError = void>(
 key: number,
    params?: ApiVVersionApiVersionDeviceConfigurationKeyDevicesCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDeviceConfigurationKeyDevicesCount>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionDeviceConfigurationKeyDevicesCountQueryOptions(key,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Insert object of specified type
 */
export const apiVVersionApiVersionDeviceConfiguration = (
    utahUdotAtspmDataModelsDeviceConfiguration: UtahUdotAtspmDataModelsDeviceConfiguration,
    params?: ApiVVersionApiVersionDeviceConfigurationParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/DeviceConfiguration`, method: 'POST',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: utahUdotAtspmDataModelsDeviceConfiguration,
        params
    },
      );
    }
  


export const getApiVVersionApiVersionDeviceConfigurationMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDeviceConfiguration>>, TError,{data: UtahUdotAtspmDataModelsDeviceConfiguration;params?: ApiVVersionApiVersionDeviceConfigurationParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDeviceConfiguration>>, TError,{data: UtahUdotAtspmDataModelsDeviceConfiguration;params?: ApiVVersionApiVersionDeviceConfigurationParams}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiVVersionApiVersionDeviceConfiguration>>, {data: UtahUdotAtspmDataModelsDeviceConfiguration;params?: ApiVVersionApiVersionDeviceConfigurationParams}> = (props) => {
          const {data,params} = props ?? {};

          return  apiVVersionApiVersionDeviceConfiguration(data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiVVersionApiVersionDeviceConfigurationMutationResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionDeviceConfiguration>>>
    export type ApiVVersionApiVersionDeviceConfigurationMutationBody = UtahUdotAtspmDataModelsDeviceConfiguration
    export type ApiVVersionApiVersionDeviceConfigurationMutationError = void

    /**
 * @summary Insert object of specified type
 */
export const useApiVVersionApiVersionDeviceConfiguration = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDeviceConfiguration>>, TError,{data: UtahUdotAtspmDataModelsDeviceConfiguration;params?: ApiVVersionApiVersionDeviceConfigurationParams}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof apiVVersionApiVersionDeviceConfiguration>>,
        TError,
        {data: UtahUdotAtspmDataModelsDeviceConfiguration;params?: ApiVVersionApiVersionDeviceConfigurationParams},
        TContext
      > => {

      const mutationOptions = getApiVVersionApiVersionDeviceConfigurationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Collection of objects from oData query.
 */
export const apiVVersionApiVersionDeviceConfigurationCount = (
    params?: ApiVVersionApiVersionDeviceConfigurationCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsDeviceConfiguration[]>(
      {url: `/api/v1/DeviceConfiguration/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionDeviceConfigurationCountQueryKey = (params?: ApiVVersionApiVersionDeviceConfigurationCountParams,) => {
    return [`/api/v1/DeviceConfiguration/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionDeviceConfigurationCountQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionDeviceConfigurationCount>>, TError = void>(params?: ApiVVersionApiVersionDeviceConfigurationCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDeviceConfigurationCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionDeviceConfigurationCountQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionDeviceConfigurationCount>>> = ({ signal }) => apiVVersionApiVersionDeviceConfigurationCount(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDeviceConfigurationCount>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionDeviceConfigurationCountQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionDeviceConfigurationCount>>>
export type ApiVVersionApiVersionDeviceConfigurationCountQueryError = void


/**
 * @summary Collection of objects from oData query.
 */

export function useApiVVersionApiVersionDeviceConfigurationCount<TData = Awaited<ReturnType<typeof apiVVersionApiVersionDeviceConfigurationCount>>, TError = void>(
 params?: ApiVVersionApiVersionDeviceConfigurationCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDeviceConfigurationCount>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionDeviceConfigurationCountQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Delete object of specified type
 */
export const apiVVersionApiVersionDeviceConfigurationKey = (
    key: number,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/DeviceConfiguration/${key}`, method: 'DELETE'
    },
      );
    }
  


export const getApiVVersionApiVersionDeviceConfigurationKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDeviceConfigurationKey>>, TError,{key: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDeviceConfigurationKey>>, TError,{key: number}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiVVersionApiVersionDeviceConfigurationKey>>, {key: number}> = (props) => {
          const {key} = props ?? {};

          return  apiVVersionApiVersionDeviceConfigurationKey(key,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiVVersionApiVersionDeviceConfigurationKeyMutationResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionDeviceConfigurationKey>>>
    
    export type ApiVVersionApiVersionDeviceConfigurationKeyMutationError = void

    /**
 * @summary Delete object of specified type
 */
export const useApiVVersionApiVersionDeviceConfigurationKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDeviceConfigurationKey>>, TError,{key: number}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof apiVVersionApiVersionDeviceConfigurationKey>>,
        TError,
        {key: number},
        TContext
      > => {

      const mutationOptions = getApiVVersionApiVersionDeviceConfigurationKeyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Utah.Udot.Atspm.Data.Models.Approach navigation property action
 */
export const apiVVersionApiVersionDirectionTypeKeyApproaches = (
    key: UtahUdotAtspmDataEnumsDirectionTypes,
    params?: ApiVVersionApiVersionDirectionTypeKeyApproachesParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsApproach[]>(
      {url: `/api/v1/DirectionType/${key}/approaches`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionDirectionTypeKeyApproachesQueryKey = (key: UtahUdotAtspmDataEnumsDirectionTypes,
    params?: ApiVVersionApiVersionDirectionTypeKeyApproachesParams,) => {
    return [`/api/v1/DirectionType/${key}/approaches`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionDirectionTypeKeyApproachesQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionDirectionTypeKeyApproaches>>, TError = void>(key: UtahUdotAtspmDataEnumsDirectionTypes,
    params?: ApiVVersionApiVersionDirectionTypeKeyApproachesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDirectionTypeKeyApproaches>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionDirectionTypeKeyApproachesQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionDirectionTypeKeyApproaches>>> = ({ signal }) => apiVVersionApiVersionDirectionTypeKeyApproaches(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDirectionTypeKeyApproaches>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionDirectionTypeKeyApproachesQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionDirectionTypeKeyApproaches>>>
export type ApiVVersionApiVersionDirectionTypeKeyApproachesQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.Approach navigation property action
 */

export function useApiVVersionApiVersionDirectionTypeKeyApproaches<TData = Awaited<ReturnType<typeof apiVVersionApiVersionDirectionTypeKeyApproaches>>, TError = void>(
 key: UtahUdotAtspmDataEnumsDirectionTypes,
    params?: ApiVVersionApiVersionDirectionTypeKeyApproachesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDirectionTypeKeyApproaches>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionDirectionTypeKeyApproachesQueryOptions(key,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Utah.Udot.Atspm.Data.Models.Approach navigation property action
 */
export const apiVVersionApiVersionDirectionTypeKeyApproachesCount = (
    key: UtahUdotAtspmDataEnumsDirectionTypes,
    params?: ApiVVersionApiVersionDirectionTypeKeyApproachesCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsApproach[]>(
      {url: `/api/v1/DirectionType/${key}/approaches/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionDirectionTypeKeyApproachesCountQueryKey = (key: UtahUdotAtspmDataEnumsDirectionTypes,
    params?: ApiVVersionApiVersionDirectionTypeKeyApproachesCountParams,) => {
    return [`/api/v1/DirectionType/${key}/approaches/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionDirectionTypeKeyApproachesCountQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionDirectionTypeKeyApproachesCount>>, TError = void>(key: UtahUdotAtspmDataEnumsDirectionTypes,
    params?: ApiVVersionApiVersionDirectionTypeKeyApproachesCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDirectionTypeKeyApproachesCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionDirectionTypeKeyApproachesCountQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionDirectionTypeKeyApproachesCount>>> = ({ signal }) => apiVVersionApiVersionDirectionTypeKeyApproachesCount(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDirectionTypeKeyApproachesCount>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionDirectionTypeKeyApproachesCountQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionDirectionTypeKeyApproachesCount>>>
export type ApiVVersionApiVersionDirectionTypeKeyApproachesCountQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.Approach navigation property action
 */

export function useApiVVersionApiVersionDirectionTypeKeyApproachesCount<TData = Awaited<ReturnType<typeof apiVVersionApiVersionDirectionTypeKeyApproachesCount>>, TError = void>(
 key: UtahUdotAtspmDataEnumsDirectionTypes,
    params?: ApiVVersionApiVersionDirectionTypeKeyApproachesCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDirectionTypeKeyApproachesCount>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionDirectionTypeKeyApproachesCountQueryOptions(key,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Utah.Udot.Atspm.Data.Models.RouteLocation navigation property action
 */
export const apiVVersionApiVersionDirectionTypeKeyPrimaryDirections = (
    key: UtahUdotAtspmDataEnumsDirectionTypes,
    params?: ApiVVersionApiVersionDirectionTypeKeyPrimaryDirectionsParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsRouteLocation[]>(
      {url: `/api/v1/DirectionType/${key}/primaryDirections`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionDirectionTypeKeyPrimaryDirectionsQueryKey = (key: UtahUdotAtspmDataEnumsDirectionTypes,
    params?: ApiVVersionApiVersionDirectionTypeKeyPrimaryDirectionsParams,) => {
    return [`/api/v1/DirectionType/${key}/primaryDirections`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionDirectionTypeKeyPrimaryDirectionsQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionDirectionTypeKeyPrimaryDirections>>, TError = void>(key: UtahUdotAtspmDataEnumsDirectionTypes,
    params?: ApiVVersionApiVersionDirectionTypeKeyPrimaryDirectionsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDirectionTypeKeyPrimaryDirections>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionDirectionTypeKeyPrimaryDirectionsQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionDirectionTypeKeyPrimaryDirections>>> = ({ signal }) => apiVVersionApiVersionDirectionTypeKeyPrimaryDirections(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDirectionTypeKeyPrimaryDirections>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionDirectionTypeKeyPrimaryDirectionsQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionDirectionTypeKeyPrimaryDirections>>>
export type ApiVVersionApiVersionDirectionTypeKeyPrimaryDirectionsQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.RouteLocation navigation property action
 */

export function useApiVVersionApiVersionDirectionTypeKeyPrimaryDirections<TData = Awaited<ReturnType<typeof apiVVersionApiVersionDirectionTypeKeyPrimaryDirections>>, TError = void>(
 key: UtahUdotAtspmDataEnumsDirectionTypes,
    params?: ApiVVersionApiVersionDirectionTypeKeyPrimaryDirectionsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDirectionTypeKeyPrimaryDirections>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionDirectionTypeKeyPrimaryDirectionsQueryOptions(key,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Utah.Udot.Atspm.Data.Models.RouteLocation navigation property action
 */
export const apiVVersionApiVersionDirectionTypeKeyPrimaryDirectionsCount = (
    key: UtahUdotAtspmDataEnumsDirectionTypes,
    params?: ApiVVersionApiVersionDirectionTypeKeyPrimaryDirectionsCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsRouteLocation[]>(
      {url: `/api/v1/DirectionType/${key}/primaryDirections/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionDirectionTypeKeyPrimaryDirectionsCountQueryKey = (key: UtahUdotAtspmDataEnumsDirectionTypes,
    params?: ApiVVersionApiVersionDirectionTypeKeyPrimaryDirectionsCountParams,) => {
    return [`/api/v1/DirectionType/${key}/primaryDirections/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionDirectionTypeKeyPrimaryDirectionsCountQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionDirectionTypeKeyPrimaryDirectionsCount>>, TError = void>(key: UtahUdotAtspmDataEnumsDirectionTypes,
    params?: ApiVVersionApiVersionDirectionTypeKeyPrimaryDirectionsCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDirectionTypeKeyPrimaryDirectionsCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionDirectionTypeKeyPrimaryDirectionsCountQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionDirectionTypeKeyPrimaryDirectionsCount>>> = ({ signal }) => apiVVersionApiVersionDirectionTypeKeyPrimaryDirectionsCount(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDirectionTypeKeyPrimaryDirectionsCount>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionDirectionTypeKeyPrimaryDirectionsCountQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionDirectionTypeKeyPrimaryDirectionsCount>>>
export type ApiVVersionApiVersionDirectionTypeKeyPrimaryDirectionsCountQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.RouteLocation navigation property action
 */

export function useApiVVersionApiVersionDirectionTypeKeyPrimaryDirectionsCount<TData = Awaited<ReturnType<typeof apiVVersionApiVersionDirectionTypeKeyPrimaryDirectionsCount>>, TError = void>(
 key: UtahUdotAtspmDataEnumsDirectionTypes,
    params?: ApiVVersionApiVersionDirectionTypeKeyPrimaryDirectionsCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDirectionTypeKeyPrimaryDirectionsCount>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionDirectionTypeKeyPrimaryDirectionsCountQueryOptions(key,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Utah.Udot.Atspm.Data.Models.RouteLocation navigation property action
 */
export const apiVVersionApiVersionDirectionTypeKeyOpposingDirections = (
    key: UtahUdotAtspmDataEnumsDirectionTypes,
    params?: ApiVVersionApiVersionDirectionTypeKeyOpposingDirectionsParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsRouteLocation[]>(
      {url: `/api/v1/DirectionType/${key}/opposingDirections`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionDirectionTypeKeyOpposingDirectionsQueryKey = (key: UtahUdotAtspmDataEnumsDirectionTypes,
    params?: ApiVVersionApiVersionDirectionTypeKeyOpposingDirectionsParams,) => {
    return [`/api/v1/DirectionType/${key}/opposingDirections`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionDirectionTypeKeyOpposingDirectionsQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionDirectionTypeKeyOpposingDirections>>, TError = void>(key: UtahUdotAtspmDataEnumsDirectionTypes,
    params?: ApiVVersionApiVersionDirectionTypeKeyOpposingDirectionsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDirectionTypeKeyOpposingDirections>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionDirectionTypeKeyOpposingDirectionsQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionDirectionTypeKeyOpposingDirections>>> = ({ signal }) => apiVVersionApiVersionDirectionTypeKeyOpposingDirections(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDirectionTypeKeyOpposingDirections>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionDirectionTypeKeyOpposingDirectionsQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionDirectionTypeKeyOpposingDirections>>>
export type ApiVVersionApiVersionDirectionTypeKeyOpposingDirectionsQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.RouteLocation navigation property action
 */

export function useApiVVersionApiVersionDirectionTypeKeyOpposingDirections<TData = Awaited<ReturnType<typeof apiVVersionApiVersionDirectionTypeKeyOpposingDirections>>, TError = void>(
 key: UtahUdotAtspmDataEnumsDirectionTypes,
    params?: ApiVVersionApiVersionDirectionTypeKeyOpposingDirectionsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDirectionTypeKeyOpposingDirections>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionDirectionTypeKeyOpposingDirectionsQueryOptions(key,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Utah.Udot.Atspm.Data.Models.RouteLocation navigation property action
 */
export const apiVVersionApiVersionDirectionTypeKeyOpposingDirectionsCount = (
    key: UtahUdotAtspmDataEnumsDirectionTypes,
    params?: ApiVVersionApiVersionDirectionTypeKeyOpposingDirectionsCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsRouteLocation[]>(
      {url: `/api/v1/DirectionType/${key}/opposingDirections/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionDirectionTypeKeyOpposingDirectionsCountQueryKey = (key: UtahUdotAtspmDataEnumsDirectionTypes,
    params?: ApiVVersionApiVersionDirectionTypeKeyOpposingDirectionsCountParams,) => {
    return [`/api/v1/DirectionType/${key}/opposingDirections/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionDirectionTypeKeyOpposingDirectionsCountQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionDirectionTypeKeyOpposingDirectionsCount>>, TError = void>(key: UtahUdotAtspmDataEnumsDirectionTypes,
    params?: ApiVVersionApiVersionDirectionTypeKeyOpposingDirectionsCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDirectionTypeKeyOpposingDirectionsCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionDirectionTypeKeyOpposingDirectionsCountQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionDirectionTypeKeyOpposingDirectionsCount>>> = ({ signal }) => apiVVersionApiVersionDirectionTypeKeyOpposingDirectionsCount(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDirectionTypeKeyOpposingDirectionsCount>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionDirectionTypeKeyOpposingDirectionsCountQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionDirectionTypeKeyOpposingDirectionsCount>>>
export type ApiVVersionApiVersionDirectionTypeKeyOpposingDirectionsCountQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.RouteLocation navigation property action
 */

export function useApiVVersionApiVersionDirectionTypeKeyOpposingDirectionsCount<TData = Awaited<ReturnType<typeof apiVVersionApiVersionDirectionTypeKeyOpposingDirectionsCount>>, TError = void>(
 key: UtahUdotAtspmDataEnumsDirectionTypes,
    params?: ApiVVersionApiVersionDirectionTypeKeyOpposingDirectionsCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDirectionTypeKeyOpposingDirectionsCount>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionDirectionTypeKeyOpposingDirectionsCountQueryOptions(key,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Insert object of specified type
 */
export const apiVVersionApiVersionDirectionType = (
    utahUdotAtspmDataModelsDirectionType: UtahUdotAtspmDataModelsDirectionType,
    params?: ApiVVersionApiVersionDirectionTypeParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/DirectionType`, method: 'POST',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: utahUdotAtspmDataModelsDirectionType,
        params
    },
      );
    }
  


export const getApiVVersionApiVersionDirectionTypeMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDirectionType>>, TError,{data: UtahUdotAtspmDataModelsDirectionType;params?: ApiVVersionApiVersionDirectionTypeParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDirectionType>>, TError,{data: UtahUdotAtspmDataModelsDirectionType;params?: ApiVVersionApiVersionDirectionTypeParams}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiVVersionApiVersionDirectionType>>, {data: UtahUdotAtspmDataModelsDirectionType;params?: ApiVVersionApiVersionDirectionTypeParams}> = (props) => {
          const {data,params} = props ?? {};

          return  apiVVersionApiVersionDirectionType(data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiVVersionApiVersionDirectionTypeMutationResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionDirectionType>>>
    export type ApiVVersionApiVersionDirectionTypeMutationBody = UtahUdotAtspmDataModelsDirectionType
    export type ApiVVersionApiVersionDirectionTypeMutationError = void

    /**
 * @summary Insert object of specified type
 */
export const useApiVVersionApiVersionDirectionType = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDirectionType>>, TError,{data: UtahUdotAtspmDataModelsDirectionType;params?: ApiVVersionApiVersionDirectionTypeParams}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof apiVVersionApiVersionDirectionType>>,
        TError,
        {data: UtahUdotAtspmDataModelsDirectionType;params?: ApiVVersionApiVersionDirectionTypeParams},
        TContext
      > => {

      const mutationOptions = getApiVVersionApiVersionDirectionTypeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Collection of objects from oData query.
 */
export const apiVVersionApiVersionDirectionTypeCount = (
    params?: ApiVVersionApiVersionDirectionTypeCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsDirectionType[]>(
      {url: `/api/v1/DirectionType/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionDirectionTypeCountQueryKey = (params?: ApiVVersionApiVersionDirectionTypeCountParams,) => {
    return [`/api/v1/DirectionType/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionDirectionTypeCountQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionDirectionTypeCount>>, TError = void>(params?: ApiVVersionApiVersionDirectionTypeCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDirectionTypeCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionDirectionTypeCountQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionDirectionTypeCount>>> = ({ signal }) => apiVVersionApiVersionDirectionTypeCount(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDirectionTypeCount>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionDirectionTypeCountQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionDirectionTypeCount>>>
export type ApiVVersionApiVersionDirectionTypeCountQueryError = void


/**
 * @summary Collection of objects from oData query.
 */

export function useApiVVersionApiVersionDirectionTypeCount<TData = Awaited<ReturnType<typeof apiVVersionApiVersionDirectionTypeCount>>, TError = void>(
 params?: ApiVVersionApiVersionDirectionTypeCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDirectionTypeCount>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionDirectionTypeCountQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Delete object of specified type
 */
export const apiVVersionApiVersionDirectionTypeKey = (
    key: UtahUdotAtspmDataEnumsDirectionTypes,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/DirectionType/${key}`, method: 'DELETE'
    },
      );
    }
  


export const getApiVVersionApiVersionDirectionTypeKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDirectionTypeKey>>, TError,{key: UtahUdotAtspmDataEnumsDirectionTypes}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDirectionTypeKey>>, TError,{key: UtahUdotAtspmDataEnumsDirectionTypes}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiVVersionApiVersionDirectionTypeKey>>, {key: UtahUdotAtspmDataEnumsDirectionTypes}> = (props) => {
          const {key} = props ?? {};

          return  apiVVersionApiVersionDirectionTypeKey(key,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiVVersionApiVersionDirectionTypeKeyMutationResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionDirectionTypeKey>>>
    
    export type ApiVVersionApiVersionDirectionTypeKeyMutationError = void

    /**
 * @summary Delete object of specified type
 */
export const useApiVVersionApiVersionDirectionTypeKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionDirectionTypeKey>>, TError,{key: UtahUdotAtspmDataEnumsDirectionTypes}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof apiVVersionApiVersionDirectionTypeKey>>,
        TError,
        {key: UtahUdotAtspmDataEnumsDirectionTypes},
        TContext
      > => {

      const mutationOptions = getApiVVersionApiVersionDirectionTypeKeyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Collection of objects from oData query.
 */
export const apiVVersionApiVersionFaq = (
    params?: ApiVVersionApiVersionFaqParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsFaq[]>(
      {url: `/api/v1/Faq`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionFaqQueryKey = (params?: ApiVVersionApiVersionFaqParams,) => {
    return [`/api/v1/Faq`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionFaqQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionFaq>>, TError = void>(params?: ApiVVersionApiVersionFaqParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionFaq>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionFaqQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionFaq>>> = ({ signal }) => apiVVersionApiVersionFaq(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionFaq>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionFaqQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionFaq>>>
export type ApiVVersionApiVersionFaqQueryError = void


/**
 * @summary Collection of objects from oData query.
 */

export function useApiVVersionApiVersionFaq<TData = Awaited<ReturnType<typeof apiVVersionApiVersionFaq>>, TError = void>(
 params?: ApiVVersionApiVersionFaqParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionFaq>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionFaqQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const apiVVersionApiVersionFaqKey = (
    key: number,
    utahUdotAtspmDataModelsFaq: UtahUdotAtspmDataModelsFaq,
    params?: ApiVVersionApiVersionFaqKeyParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/Faq/${key}`, method: 'PUT',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: utahUdotAtspmDataModelsFaq,
        params
    },
      );
    }
  


export const getApiVVersionApiVersionFaqKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionFaqKey>>, TError,{key: number;data: UtahUdotAtspmDataModelsFaq;params?: ApiVVersionApiVersionFaqKeyParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionFaqKey>>, TError,{key: number;data: UtahUdotAtspmDataModelsFaq;params?: ApiVVersionApiVersionFaqKeyParams}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiVVersionApiVersionFaqKey>>, {key: number;data: UtahUdotAtspmDataModelsFaq;params?: ApiVVersionApiVersionFaqKeyParams}> = (props) => {
          const {key,data,params} = props ?? {};

          return  apiVVersionApiVersionFaqKey(key,data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiVVersionApiVersionFaqKeyMutationResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionFaqKey>>>
    export type ApiVVersionApiVersionFaqKeyMutationBody = UtahUdotAtspmDataModelsFaq
    export type ApiVVersionApiVersionFaqKeyMutationError = void

    export const useApiVVersionApiVersionFaqKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionFaqKey>>, TError,{key: number;data: UtahUdotAtspmDataModelsFaq;params?: ApiVVersionApiVersionFaqKeyParams}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof apiVVersionApiVersionFaqKey>>,
        TError,
        {key: number;data: UtahUdotAtspmDataModelsFaq;params?: ApiVVersionApiVersionFaqKeyParams},
        TContext
      > => {

      const mutationOptions = getApiVVersionApiVersionFaqKeyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Collection of objects from oData query.
 */
export const apiVVersionApiVersionFaqCount = (
    params?: ApiVVersionApiVersionFaqCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsFaq[]>(
      {url: `/api/v1/Faq/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionFaqCountQueryKey = (params?: ApiVVersionApiVersionFaqCountParams,) => {
    return [`/api/v1/Faq/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionFaqCountQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionFaqCount>>, TError = void>(params?: ApiVVersionApiVersionFaqCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionFaqCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionFaqCountQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionFaqCount>>> = ({ signal }) => apiVVersionApiVersionFaqCount(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionFaqCount>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionFaqCountQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionFaqCount>>>
export type ApiVVersionApiVersionFaqCountQueryError = void


/**
 * @summary Collection of objects from oData query.
 */

export function useApiVVersionApiVersionFaqCount<TData = Awaited<ReturnType<typeof apiVVersionApiVersionFaqCount>>, TError = void>(
 params?: ApiVVersionApiVersionFaqCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionFaqCount>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionFaqCountQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Utah.Udot.Atspm.Data.Models.Location navigation property action
 */
export const apiVVersionApiVersionJurisdictionKeyLocations = (
    key: number,
    params?: ApiVVersionApiVersionJurisdictionKeyLocationsParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsLocation[]>(
      {url: `/api/v1/Jurisdiction/${key}/locations`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionJurisdictionKeyLocationsQueryKey = (key: number,
    params?: ApiVVersionApiVersionJurisdictionKeyLocationsParams,) => {
    return [`/api/v1/Jurisdiction/${key}/locations`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionJurisdictionKeyLocationsQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionJurisdictionKeyLocations>>, TError = void>(key: number,
    params?: ApiVVersionApiVersionJurisdictionKeyLocationsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionJurisdictionKeyLocations>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionJurisdictionKeyLocationsQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionJurisdictionKeyLocations>>> = ({ signal }) => apiVVersionApiVersionJurisdictionKeyLocations(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionJurisdictionKeyLocations>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionJurisdictionKeyLocationsQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionJurisdictionKeyLocations>>>
export type ApiVVersionApiVersionJurisdictionKeyLocationsQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.Location navigation property action
 */

export function useApiVVersionApiVersionJurisdictionKeyLocations<TData = Awaited<ReturnType<typeof apiVVersionApiVersionJurisdictionKeyLocations>>, TError = void>(
 key: number,
    params?: ApiVVersionApiVersionJurisdictionKeyLocationsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionJurisdictionKeyLocations>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionJurisdictionKeyLocationsQueryOptions(key,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Utah.Udot.Atspm.Data.Models.Location navigation property action
 */
export const apiVVersionApiVersionJurisdictionKeyLocationsCount = (
    key: number,
    params?: ApiVVersionApiVersionJurisdictionKeyLocationsCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsLocation[]>(
      {url: `/api/v1/Jurisdiction/${key}/locations/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionJurisdictionKeyLocationsCountQueryKey = (key: number,
    params?: ApiVVersionApiVersionJurisdictionKeyLocationsCountParams,) => {
    return [`/api/v1/Jurisdiction/${key}/locations/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionJurisdictionKeyLocationsCountQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionJurisdictionKeyLocationsCount>>, TError = void>(key: number,
    params?: ApiVVersionApiVersionJurisdictionKeyLocationsCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionJurisdictionKeyLocationsCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionJurisdictionKeyLocationsCountQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionJurisdictionKeyLocationsCount>>> = ({ signal }) => apiVVersionApiVersionJurisdictionKeyLocationsCount(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionJurisdictionKeyLocationsCount>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionJurisdictionKeyLocationsCountQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionJurisdictionKeyLocationsCount>>>
export type ApiVVersionApiVersionJurisdictionKeyLocationsCountQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.Location navigation property action
 */

export function useApiVVersionApiVersionJurisdictionKeyLocationsCount<TData = Awaited<ReturnType<typeof apiVVersionApiVersionJurisdictionKeyLocationsCount>>, TError = void>(
 key: number,
    params?: ApiVVersionApiVersionJurisdictionKeyLocationsCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionJurisdictionKeyLocationsCount>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionJurisdictionKeyLocationsCountQueryOptions(key,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Collection of objects from oData query.
 */
export const apiVVersionApiVersionJurisdiction = (
    params?: ApiVVersionApiVersionJurisdictionParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsJurisdiction[]>(
      {url: `/api/v1/Jurisdiction`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionJurisdictionQueryKey = (params?: ApiVVersionApiVersionJurisdictionParams,) => {
    return [`/api/v1/Jurisdiction`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionJurisdictionQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionJurisdiction>>, TError = void>(params?: ApiVVersionApiVersionJurisdictionParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionJurisdiction>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionJurisdictionQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionJurisdiction>>> = ({ signal }) => apiVVersionApiVersionJurisdiction(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionJurisdiction>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionJurisdictionQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionJurisdiction>>>
export type ApiVVersionApiVersionJurisdictionQueryError = void


/**
 * @summary Collection of objects from oData query.
 */

export function useApiVVersionApiVersionJurisdiction<TData = Awaited<ReturnType<typeof apiVVersionApiVersionJurisdiction>>, TError = void>(
 params?: ApiVVersionApiVersionJurisdictionParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionJurisdiction>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionJurisdictionQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const apiVVersionApiVersionJurisdictionKey = (
    key: number,
    utahUdotAtspmDataModelsJurisdiction: UtahUdotAtspmDataModelsJurisdiction,
    params?: ApiVVersionApiVersionJurisdictionKeyParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/Jurisdiction/${key}`, method: 'PUT',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: utahUdotAtspmDataModelsJurisdiction,
        params
    },
      );
    }
  


export const getApiVVersionApiVersionJurisdictionKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionJurisdictionKey>>, TError,{key: number;data: UtahUdotAtspmDataModelsJurisdiction;params?: ApiVVersionApiVersionJurisdictionKeyParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionJurisdictionKey>>, TError,{key: number;data: UtahUdotAtspmDataModelsJurisdiction;params?: ApiVVersionApiVersionJurisdictionKeyParams}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiVVersionApiVersionJurisdictionKey>>, {key: number;data: UtahUdotAtspmDataModelsJurisdiction;params?: ApiVVersionApiVersionJurisdictionKeyParams}> = (props) => {
          const {key,data,params} = props ?? {};

          return  apiVVersionApiVersionJurisdictionKey(key,data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiVVersionApiVersionJurisdictionKeyMutationResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionJurisdictionKey>>>
    export type ApiVVersionApiVersionJurisdictionKeyMutationBody = UtahUdotAtspmDataModelsJurisdiction
    export type ApiVVersionApiVersionJurisdictionKeyMutationError = void

    export const useApiVVersionApiVersionJurisdictionKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionJurisdictionKey>>, TError,{key: number;data: UtahUdotAtspmDataModelsJurisdiction;params?: ApiVVersionApiVersionJurisdictionKeyParams}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof apiVVersionApiVersionJurisdictionKey>>,
        TError,
        {key: number;data: UtahUdotAtspmDataModelsJurisdiction;params?: ApiVVersionApiVersionJurisdictionKeyParams},
        TContext
      > => {

      const mutationOptions = getApiVVersionApiVersionJurisdictionKeyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Collection of objects from oData query.
 */
export const apiVVersionApiVersionJurisdictionCount = (
    params?: ApiVVersionApiVersionJurisdictionCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsJurisdiction[]>(
      {url: `/api/v1/Jurisdiction/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionJurisdictionCountQueryKey = (params?: ApiVVersionApiVersionJurisdictionCountParams,) => {
    return [`/api/v1/Jurisdiction/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionJurisdictionCountQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionJurisdictionCount>>, TError = void>(params?: ApiVVersionApiVersionJurisdictionCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionJurisdictionCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionJurisdictionCountQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionJurisdictionCount>>> = ({ signal }) => apiVVersionApiVersionJurisdictionCount(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionJurisdictionCount>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionJurisdictionCountQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionJurisdictionCount>>>
export type ApiVVersionApiVersionJurisdictionCountQueryError = void


/**
 * @summary Collection of objects from oData query.
 */

export function useApiVVersionApiVersionJurisdictionCount<TData = Awaited<ReturnType<typeof apiVVersionApiVersionJurisdictionCount>>, TError = void>(
 params?: ApiVVersionApiVersionJurisdictionCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionJurisdictionCount>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionJurisdictionCountQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Utah.Udot.Atspm.Data.Models.Approach navigation property action
 */
export const apiVVersionApiVersionLocationKeyApproaches = (
    key: number,
    params?: ApiVVersionApiVersionLocationKeyApproachesParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsApproach[]>(
      {url: `/api/v1/Location/${key}/approaches`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionLocationKeyApproachesQueryKey = (key: number,
    params?: ApiVVersionApiVersionLocationKeyApproachesParams,) => {
    return [`/api/v1/Location/${key}/approaches`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionLocationKeyApproachesQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionLocationKeyApproaches>>, TError = void>(key: number,
    params?: ApiVVersionApiVersionLocationKeyApproachesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocationKeyApproaches>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionLocationKeyApproachesQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionLocationKeyApproaches>>> = ({ signal }) => apiVVersionApiVersionLocationKeyApproaches(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocationKeyApproaches>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionLocationKeyApproachesQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionLocationKeyApproaches>>>
export type ApiVVersionApiVersionLocationKeyApproachesQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.Approach navigation property action
 */

export function useApiVVersionApiVersionLocationKeyApproaches<TData = Awaited<ReturnType<typeof apiVVersionApiVersionLocationKeyApproaches>>, TError = void>(
 key: number,
    params?: ApiVVersionApiVersionLocationKeyApproachesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocationKeyApproaches>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionLocationKeyApproachesQueryOptions(key,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Utah.Udot.Atspm.Data.Models.Approach navigation property action
 */
export const apiVVersionApiVersionLocationKeyApproachesCount = (
    key: number,
    params?: ApiVVersionApiVersionLocationKeyApproachesCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsApproach[]>(
      {url: `/api/v1/Location/${key}/approaches/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionLocationKeyApproachesCountQueryKey = (key: number,
    params?: ApiVVersionApiVersionLocationKeyApproachesCountParams,) => {
    return [`/api/v1/Location/${key}/approaches/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionLocationKeyApproachesCountQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionLocationKeyApproachesCount>>, TError = void>(key: number,
    params?: ApiVVersionApiVersionLocationKeyApproachesCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocationKeyApproachesCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionLocationKeyApproachesCountQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionLocationKeyApproachesCount>>> = ({ signal }) => apiVVersionApiVersionLocationKeyApproachesCount(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocationKeyApproachesCount>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionLocationKeyApproachesCountQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionLocationKeyApproachesCount>>>
export type ApiVVersionApiVersionLocationKeyApproachesCountQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.Approach navigation property action
 */

export function useApiVVersionApiVersionLocationKeyApproachesCount<TData = Awaited<ReturnType<typeof apiVVersionApiVersionLocationKeyApproachesCount>>, TError = void>(
 key: number,
    params?: ApiVVersionApiVersionLocationKeyApproachesCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocationKeyApproachesCount>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionLocationKeyApproachesCountQueryOptions(key,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Utah.Udot.Atspm.Data.Models.Area navigation property action
 */
export const apiVVersionApiVersionLocationKeyAreas = (
    key: number,
    params?: ApiVVersionApiVersionLocationKeyAreasParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsArea[]>(
      {url: `/api/v1/Location/${key}/areas`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionLocationKeyAreasQueryKey = (key: number,
    params?: ApiVVersionApiVersionLocationKeyAreasParams,) => {
    return [`/api/v1/Location/${key}/areas`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionLocationKeyAreasQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionLocationKeyAreas>>, TError = void>(key: number,
    params?: ApiVVersionApiVersionLocationKeyAreasParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocationKeyAreas>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionLocationKeyAreasQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionLocationKeyAreas>>> = ({ signal }) => apiVVersionApiVersionLocationKeyAreas(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocationKeyAreas>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionLocationKeyAreasQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionLocationKeyAreas>>>
export type ApiVVersionApiVersionLocationKeyAreasQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.Area navigation property action
 */

export function useApiVVersionApiVersionLocationKeyAreas<TData = Awaited<ReturnType<typeof apiVVersionApiVersionLocationKeyAreas>>, TError = void>(
 key: number,
    params?: ApiVVersionApiVersionLocationKeyAreasParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocationKeyAreas>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionLocationKeyAreasQueryOptions(key,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Utah.Udot.Atspm.Data.Models.Area navigation property action
 */
export const apiVVersionApiVersionLocationKeyAreasCount = (
    key: number,
    params?: ApiVVersionApiVersionLocationKeyAreasCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsArea[]>(
      {url: `/api/v1/Location/${key}/areas/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionLocationKeyAreasCountQueryKey = (key: number,
    params?: ApiVVersionApiVersionLocationKeyAreasCountParams,) => {
    return [`/api/v1/Location/${key}/areas/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionLocationKeyAreasCountQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionLocationKeyAreasCount>>, TError = void>(key: number,
    params?: ApiVVersionApiVersionLocationKeyAreasCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocationKeyAreasCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionLocationKeyAreasCountQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionLocationKeyAreasCount>>> = ({ signal }) => apiVVersionApiVersionLocationKeyAreasCount(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocationKeyAreasCount>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionLocationKeyAreasCountQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionLocationKeyAreasCount>>>
export type ApiVVersionApiVersionLocationKeyAreasCountQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.Area navigation property action
 */

export function useApiVVersionApiVersionLocationKeyAreasCount<TData = Awaited<ReturnType<typeof apiVVersionApiVersionLocationKeyAreasCount>>, TError = void>(
 key: number,
    params?: ApiVVersionApiVersionLocationKeyAreasCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocationKeyAreasCount>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionLocationKeyAreasCountQueryOptions(key,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Utah.Udot.Atspm.Data.Models.Device navigation property action
 */
export const apiVVersionApiVersionLocationKeyDevices = (
    key: number,
    params?: ApiVVersionApiVersionLocationKeyDevicesParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsDevice[]>(
      {url: `/api/v1/Location/${key}/devices`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionLocationKeyDevicesQueryKey = (key: number,
    params?: ApiVVersionApiVersionLocationKeyDevicesParams,) => {
    return [`/api/v1/Location/${key}/devices`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionLocationKeyDevicesQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionLocationKeyDevices>>, TError = void>(key: number,
    params?: ApiVVersionApiVersionLocationKeyDevicesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocationKeyDevices>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionLocationKeyDevicesQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionLocationKeyDevices>>> = ({ signal }) => apiVVersionApiVersionLocationKeyDevices(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocationKeyDevices>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionLocationKeyDevicesQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionLocationKeyDevices>>>
export type ApiVVersionApiVersionLocationKeyDevicesQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.Device navigation property action
 */

export function useApiVVersionApiVersionLocationKeyDevices<TData = Awaited<ReturnType<typeof apiVVersionApiVersionLocationKeyDevices>>, TError = void>(
 key: number,
    params?: ApiVVersionApiVersionLocationKeyDevicesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocationKeyDevices>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionLocationKeyDevicesQueryOptions(key,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Utah.Udot.Atspm.Data.Models.Device navigation property action
 */
export const apiVVersionApiVersionLocationKeyDevicesCount = (
    key: number,
    params?: ApiVVersionApiVersionLocationKeyDevicesCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsDevice[]>(
      {url: `/api/v1/Location/${key}/devices/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionLocationKeyDevicesCountQueryKey = (key: number,
    params?: ApiVVersionApiVersionLocationKeyDevicesCountParams,) => {
    return [`/api/v1/Location/${key}/devices/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionLocationKeyDevicesCountQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionLocationKeyDevicesCount>>, TError = void>(key: number,
    params?: ApiVVersionApiVersionLocationKeyDevicesCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocationKeyDevicesCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionLocationKeyDevicesCountQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionLocationKeyDevicesCount>>> = ({ signal }) => apiVVersionApiVersionLocationKeyDevicesCount(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocationKeyDevicesCount>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionLocationKeyDevicesCountQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionLocationKeyDevicesCount>>>
export type ApiVVersionApiVersionLocationKeyDevicesCountQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.Device navigation property action
 */

export function useApiVVersionApiVersionLocationKeyDevicesCount<TData = Awaited<ReturnType<typeof apiVVersionApiVersionLocationKeyDevicesCount>>, TError = void>(
 key: number,
    params?: ApiVVersionApiVersionLocationKeyDevicesCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocationKeyDevicesCount>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionLocationKeyDevicesCountQueryOptions(key,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Copies Utah.Udot.Atspm.Data.Models.Location and associated Utah.Udot.Atspm.Data.Models.Approach to new version
 */
export const apiVVersionApiVersionLocationKeyCopyLocationToNewVersion = (
    key: number,
    params?: ApiVVersionApiVersionLocationKeyCopyLocationToNewVersionParams,
 ) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsLocation>(
      {url: `/api/v1/Location/${key}/CopyLocationToNewVersion`, method: 'POST',
        params
    },
      );
    }
  


export const getApiVVersionApiVersionLocationKeyCopyLocationToNewVersionMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocationKeyCopyLocationToNewVersion>>, TError,{key: number;params?: ApiVVersionApiVersionLocationKeyCopyLocationToNewVersionParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocationKeyCopyLocationToNewVersion>>, TError,{key: number;params?: ApiVVersionApiVersionLocationKeyCopyLocationToNewVersionParams}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiVVersionApiVersionLocationKeyCopyLocationToNewVersion>>, {key: number;params?: ApiVVersionApiVersionLocationKeyCopyLocationToNewVersionParams}> = (props) => {
          const {key,params} = props ?? {};

          return  apiVVersionApiVersionLocationKeyCopyLocationToNewVersion(key,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiVVersionApiVersionLocationKeyCopyLocationToNewVersionMutationResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionLocationKeyCopyLocationToNewVersion>>>
    
    export type ApiVVersionApiVersionLocationKeyCopyLocationToNewVersionMutationError = void

    /**
 * @summary Copies Utah.Udot.Atspm.Data.Models.Location and associated Utah.Udot.Atspm.Data.Models.Approach to new version
 */
export const useApiVVersionApiVersionLocationKeyCopyLocationToNewVersion = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocationKeyCopyLocationToNewVersion>>, TError,{key: number;params?: ApiVVersionApiVersionLocationKeyCopyLocationToNewVersionParams}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof apiVVersionApiVersionLocationKeyCopyLocationToNewVersion>>,
        TError,
        {key: number;params?: ApiVVersionApiVersionLocationKeyCopyLocationToNewVersionParams},
        TContext
      > => {

      const mutationOptions = getApiVVersionApiVersionLocationKeyCopyLocationToNewVersionMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Copies Utah.Udot.Atspm.Data.Models.Location and associated Utah.Udot.Atspm.Data.Models.Approach to new version
 */
export const apiVVersionApiVersionLocationKeySyncLocation = (
    key: number,
    params?: ApiVVersionApiVersionLocationKeySyncLocationParams,
 ) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsLocation>(
      {url: `/api/v1/Location/${key}/SyncLocation`, method: 'POST',
        params
    },
      );
    }
  


export const getApiVVersionApiVersionLocationKeySyncLocationMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocationKeySyncLocation>>, TError,{key: number;params?: ApiVVersionApiVersionLocationKeySyncLocationParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocationKeySyncLocation>>, TError,{key: number;params?: ApiVVersionApiVersionLocationKeySyncLocationParams}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiVVersionApiVersionLocationKeySyncLocation>>, {key: number;params?: ApiVVersionApiVersionLocationKeySyncLocationParams}> = (props) => {
          const {key,params} = props ?? {};

          return  apiVVersionApiVersionLocationKeySyncLocation(key,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiVVersionApiVersionLocationKeySyncLocationMutationResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionLocationKeySyncLocation>>>
    
    export type ApiVVersionApiVersionLocationKeySyncLocationMutationError = void

    /**
 * @summary Copies Utah.Udot.Atspm.Data.Models.Location and associated Utah.Udot.Atspm.Data.Models.Approach to new version
 */
export const useApiVVersionApiVersionLocationKeySyncLocation = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocationKeySyncLocation>>, TError,{key: number;params?: ApiVVersionApiVersionLocationKeySyncLocationParams}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof apiVVersionApiVersionLocationKeySyncLocation>>,
        TError,
        {key: number;params?: ApiVVersionApiVersionLocationKeySyncLocationParams},
        TContext
      > => {

      const mutationOptions = getApiVVersionApiVersionLocationKeySyncLocationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Templates Utah.Udot.Atspm.Data.Models.Location and associated Utah.Udot.Atspm.Data.Models.Approach to new version
 */
export const apiVVersionApiVersionLocationKeySaveTemplatedLocation = (
    key: number,
    locationDefaultLocationSaveTemplatedLocationParameters: LocationDefaultLocationSaveTemplatedLocationParameters,
    params?: ApiVVersionApiVersionLocationKeySaveTemplatedLocationParams,
 ) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsLocation>(
      {url: `/api/v1/Location/${key}/SaveTemplatedLocation`, method: 'POST',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: locationDefaultLocationSaveTemplatedLocationParameters,
        params
    },
      );
    }
  


export const getApiVVersionApiVersionLocationKeySaveTemplatedLocationMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocationKeySaveTemplatedLocation>>, TError,{key: number;data: LocationDefaultLocationSaveTemplatedLocationParameters;params?: ApiVVersionApiVersionLocationKeySaveTemplatedLocationParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocationKeySaveTemplatedLocation>>, TError,{key: number;data: LocationDefaultLocationSaveTemplatedLocationParameters;params?: ApiVVersionApiVersionLocationKeySaveTemplatedLocationParams}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiVVersionApiVersionLocationKeySaveTemplatedLocation>>, {key: number;data: LocationDefaultLocationSaveTemplatedLocationParameters;params?: ApiVVersionApiVersionLocationKeySaveTemplatedLocationParams}> = (props) => {
          const {key,data,params} = props ?? {};

          return  apiVVersionApiVersionLocationKeySaveTemplatedLocation(key,data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiVVersionApiVersionLocationKeySaveTemplatedLocationMutationResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionLocationKeySaveTemplatedLocation>>>
    export type ApiVVersionApiVersionLocationKeySaveTemplatedLocationMutationBody = LocationDefaultLocationSaveTemplatedLocationParameters
    export type ApiVVersionApiVersionLocationKeySaveTemplatedLocationMutationError = void

    /**
 * @summary Templates Utah.Udot.Atspm.Data.Models.Location and associated Utah.Udot.Atspm.Data.Models.Approach to new version
 */
export const useApiVVersionApiVersionLocationKeySaveTemplatedLocation = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocationKeySaveTemplatedLocation>>, TError,{key: number;data: LocationDefaultLocationSaveTemplatedLocationParameters;params?: ApiVVersionApiVersionLocationKeySaveTemplatedLocationParams}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof apiVVersionApiVersionLocationKeySaveTemplatedLocation>>,
        TError,
        {key: number;data: LocationDefaultLocationSaveTemplatedLocationParameters;params?: ApiVVersionApiVersionLocationKeySaveTemplatedLocationParams},
        TContext
      > => {

      const mutationOptions = getApiVVersionApiVersionLocationKeySaveTemplatedLocationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Marks Utah.Udot.Atspm.Data.Models.Location to deleted
 */
export const apiVVersionApiVersionLocationKeySetLocationToDeleted = (
    key: number,
    params?: ApiVVersionApiVersionLocationKeySetLocationToDeletedParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/Location/${key}/SetLocationToDeleted`, method: 'POST',
        params
    },
      );
    }
  


export const getApiVVersionApiVersionLocationKeySetLocationToDeletedMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocationKeySetLocationToDeleted>>, TError,{key: number;params?: ApiVVersionApiVersionLocationKeySetLocationToDeletedParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocationKeySetLocationToDeleted>>, TError,{key: number;params?: ApiVVersionApiVersionLocationKeySetLocationToDeletedParams}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiVVersionApiVersionLocationKeySetLocationToDeleted>>, {key: number;params?: ApiVVersionApiVersionLocationKeySetLocationToDeletedParams}> = (props) => {
          const {key,params} = props ?? {};

          return  apiVVersionApiVersionLocationKeySetLocationToDeleted(key,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiVVersionApiVersionLocationKeySetLocationToDeletedMutationResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionLocationKeySetLocationToDeleted>>>
    
    export type ApiVVersionApiVersionLocationKeySetLocationToDeletedMutationError = void

    /**
 * @summary Marks Utah.Udot.Atspm.Data.Models.Location to deleted
 */
export const useApiVVersionApiVersionLocationKeySetLocationToDeleted = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocationKeySetLocationToDeleted>>, TError,{key: number;params?: ApiVVersionApiVersionLocationKeySetLocationToDeletedParams}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof apiVVersionApiVersionLocationKeySetLocationToDeleted>>,
        TError,
        {key: number;params?: ApiVVersionApiVersionLocationKeySetLocationToDeletedParams},
        TContext
      > => {

      const mutationOptions = getApiVVersionApiVersionLocationKeySetLocationToDeletedMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Get latest version of Utah.Udot.Atspm.Data.Models.Location and related entities that match identifier
 */
export const apiVVersionApiVersionLocationGetLatestVersionOfLocationIdentifierIdentifier = (
    identifier: string,
    params?: ApiVVersionApiVersionLocationGetLatestVersionOfLocationIdentifierIdentifierParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsLocation>(
      {url: `/api/v1/Location/GetLatestVersionOfLocation(identifier=${identifier})`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionLocationGetLatestVersionOfLocationIdentifierIdentifierQueryKey = (identifier: string,
    params?: ApiVVersionApiVersionLocationGetLatestVersionOfLocationIdentifierIdentifierParams,) => {
    return [`/api/v1/Location/GetLatestVersionOfLocation(identifier=${identifier})`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionLocationGetLatestVersionOfLocationIdentifierIdentifierQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionLocationGetLatestVersionOfLocationIdentifierIdentifier>>, TError = void>(identifier: string,
    params?: ApiVVersionApiVersionLocationGetLatestVersionOfLocationIdentifierIdentifierParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocationGetLatestVersionOfLocationIdentifierIdentifier>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionLocationGetLatestVersionOfLocationIdentifierIdentifierQueryKey(identifier,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionLocationGetLatestVersionOfLocationIdentifierIdentifier>>> = ({ signal }) => apiVVersionApiVersionLocationGetLatestVersionOfLocationIdentifierIdentifier(identifier,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(identifier), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocationGetLatestVersionOfLocationIdentifierIdentifier>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionLocationGetLatestVersionOfLocationIdentifierIdentifierQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionLocationGetLatestVersionOfLocationIdentifierIdentifier>>>
export type ApiVVersionApiVersionLocationGetLatestVersionOfLocationIdentifierIdentifierQueryError = void


/**
 * @summary Get latest version of Utah.Udot.Atspm.Data.Models.Location and related entities that match identifier
 */

export function useApiVVersionApiVersionLocationGetLatestVersionOfLocationIdentifierIdentifier<TData = Awaited<ReturnType<typeof apiVVersionApiVersionLocationGetLatestVersionOfLocationIdentifierIdentifier>>, TError = void>(
 identifier: string,
    params?: ApiVVersionApiVersionLocationGetLatestVersionOfLocationIdentifierIdentifierParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocationGetLatestVersionOfLocationIdentifierIdentifier>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionLocationGetLatestVersionOfLocationIdentifierIdentifierQueryOptions(identifier,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get all active Utah.Udot.Atspm.Data.Models.Location that match identifier
 */
export const apiVVersionApiVersionLocationGetAllVersionsOfLocationIdentifierIdentifier = (
    identifier: string,
    params?: ApiVVersionApiVersionLocationGetAllVersionsOfLocationIdentifierIdentifierParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsLocation[]>(
      {url: `/api/v1/Location/GetAllVersionsOfLocation(identifier=${identifier})`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionLocationGetAllVersionsOfLocationIdentifierIdentifierQueryKey = (identifier: string,
    params?: ApiVVersionApiVersionLocationGetAllVersionsOfLocationIdentifierIdentifierParams,) => {
    return [`/api/v1/Location/GetAllVersionsOfLocation(identifier=${identifier})`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionLocationGetAllVersionsOfLocationIdentifierIdentifierQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionLocationGetAllVersionsOfLocationIdentifierIdentifier>>, TError = void>(identifier: string,
    params?: ApiVVersionApiVersionLocationGetAllVersionsOfLocationIdentifierIdentifierParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocationGetAllVersionsOfLocationIdentifierIdentifier>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionLocationGetAllVersionsOfLocationIdentifierIdentifierQueryKey(identifier,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionLocationGetAllVersionsOfLocationIdentifierIdentifier>>> = ({ signal }) => apiVVersionApiVersionLocationGetAllVersionsOfLocationIdentifierIdentifier(identifier,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(identifier), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocationGetAllVersionsOfLocationIdentifierIdentifier>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionLocationGetAllVersionsOfLocationIdentifierIdentifierQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionLocationGetAllVersionsOfLocationIdentifierIdentifier>>>
export type ApiVVersionApiVersionLocationGetAllVersionsOfLocationIdentifierIdentifierQueryError = void


/**
 * @summary Get all active Utah.Udot.Atspm.Data.Models.Location that match identifier
 */

export function useApiVVersionApiVersionLocationGetAllVersionsOfLocationIdentifierIdentifier<TData = Awaited<ReturnType<typeof apiVVersionApiVersionLocationGetAllVersionsOfLocationIdentifierIdentifier>>, TError = void>(
 identifier: string,
    params?: ApiVVersionApiVersionLocationGetAllVersionsOfLocationIdentifierIdentifierParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocationGetAllVersionsOfLocationIdentifierIdentifier>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionLocationGetAllVersionsOfLocationIdentifierIdentifierQueryOptions(identifier,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get latest version of all Utah.Udot.Atspm.Data.Models.Location
 */
export const apiVVersionApiVersionLocationGetLatestVersionOfAllLocations = (
    params?: ApiVVersionApiVersionLocationGetLatestVersionOfAllLocationsParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsLocation[]>(
      {url: `/api/v1/Location/GetLatestVersionOfAllLocations`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionLocationGetLatestVersionOfAllLocationsQueryKey = (params?: ApiVVersionApiVersionLocationGetLatestVersionOfAllLocationsParams,) => {
    return [`/api/v1/Location/GetLatestVersionOfAllLocations`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionLocationGetLatestVersionOfAllLocationsQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionLocationGetLatestVersionOfAllLocations>>, TError = void>(params?: ApiVVersionApiVersionLocationGetLatestVersionOfAllLocationsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocationGetLatestVersionOfAllLocations>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionLocationGetLatestVersionOfAllLocationsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionLocationGetLatestVersionOfAllLocations>>> = ({ signal }) => apiVVersionApiVersionLocationGetLatestVersionOfAllLocations(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocationGetLatestVersionOfAllLocations>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionLocationGetLatestVersionOfAllLocationsQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionLocationGetLatestVersionOfAllLocations>>>
export type ApiVVersionApiVersionLocationGetLatestVersionOfAllLocationsQueryError = void


/**
 * @summary Get latest version of all Utah.Udot.Atspm.Data.Models.Location
 */

export function useApiVVersionApiVersionLocationGetLatestVersionOfAllLocations<TData = Awaited<ReturnType<typeof apiVVersionApiVersionLocationGetLatestVersionOfAllLocations>>, TError = void>(
 params?: ApiVVersionApiVersionLocationGetLatestVersionOfAllLocationsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocationGetLatestVersionOfAllLocations>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionLocationGetLatestVersionOfAllLocationsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get count of Device Types using correct version of all Utah.Udot.Atspm.Data.Models.Location
 */
export const apiVVersionApiVersionLocationGetDetectionTypeCount = (
    params?: ApiVVersionApiVersionLocationGetDetectionTypeCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmBusinessWatchdogDetectionTypeGroup[]>(
      {url: `/api/v1/Location/GetDetectionTypeCount`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionLocationGetDetectionTypeCountQueryKey = (params?: ApiVVersionApiVersionLocationGetDetectionTypeCountParams,) => {
    return [`/api/v1/Location/GetDetectionTypeCount`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionLocationGetDetectionTypeCountQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionLocationGetDetectionTypeCount>>, TError = void>(params?: ApiVVersionApiVersionLocationGetDetectionTypeCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocationGetDetectionTypeCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionLocationGetDetectionTypeCountQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionLocationGetDetectionTypeCount>>> = ({ signal }) => apiVVersionApiVersionLocationGetDetectionTypeCount(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocationGetDetectionTypeCount>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionLocationGetDetectionTypeCountQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionLocationGetDetectionTypeCount>>>
export type ApiVVersionApiVersionLocationGetDetectionTypeCountQueryError = void


/**
 * @summary Get count of Device Types using correct version of all Utah.Udot.Atspm.Data.Models.Location
 */

export function useApiVVersionApiVersionLocationGetDetectionTypeCount<TData = Awaited<ReturnType<typeof apiVVersionApiVersionLocationGetDetectionTypeCount>>, TError = void>(
 params?: ApiVVersionApiVersionLocationGetDetectionTypeCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocationGetDetectionTypeCount>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionLocationGetDetectionTypeCountQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Gets an optimized list of Utah.Udot.Atspm.ConfigApi.Models.SearchLocation to use for Location selection
 */
export const apiVVersionApiVersionLocationGetLocationsForSearch = (
    params?: ApiVVersionApiVersionLocationGetLocationsForSearchParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmConfigApiModelsSearchLocation[]>(
      {url: `/api/v1/Location/GetLocationsForSearch`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionLocationGetLocationsForSearchQueryKey = (params?: ApiVVersionApiVersionLocationGetLocationsForSearchParams,) => {
    return [`/api/v1/Location/GetLocationsForSearch`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionLocationGetLocationsForSearchQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionLocationGetLocationsForSearch>>, TError = void>(params?: ApiVVersionApiVersionLocationGetLocationsForSearchParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocationGetLocationsForSearch>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionLocationGetLocationsForSearchQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionLocationGetLocationsForSearch>>> = ({ signal }) => apiVVersionApiVersionLocationGetLocationsForSearch(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocationGetLocationsForSearch>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionLocationGetLocationsForSearchQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionLocationGetLocationsForSearch>>>
export type ApiVVersionApiVersionLocationGetLocationsForSearchQueryError = void


/**
 * @summary Gets an optimized list of Utah.Udot.Atspm.ConfigApi.Models.SearchLocation to use for Location selection
 */

export function useApiVVersionApiVersionLocationGetLocationsForSearch<TData = Awaited<ReturnType<typeof apiVVersionApiVersionLocationGetLocationsForSearch>>, TError = void>(
 params?: ApiVVersionApiVersionLocationGetLocationsForSearchParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocationGetLocationsForSearch>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionLocationGetLocationsForSearchQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Insert object of specified type
 */
export const apiVVersionApiVersionLocation = (
    utahUdotAtspmDataModelsLocation: UtahUdotAtspmDataModelsLocation,
    params?: ApiVVersionApiVersionLocationParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/Location`, method: 'POST',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: utahUdotAtspmDataModelsLocation,
        params
    },
      );
    }
  


export const getApiVVersionApiVersionLocationMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocation>>, TError,{data: UtahUdotAtspmDataModelsLocation;params?: ApiVVersionApiVersionLocationParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocation>>, TError,{data: UtahUdotAtspmDataModelsLocation;params?: ApiVVersionApiVersionLocationParams}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiVVersionApiVersionLocation>>, {data: UtahUdotAtspmDataModelsLocation;params?: ApiVVersionApiVersionLocationParams}> = (props) => {
          const {data,params} = props ?? {};

          return  apiVVersionApiVersionLocation(data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiVVersionApiVersionLocationMutationResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionLocation>>>
    export type ApiVVersionApiVersionLocationMutationBody = UtahUdotAtspmDataModelsLocation
    export type ApiVVersionApiVersionLocationMutationError = void

    /**
 * @summary Insert object of specified type
 */
export const useApiVVersionApiVersionLocation = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocation>>, TError,{data: UtahUdotAtspmDataModelsLocation;params?: ApiVVersionApiVersionLocationParams}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof apiVVersionApiVersionLocation>>,
        TError,
        {data: UtahUdotAtspmDataModelsLocation;params?: ApiVVersionApiVersionLocationParams},
        TContext
      > => {

      const mutationOptions = getApiVVersionApiVersionLocationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Collection of objects from oData query.
 */
export const apiVVersionApiVersionLocationCount = (
    params?: ApiVVersionApiVersionLocationCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsLocation[]>(
      {url: `/api/v1/Location/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionLocationCountQueryKey = (params?: ApiVVersionApiVersionLocationCountParams,) => {
    return [`/api/v1/Location/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionLocationCountQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionLocationCount>>, TError = void>(params?: ApiVVersionApiVersionLocationCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocationCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionLocationCountQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionLocationCount>>> = ({ signal }) => apiVVersionApiVersionLocationCount(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocationCount>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionLocationCountQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionLocationCount>>>
export type ApiVVersionApiVersionLocationCountQueryError = void


/**
 * @summary Collection of objects from oData query.
 */

export function useApiVVersionApiVersionLocationCount<TData = Awaited<ReturnType<typeof apiVVersionApiVersionLocationCount>>, TError = void>(
 params?: ApiVVersionApiVersionLocationCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocationCount>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionLocationCountQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Delete object of specified type
 */
export const apiVVersionApiVersionLocationKey = (
    key: number,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/Location/${key}`, method: 'DELETE'
    },
      );
    }
  


export const getApiVVersionApiVersionLocationKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocationKey>>, TError,{key: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocationKey>>, TError,{key: number}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiVVersionApiVersionLocationKey>>, {key: number}> = (props) => {
          const {key} = props ?? {};

          return  apiVVersionApiVersionLocationKey(key,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiVVersionApiVersionLocationKeyMutationResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionLocationKey>>>
    
    export type ApiVVersionApiVersionLocationKeyMutationError = void

    /**
 * @summary Delete object of specified type
 */
export const useApiVVersionApiVersionLocationKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocationKey>>, TError,{key: number}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof apiVVersionApiVersionLocationKey>>,
        TError,
        {key: number},
        TContext
      > => {

      const mutationOptions = getApiVVersionApiVersionLocationKeyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Utah.Udot.Atspm.Data.Models.Location navigation property action
 */
export const apiVVersionApiVersionLocationTypeKeyLocations = (
    key: number,
    params?: ApiVVersionApiVersionLocationTypeKeyLocationsParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsLocation[]>(
      {url: `/api/v1/LocationType/${key}/locations`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionLocationTypeKeyLocationsQueryKey = (key: number,
    params?: ApiVVersionApiVersionLocationTypeKeyLocationsParams,) => {
    return [`/api/v1/LocationType/${key}/locations`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionLocationTypeKeyLocationsQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionLocationTypeKeyLocations>>, TError = void>(key: number,
    params?: ApiVVersionApiVersionLocationTypeKeyLocationsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocationTypeKeyLocations>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionLocationTypeKeyLocationsQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionLocationTypeKeyLocations>>> = ({ signal }) => apiVVersionApiVersionLocationTypeKeyLocations(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocationTypeKeyLocations>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionLocationTypeKeyLocationsQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionLocationTypeKeyLocations>>>
export type ApiVVersionApiVersionLocationTypeKeyLocationsQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.Location navigation property action
 */

export function useApiVVersionApiVersionLocationTypeKeyLocations<TData = Awaited<ReturnType<typeof apiVVersionApiVersionLocationTypeKeyLocations>>, TError = void>(
 key: number,
    params?: ApiVVersionApiVersionLocationTypeKeyLocationsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocationTypeKeyLocations>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionLocationTypeKeyLocationsQueryOptions(key,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Utah.Udot.Atspm.Data.Models.Location navigation property action
 */
export const apiVVersionApiVersionLocationTypeKeyLocationsCount = (
    key: number,
    params?: ApiVVersionApiVersionLocationTypeKeyLocationsCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsLocation[]>(
      {url: `/api/v1/LocationType/${key}/locations/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionLocationTypeKeyLocationsCountQueryKey = (key: number,
    params?: ApiVVersionApiVersionLocationTypeKeyLocationsCountParams,) => {
    return [`/api/v1/LocationType/${key}/locations/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionLocationTypeKeyLocationsCountQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionLocationTypeKeyLocationsCount>>, TError = void>(key: number,
    params?: ApiVVersionApiVersionLocationTypeKeyLocationsCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocationTypeKeyLocationsCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionLocationTypeKeyLocationsCountQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionLocationTypeKeyLocationsCount>>> = ({ signal }) => apiVVersionApiVersionLocationTypeKeyLocationsCount(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocationTypeKeyLocationsCount>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionLocationTypeKeyLocationsCountQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionLocationTypeKeyLocationsCount>>>
export type ApiVVersionApiVersionLocationTypeKeyLocationsCountQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.Location navigation property action
 */

export function useApiVVersionApiVersionLocationTypeKeyLocationsCount<TData = Awaited<ReturnType<typeof apiVVersionApiVersionLocationTypeKeyLocationsCount>>, TError = void>(
 key: number,
    params?: ApiVVersionApiVersionLocationTypeKeyLocationsCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocationTypeKeyLocationsCount>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionLocationTypeKeyLocationsCountQueryOptions(key,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Insert object of specified type
 */
export const apiVVersionApiVersionLocationType = (
    utahUdotAtspmDataModelsLocationType: UtahUdotAtspmDataModelsLocationType,
    params?: ApiVVersionApiVersionLocationTypeParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/LocationType`, method: 'POST',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: utahUdotAtspmDataModelsLocationType,
        params
    },
      );
    }
  


export const getApiVVersionApiVersionLocationTypeMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocationType>>, TError,{data: UtahUdotAtspmDataModelsLocationType;params?: ApiVVersionApiVersionLocationTypeParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocationType>>, TError,{data: UtahUdotAtspmDataModelsLocationType;params?: ApiVVersionApiVersionLocationTypeParams}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiVVersionApiVersionLocationType>>, {data: UtahUdotAtspmDataModelsLocationType;params?: ApiVVersionApiVersionLocationTypeParams}> = (props) => {
          const {data,params} = props ?? {};

          return  apiVVersionApiVersionLocationType(data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiVVersionApiVersionLocationTypeMutationResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionLocationType>>>
    export type ApiVVersionApiVersionLocationTypeMutationBody = UtahUdotAtspmDataModelsLocationType
    export type ApiVVersionApiVersionLocationTypeMutationError = void

    /**
 * @summary Insert object of specified type
 */
export const useApiVVersionApiVersionLocationType = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocationType>>, TError,{data: UtahUdotAtspmDataModelsLocationType;params?: ApiVVersionApiVersionLocationTypeParams}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof apiVVersionApiVersionLocationType>>,
        TError,
        {data: UtahUdotAtspmDataModelsLocationType;params?: ApiVVersionApiVersionLocationTypeParams},
        TContext
      > => {

      const mutationOptions = getApiVVersionApiVersionLocationTypeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Collection of objects from oData query.
 */
export const apiVVersionApiVersionLocationTypeCount = (
    params?: ApiVVersionApiVersionLocationTypeCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsLocationType[]>(
      {url: `/api/v1/LocationType/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionLocationTypeCountQueryKey = (params?: ApiVVersionApiVersionLocationTypeCountParams,) => {
    return [`/api/v1/LocationType/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionLocationTypeCountQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionLocationTypeCount>>, TError = void>(params?: ApiVVersionApiVersionLocationTypeCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocationTypeCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionLocationTypeCountQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionLocationTypeCount>>> = ({ signal }) => apiVVersionApiVersionLocationTypeCount(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocationTypeCount>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionLocationTypeCountQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionLocationTypeCount>>>
export type ApiVVersionApiVersionLocationTypeCountQueryError = void


/**
 * @summary Collection of objects from oData query.
 */

export function useApiVVersionApiVersionLocationTypeCount<TData = Awaited<ReturnType<typeof apiVVersionApiVersionLocationTypeCount>>, TError = void>(
 params?: ApiVVersionApiVersionLocationTypeCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocationTypeCount>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionLocationTypeCountQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Delete object of specified type
 */
export const apiVVersionApiVersionLocationTypeKey = (
    key: number,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/LocationType/${key}`, method: 'DELETE'
    },
      );
    }
  


export const getApiVVersionApiVersionLocationTypeKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocationTypeKey>>, TError,{key: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocationTypeKey>>, TError,{key: number}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiVVersionApiVersionLocationTypeKey>>, {key: number}> = (props) => {
          const {key} = props ?? {};

          return  apiVVersionApiVersionLocationTypeKey(key,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiVVersionApiVersionLocationTypeKeyMutationResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionLocationTypeKey>>>
    
    export type ApiVVersionApiVersionLocationTypeKeyMutationError = void

    /**
 * @summary Delete object of specified type
 */
export const useApiVVersionApiVersionLocationTypeKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionLocationTypeKey>>, TError,{key: number}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof apiVVersionApiVersionLocationTypeKey>>,
        TError,
        {key: number},
        TContext
      > => {

      const mutationOptions = getApiVVersionApiVersionLocationTypeKeyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Insert object of specified type
 */
export const apiVVersionApiVersionMapLayer = (
    utahUdotAtspmDataModelsMapLayer: UtahUdotAtspmDataModelsMapLayer,
    params?: ApiVVersionApiVersionMapLayerParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/MapLayer`, method: 'POST',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: utahUdotAtspmDataModelsMapLayer,
        params
    },
      );
    }
  


export const getApiVVersionApiVersionMapLayerMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionMapLayer>>, TError,{data: UtahUdotAtspmDataModelsMapLayer;params?: ApiVVersionApiVersionMapLayerParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionMapLayer>>, TError,{data: UtahUdotAtspmDataModelsMapLayer;params?: ApiVVersionApiVersionMapLayerParams}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiVVersionApiVersionMapLayer>>, {data: UtahUdotAtspmDataModelsMapLayer;params?: ApiVVersionApiVersionMapLayerParams}> = (props) => {
          const {data,params} = props ?? {};

          return  apiVVersionApiVersionMapLayer(data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiVVersionApiVersionMapLayerMutationResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionMapLayer>>>
    export type ApiVVersionApiVersionMapLayerMutationBody = UtahUdotAtspmDataModelsMapLayer
    export type ApiVVersionApiVersionMapLayerMutationError = void

    /**
 * @summary Insert object of specified type
 */
export const useApiVVersionApiVersionMapLayer = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionMapLayer>>, TError,{data: UtahUdotAtspmDataModelsMapLayer;params?: ApiVVersionApiVersionMapLayerParams}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof apiVVersionApiVersionMapLayer>>,
        TError,
        {data: UtahUdotAtspmDataModelsMapLayer;params?: ApiVVersionApiVersionMapLayerParams},
        TContext
      > => {

      const mutationOptions = getApiVVersionApiVersionMapLayerMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Collection of objects from oData query.
 */
export const apiVVersionApiVersionMapLayerCount = (
    params?: ApiVVersionApiVersionMapLayerCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsMapLayer[]>(
      {url: `/api/v1/MapLayer/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionMapLayerCountQueryKey = (params?: ApiVVersionApiVersionMapLayerCountParams,) => {
    return [`/api/v1/MapLayer/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionMapLayerCountQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionMapLayerCount>>, TError = void>(params?: ApiVVersionApiVersionMapLayerCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionMapLayerCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionMapLayerCountQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionMapLayerCount>>> = ({ signal }) => apiVVersionApiVersionMapLayerCount(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionMapLayerCount>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionMapLayerCountQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionMapLayerCount>>>
export type ApiVVersionApiVersionMapLayerCountQueryError = void


/**
 * @summary Collection of objects from oData query.
 */

export function useApiVVersionApiVersionMapLayerCount<TData = Awaited<ReturnType<typeof apiVVersionApiVersionMapLayerCount>>, TError = void>(
 params?: ApiVVersionApiVersionMapLayerCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionMapLayerCount>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionMapLayerCountQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Delete object of specified type
 */
export const apiVVersionApiVersionMapLayerKey = (
    key: number,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/MapLayer/${key}`, method: 'DELETE'
    },
      );
    }
  


export const getApiVVersionApiVersionMapLayerKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionMapLayerKey>>, TError,{key: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionMapLayerKey>>, TError,{key: number}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiVVersionApiVersionMapLayerKey>>, {key: number}> = (props) => {
          const {key} = props ?? {};

          return  apiVVersionApiVersionMapLayerKey(key,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiVVersionApiVersionMapLayerKeyMutationResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionMapLayerKey>>>
    
    export type ApiVVersionApiVersionMapLayerKeyMutationError = void

    /**
 * @summary Delete object of specified type
 */
export const useApiVVersionApiVersionMapLayerKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionMapLayerKey>>, TError,{key: number}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof apiVVersionApiVersionMapLayerKey>>,
        TError,
        {key: number},
        TContext
      > => {

      const mutationOptions = getApiVVersionApiVersionMapLayerKeyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Utah.Udot.Atspm.Data.Models.MeasureType navigation property action
 */
export const apiVVersionApiVersionMeasureCommentKeyMeasureTypes = (
    key: number,
    params?: ApiVVersionApiVersionMeasureCommentKeyMeasureTypesParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsMeasureType[]>(
      {url: `/api/v1/MeasureComment/${key}/measureTypes`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionMeasureCommentKeyMeasureTypesQueryKey = (key: number,
    params?: ApiVVersionApiVersionMeasureCommentKeyMeasureTypesParams,) => {
    return [`/api/v1/MeasureComment/${key}/measureTypes`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionMeasureCommentKeyMeasureTypesQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionMeasureCommentKeyMeasureTypes>>, TError = void>(key: number,
    params?: ApiVVersionApiVersionMeasureCommentKeyMeasureTypesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureCommentKeyMeasureTypes>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionMeasureCommentKeyMeasureTypesQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureCommentKeyMeasureTypes>>> = ({ signal }) => apiVVersionApiVersionMeasureCommentKeyMeasureTypes(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureCommentKeyMeasureTypes>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionMeasureCommentKeyMeasureTypesQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureCommentKeyMeasureTypes>>>
export type ApiVVersionApiVersionMeasureCommentKeyMeasureTypesQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.MeasureType navigation property action
 */

export function useApiVVersionApiVersionMeasureCommentKeyMeasureTypes<TData = Awaited<ReturnType<typeof apiVVersionApiVersionMeasureCommentKeyMeasureTypes>>, TError = void>(
 key: number,
    params?: ApiVVersionApiVersionMeasureCommentKeyMeasureTypesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureCommentKeyMeasureTypes>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionMeasureCommentKeyMeasureTypesQueryOptions(key,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Utah.Udot.Atspm.Data.Models.MeasureType navigation property action
 */
export const apiVVersionApiVersionMeasureCommentKeyMeasureTypesCount = (
    key: number,
    params?: ApiVVersionApiVersionMeasureCommentKeyMeasureTypesCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsMeasureType[]>(
      {url: `/api/v1/MeasureComment/${key}/measureTypes/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionMeasureCommentKeyMeasureTypesCountQueryKey = (key: number,
    params?: ApiVVersionApiVersionMeasureCommentKeyMeasureTypesCountParams,) => {
    return [`/api/v1/MeasureComment/${key}/measureTypes/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionMeasureCommentKeyMeasureTypesCountQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionMeasureCommentKeyMeasureTypesCount>>, TError = void>(key: number,
    params?: ApiVVersionApiVersionMeasureCommentKeyMeasureTypesCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureCommentKeyMeasureTypesCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionMeasureCommentKeyMeasureTypesCountQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureCommentKeyMeasureTypesCount>>> = ({ signal }) => apiVVersionApiVersionMeasureCommentKeyMeasureTypesCount(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureCommentKeyMeasureTypesCount>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionMeasureCommentKeyMeasureTypesCountQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureCommentKeyMeasureTypesCount>>>
export type ApiVVersionApiVersionMeasureCommentKeyMeasureTypesCountQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.MeasureType navigation property action
 */

export function useApiVVersionApiVersionMeasureCommentKeyMeasureTypesCount<TData = Awaited<ReturnType<typeof apiVVersionApiVersionMeasureCommentKeyMeasureTypesCount>>, TError = void>(
 key: number,
    params?: ApiVVersionApiVersionMeasureCommentKeyMeasureTypesCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureCommentKeyMeasureTypesCount>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionMeasureCommentKeyMeasureTypesCountQueryOptions(key,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Insert object of specified type
 */
export const apiVVersionApiVersionMeasureComment = (
    utahUdotAtspmDataModelsMeasureComment: UtahUdotAtspmDataModelsMeasureComment,
    params?: ApiVVersionApiVersionMeasureCommentParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/MeasureComment`, method: 'POST',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: utahUdotAtspmDataModelsMeasureComment,
        params
    },
      );
    }
  


export const getApiVVersionApiVersionMeasureCommentMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureComment>>, TError,{data: UtahUdotAtspmDataModelsMeasureComment;params?: ApiVVersionApiVersionMeasureCommentParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureComment>>, TError,{data: UtahUdotAtspmDataModelsMeasureComment;params?: ApiVVersionApiVersionMeasureCommentParams}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureComment>>, {data: UtahUdotAtspmDataModelsMeasureComment;params?: ApiVVersionApiVersionMeasureCommentParams}> = (props) => {
          const {data,params} = props ?? {};

          return  apiVVersionApiVersionMeasureComment(data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiVVersionApiVersionMeasureCommentMutationResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureComment>>>
    export type ApiVVersionApiVersionMeasureCommentMutationBody = UtahUdotAtspmDataModelsMeasureComment
    export type ApiVVersionApiVersionMeasureCommentMutationError = void

    /**
 * @summary Insert object of specified type
 */
export const useApiVVersionApiVersionMeasureComment = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureComment>>, TError,{data: UtahUdotAtspmDataModelsMeasureComment;params?: ApiVVersionApiVersionMeasureCommentParams}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof apiVVersionApiVersionMeasureComment>>,
        TError,
        {data: UtahUdotAtspmDataModelsMeasureComment;params?: ApiVVersionApiVersionMeasureCommentParams},
        TContext
      > => {

      const mutationOptions = getApiVVersionApiVersionMeasureCommentMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Collection of objects from oData query.
 */
export const apiVVersionApiVersionMeasureCommentCount = (
    params?: ApiVVersionApiVersionMeasureCommentCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsMeasureComment[]>(
      {url: `/api/v1/MeasureComment/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionMeasureCommentCountQueryKey = (params?: ApiVVersionApiVersionMeasureCommentCountParams,) => {
    return [`/api/v1/MeasureComment/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionMeasureCommentCountQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionMeasureCommentCount>>, TError = void>(params?: ApiVVersionApiVersionMeasureCommentCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureCommentCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionMeasureCommentCountQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureCommentCount>>> = ({ signal }) => apiVVersionApiVersionMeasureCommentCount(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureCommentCount>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionMeasureCommentCountQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureCommentCount>>>
export type ApiVVersionApiVersionMeasureCommentCountQueryError = void


/**
 * @summary Collection of objects from oData query.
 */

export function useApiVVersionApiVersionMeasureCommentCount<TData = Awaited<ReturnType<typeof apiVVersionApiVersionMeasureCommentCount>>, TError = void>(
 params?: ApiVVersionApiVersionMeasureCommentCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureCommentCount>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionMeasureCommentCountQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Delete object of specified type
 */
export const apiVVersionApiVersionMeasureCommentKey = (
    key: number,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/MeasureComment/${key}`, method: 'DELETE'
    },
      );
    }
  


export const getApiVVersionApiVersionMeasureCommentKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureCommentKey>>, TError,{key: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureCommentKey>>, TError,{key: number}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureCommentKey>>, {key: number}> = (props) => {
          const {key} = props ?? {};

          return  apiVVersionApiVersionMeasureCommentKey(key,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiVVersionApiVersionMeasureCommentKeyMutationResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureCommentKey>>>
    
    export type ApiVVersionApiVersionMeasureCommentKeyMutationError = void

    /**
 * @summary Delete object of specified type
 */
export const useApiVVersionApiVersionMeasureCommentKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureCommentKey>>, TError,{key: number}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof apiVVersionApiVersionMeasureCommentKey>>,
        TError,
        {key: number},
        TContext
      > => {

      const mutationOptions = getApiVVersionApiVersionMeasureCommentKeyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Insert object of specified type
 */
export const apiVVersionApiVersionMeasureOption = (
    utahUdotAtspmDataModelsMeasureOption: UtahUdotAtspmDataModelsMeasureOption,
    params?: ApiVVersionApiVersionMeasureOptionParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/MeasureOption`, method: 'POST',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: utahUdotAtspmDataModelsMeasureOption,
        params
    },
      );
    }
  


export const getApiVVersionApiVersionMeasureOptionMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureOption>>, TError,{data: UtahUdotAtspmDataModelsMeasureOption;params?: ApiVVersionApiVersionMeasureOptionParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureOption>>, TError,{data: UtahUdotAtspmDataModelsMeasureOption;params?: ApiVVersionApiVersionMeasureOptionParams}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureOption>>, {data: UtahUdotAtspmDataModelsMeasureOption;params?: ApiVVersionApiVersionMeasureOptionParams}> = (props) => {
          const {data,params} = props ?? {};

          return  apiVVersionApiVersionMeasureOption(data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiVVersionApiVersionMeasureOptionMutationResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureOption>>>
    export type ApiVVersionApiVersionMeasureOptionMutationBody = UtahUdotAtspmDataModelsMeasureOption
    export type ApiVVersionApiVersionMeasureOptionMutationError = void

    /**
 * @summary Insert object of specified type
 */
export const useApiVVersionApiVersionMeasureOption = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureOption>>, TError,{data: UtahUdotAtspmDataModelsMeasureOption;params?: ApiVVersionApiVersionMeasureOptionParams}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof apiVVersionApiVersionMeasureOption>>,
        TError,
        {data: UtahUdotAtspmDataModelsMeasureOption;params?: ApiVVersionApiVersionMeasureOptionParams},
        TContext
      > => {

      const mutationOptions = getApiVVersionApiVersionMeasureOptionMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Collection of objects from oData query.
 */
export const apiVVersionApiVersionMeasureOptionCount = (
    params?: ApiVVersionApiVersionMeasureOptionCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsMeasureOption[]>(
      {url: `/api/v1/MeasureOption/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionMeasureOptionCountQueryKey = (params?: ApiVVersionApiVersionMeasureOptionCountParams,) => {
    return [`/api/v1/MeasureOption/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionMeasureOptionCountQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionMeasureOptionCount>>, TError = void>(params?: ApiVVersionApiVersionMeasureOptionCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureOptionCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionMeasureOptionCountQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureOptionCount>>> = ({ signal }) => apiVVersionApiVersionMeasureOptionCount(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureOptionCount>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionMeasureOptionCountQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureOptionCount>>>
export type ApiVVersionApiVersionMeasureOptionCountQueryError = void


/**
 * @summary Collection of objects from oData query.
 */

export function useApiVVersionApiVersionMeasureOptionCount<TData = Awaited<ReturnType<typeof apiVVersionApiVersionMeasureOptionCount>>, TError = void>(
 params?: ApiVVersionApiVersionMeasureOptionCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureOptionCount>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionMeasureOptionCountQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Delete object of specified type
 */
export const apiVVersionApiVersionMeasureOptionKey = (
    key: number,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/MeasureOption/${key}`, method: 'DELETE'
    },
      );
    }
  


export const getApiVVersionApiVersionMeasureOptionKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureOptionKey>>, TError,{key: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureOptionKey>>, TError,{key: number}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureOptionKey>>, {key: number}> = (props) => {
          const {key} = props ?? {};

          return  apiVVersionApiVersionMeasureOptionKey(key,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiVVersionApiVersionMeasureOptionKeyMutationResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureOptionKey>>>
    
    export type ApiVVersionApiVersionMeasureOptionKeyMutationError = void

    /**
 * @summary Delete object of specified type
 */
export const useApiVVersionApiVersionMeasureOptionKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureOptionKey>>, TError,{key: number}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof apiVVersionApiVersionMeasureOptionKey>>,
        TError,
        {key: number},
        TContext
      > => {

      const mutationOptions = getApiVVersionApiVersionMeasureOptionKeyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Utah.Udot.Atspm.Data.Models.DetectionType navigation property action
 */
export const apiVVersionApiVersionMeasureTypeKeyDetectionTypes = (
    key: number,
    params?: ApiVVersionApiVersionMeasureTypeKeyDetectionTypesParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsDetectionType[]>(
      {url: `/api/v1/MeasureType/${key}/detectionTypes`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionMeasureTypeKeyDetectionTypesQueryKey = (key: number,
    params?: ApiVVersionApiVersionMeasureTypeKeyDetectionTypesParams,) => {
    return [`/api/v1/MeasureType/${key}/detectionTypes`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionMeasureTypeKeyDetectionTypesQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionMeasureTypeKeyDetectionTypes>>, TError = void>(key: number,
    params?: ApiVVersionApiVersionMeasureTypeKeyDetectionTypesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureTypeKeyDetectionTypes>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionMeasureTypeKeyDetectionTypesQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureTypeKeyDetectionTypes>>> = ({ signal }) => apiVVersionApiVersionMeasureTypeKeyDetectionTypes(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureTypeKeyDetectionTypes>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionMeasureTypeKeyDetectionTypesQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureTypeKeyDetectionTypes>>>
export type ApiVVersionApiVersionMeasureTypeKeyDetectionTypesQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.DetectionType navigation property action
 */

export function useApiVVersionApiVersionMeasureTypeKeyDetectionTypes<TData = Awaited<ReturnType<typeof apiVVersionApiVersionMeasureTypeKeyDetectionTypes>>, TError = void>(
 key: number,
    params?: ApiVVersionApiVersionMeasureTypeKeyDetectionTypesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureTypeKeyDetectionTypes>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionMeasureTypeKeyDetectionTypesQueryOptions(key,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Utah.Udot.Atspm.Data.Models.DetectionType navigation property action
 */
export const apiVVersionApiVersionMeasureTypeKeyDetectionTypesCount = (
    key: number,
    params?: ApiVVersionApiVersionMeasureTypeKeyDetectionTypesCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsDetectionType[]>(
      {url: `/api/v1/MeasureType/${key}/detectionTypes/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionMeasureTypeKeyDetectionTypesCountQueryKey = (key: number,
    params?: ApiVVersionApiVersionMeasureTypeKeyDetectionTypesCountParams,) => {
    return [`/api/v1/MeasureType/${key}/detectionTypes/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionMeasureTypeKeyDetectionTypesCountQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionMeasureTypeKeyDetectionTypesCount>>, TError = void>(key: number,
    params?: ApiVVersionApiVersionMeasureTypeKeyDetectionTypesCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureTypeKeyDetectionTypesCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionMeasureTypeKeyDetectionTypesCountQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureTypeKeyDetectionTypesCount>>> = ({ signal }) => apiVVersionApiVersionMeasureTypeKeyDetectionTypesCount(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureTypeKeyDetectionTypesCount>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionMeasureTypeKeyDetectionTypesCountQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureTypeKeyDetectionTypesCount>>>
export type ApiVVersionApiVersionMeasureTypeKeyDetectionTypesCountQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.DetectionType navigation property action
 */

export function useApiVVersionApiVersionMeasureTypeKeyDetectionTypesCount<TData = Awaited<ReturnType<typeof apiVVersionApiVersionMeasureTypeKeyDetectionTypesCount>>, TError = void>(
 key: number,
    params?: ApiVVersionApiVersionMeasureTypeKeyDetectionTypesCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureTypeKeyDetectionTypesCount>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionMeasureTypeKeyDetectionTypesCountQueryOptions(key,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Utah.Udot.Atspm.Data.Models.MeasureComment navigation property action
 */
export const apiVVersionApiVersionMeasureTypeKeyMeasureComments = (
    key: number,
    params?: ApiVVersionApiVersionMeasureTypeKeyMeasureCommentsParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsMeasureComment[]>(
      {url: `/api/v1/MeasureType/${key}/measureComments`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionMeasureTypeKeyMeasureCommentsQueryKey = (key: number,
    params?: ApiVVersionApiVersionMeasureTypeKeyMeasureCommentsParams,) => {
    return [`/api/v1/MeasureType/${key}/measureComments`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionMeasureTypeKeyMeasureCommentsQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionMeasureTypeKeyMeasureComments>>, TError = void>(key: number,
    params?: ApiVVersionApiVersionMeasureTypeKeyMeasureCommentsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureTypeKeyMeasureComments>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionMeasureTypeKeyMeasureCommentsQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureTypeKeyMeasureComments>>> = ({ signal }) => apiVVersionApiVersionMeasureTypeKeyMeasureComments(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureTypeKeyMeasureComments>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionMeasureTypeKeyMeasureCommentsQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureTypeKeyMeasureComments>>>
export type ApiVVersionApiVersionMeasureTypeKeyMeasureCommentsQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.MeasureComment navigation property action
 */

export function useApiVVersionApiVersionMeasureTypeKeyMeasureComments<TData = Awaited<ReturnType<typeof apiVVersionApiVersionMeasureTypeKeyMeasureComments>>, TError = void>(
 key: number,
    params?: ApiVVersionApiVersionMeasureTypeKeyMeasureCommentsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureTypeKeyMeasureComments>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionMeasureTypeKeyMeasureCommentsQueryOptions(key,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Utah.Udot.Atspm.Data.Models.MeasureComment navigation property action
 */
export const apiVVersionApiVersionMeasureTypeKeyMeasureCommentsCount = (
    key: number,
    params?: ApiVVersionApiVersionMeasureTypeKeyMeasureCommentsCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsMeasureComment[]>(
      {url: `/api/v1/MeasureType/${key}/measureComments/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionMeasureTypeKeyMeasureCommentsCountQueryKey = (key: number,
    params?: ApiVVersionApiVersionMeasureTypeKeyMeasureCommentsCountParams,) => {
    return [`/api/v1/MeasureType/${key}/measureComments/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionMeasureTypeKeyMeasureCommentsCountQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionMeasureTypeKeyMeasureCommentsCount>>, TError = void>(key: number,
    params?: ApiVVersionApiVersionMeasureTypeKeyMeasureCommentsCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureTypeKeyMeasureCommentsCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionMeasureTypeKeyMeasureCommentsCountQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureTypeKeyMeasureCommentsCount>>> = ({ signal }) => apiVVersionApiVersionMeasureTypeKeyMeasureCommentsCount(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureTypeKeyMeasureCommentsCount>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionMeasureTypeKeyMeasureCommentsCountQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureTypeKeyMeasureCommentsCount>>>
export type ApiVVersionApiVersionMeasureTypeKeyMeasureCommentsCountQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.MeasureComment navigation property action
 */

export function useApiVVersionApiVersionMeasureTypeKeyMeasureCommentsCount<TData = Awaited<ReturnType<typeof apiVVersionApiVersionMeasureTypeKeyMeasureCommentsCount>>, TError = void>(
 key: number,
    params?: ApiVVersionApiVersionMeasureTypeKeyMeasureCommentsCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureTypeKeyMeasureCommentsCount>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionMeasureTypeKeyMeasureCommentsCountQueryOptions(key,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Insert object of specified type
 */
export const apiVVersionApiVersionMeasureType = (
    utahUdotAtspmDataModelsMeasureType: UtahUdotAtspmDataModelsMeasureType,
    params?: ApiVVersionApiVersionMeasureTypeParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/MeasureType`, method: 'POST',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: utahUdotAtspmDataModelsMeasureType,
        params
    },
      );
    }
  


export const getApiVVersionApiVersionMeasureTypeMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureType>>, TError,{data: UtahUdotAtspmDataModelsMeasureType;params?: ApiVVersionApiVersionMeasureTypeParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureType>>, TError,{data: UtahUdotAtspmDataModelsMeasureType;params?: ApiVVersionApiVersionMeasureTypeParams}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureType>>, {data: UtahUdotAtspmDataModelsMeasureType;params?: ApiVVersionApiVersionMeasureTypeParams}> = (props) => {
          const {data,params} = props ?? {};

          return  apiVVersionApiVersionMeasureType(data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiVVersionApiVersionMeasureTypeMutationResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureType>>>
    export type ApiVVersionApiVersionMeasureTypeMutationBody = UtahUdotAtspmDataModelsMeasureType
    export type ApiVVersionApiVersionMeasureTypeMutationError = void

    /**
 * @summary Insert object of specified type
 */
export const useApiVVersionApiVersionMeasureType = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureType>>, TError,{data: UtahUdotAtspmDataModelsMeasureType;params?: ApiVVersionApiVersionMeasureTypeParams}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof apiVVersionApiVersionMeasureType>>,
        TError,
        {data: UtahUdotAtspmDataModelsMeasureType;params?: ApiVVersionApiVersionMeasureTypeParams},
        TContext
      > => {

      const mutationOptions = getApiVVersionApiVersionMeasureTypeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Collection of objects from oData query.
 */
export const apiVVersionApiVersionMeasureTypeCount = (
    params?: ApiVVersionApiVersionMeasureTypeCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsMeasureType[]>(
      {url: `/api/v1/MeasureType/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionMeasureTypeCountQueryKey = (params?: ApiVVersionApiVersionMeasureTypeCountParams,) => {
    return [`/api/v1/MeasureType/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionMeasureTypeCountQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionMeasureTypeCount>>, TError = void>(params?: ApiVVersionApiVersionMeasureTypeCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureTypeCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionMeasureTypeCountQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureTypeCount>>> = ({ signal }) => apiVVersionApiVersionMeasureTypeCount(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureTypeCount>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionMeasureTypeCountQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureTypeCount>>>
export type ApiVVersionApiVersionMeasureTypeCountQueryError = void


/**
 * @summary Collection of objects from oData query.
 */

export function useApiVVersionApiVersionMeasureTypeCount<TData = Awaited<ReturnType<typeof apiVVersionApiVersionMeasureTypeCount>>, TError = void>(
 params?: ApiVVersionApiVersionMeasureTypeCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureTypeCount>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionMeasureTypeCountQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Delete object of specified type
 */
export const apiVVersionApiVersionMeasureTypeKey = (
    key: number,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/MeasureType/${key}`, method: 'DELETE'
    },
      );
    }
  


export const getApiVVersionApiVersionMeasureTypeKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureTypeKey>>, TError,{key: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureTypeKey>>, TError,{key: number}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureTypeKey>>, {key: number}> = (props) => {
          const {key} = props ?? {};

          return  apiVVersionApiVersionMeasureTypeKey(key,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiVVersionApiVersionMeasureTypeKeyMutationResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureTypeKey>>>
    
    export type ApiVVersionApiVersionMeasureTypeKeyMutationError = void

    /**
 * @summary Delete object of specified type
 */
export const useApiVVersionApiVersionMeasureTypeKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionMeasureTypeKey>>, TError,{key: number}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof apiVVersionApiVersionMeasureTypeKey>>,
        TError,
        {key: number},
        TContext
      > => {

      const mutationOptions = getApiVVersionApiVersionMeasureTypeKeyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Insert object of specified type
 */
export const apiVVersionApiVersionMenuItems = (
    utahUdotAtspmDataModelsMenuItem: UtahUdotAtspmDataModelsMenuItem,
    params?: ApiVVersionApiVersionMenuItemsParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/MenuItems`, method: 'POST',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: utahUdotAtspmDataModelsMenuItem,
        params
    },
      );
    }
  


export const getApiVVersionApiVersionMenuItemsMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionMenuItems>>, TError,{data: UtahUdotAtspmDataModelsMenuItem;params?: ApiVVersionApiVersionMenuItemsParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionMenuItems>>, TError,{data: UtahUdotAtspmDataModelsMenuItem;params?: ApiVVersionApiVersionMenuItemsParams}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiVVersionApiVersionMenuItems>>, {data: UtahUdotAtspmDataModelsMenuItem;params?: ApiVVersionApiVersionMenuItemsParams}> = (props) => {
          const {data,params} = props ?? {};

          return  apiVVersionApiVersionMenuItems(data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiVVersionApiVersionMenuItemsMutationResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionMenuItems>>>
    export type ApiVVersionApiVersionMenuItemsMutationBody = UtahUdotAtspmDataModelsMenuItem
    export type ApiVVersionApiVersionMenuItemsMutationError = void

    /**
 * @summary Insert object of specified type
 */
export const useApiVVersionApiVersionMenuItems = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionMenuItems>>, TError,{data: UtahUdotAtspmDataModelsMenuItem;params?: ApiVVersionApiVersionMenuItemsParams}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof apiVVersionApiVersionMenuItems>>,
        TError,
        {data: UtahUdotAtspmDataModelsMenuItem;params?: ApiVVersionApiVersionMenuItemsParams},
        TContext
      > => {

      const mutationOptions = getApiVVersionApiVersionMenuItemsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Collection of objects from oData query.
 */
export const apiVVersionApiVersionMenuItemsCount = (
    params?: ApiVVersionApiVersionMenuItemsCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsMenuItem[]>(
      {url: `/api/v1/MenuItems/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionMenuItemsCountQueryKey = (params?: ApiVVersionApiVersionMenuItemsCountParams,) => {
    return [`/api/v1/MenuItems/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionMenuItemsCountQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionMenuItemsCount>>, TError = void>(params?: ApiVVersionApiVersionMenuItemsCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionMenuItemsCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionMenuItemsCountQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionMenuItemsCount>>> = ({ signal }) => apiVVersionApiVersionMenuItemsCount(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionMenuItemsCount>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionMenuItemsCountQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionMenuItemsCount>>>
export type ApiVVersionApiVersionMenuItemsCountQueryError = void


/**
 * @summary Collection of objects from oData query.
 */

export function useApiVVersionApiVersionMenuItemsCount<TData = Awaited<ReturnType<typeof apiVVersionApiVersionMenuItemsCount>>, TError = void>(
 params?: ApiVVersionApiVersionMenuItemsCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionMenuItemsCount>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionMenuItemsCountQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Delete object of specified type
 */
export const apiVVersionApiVersionMenuItemsKey = (
    key: number,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/MenuItems/${key}`, method: 'DELETE'
    },
      );
    }
  


export const getApiVVersionApiVersionMenuItemsKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionMenuItemsKey>>, TError,{key: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionMenuItemsKey>>, TError,{key: number}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiVVersionApiVersionMenuItemsKey>>, {key: number}> = (props) => {
          const {key} = props ?? {};

          return  apiVVersionApiVersionMenuItemsKey(key,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiVVersionApiVersionMenuItemsKeyMutationResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionMenuItemsKey>>>
    
    export type ApiVVersionApiVersionMenuItemsKeyMutationError = void

    /**
 * @summary Delete object of specified type
 */
export const useApiVVersionApiVersionMenuItemsKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionMenuItemsKey>>, TError,{key: number}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof apiVVersionApiVersionMenuItemsKey>>,
        TError,
        {key: number},
        TContext
      > => {

      const mutationOptions = getApiVVersionApiVersionMenuItemsKeyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Insert object of specified type
 */
export const apiVVersionApiVersionProduct = (
    utahUdotAtspmDataModelsProduct: UtahUdotAtspmDataModelsProduct,
    params?: ApiVVersionApiVersionProductParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/Product`, method: 'POST',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: utahUdotAtspmDataModelsProduct,
        params
    },
      );
    }
  


export const getApiVVersionApiVersionProductMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionProduct>>, TError,{data: UtahUdotAtspmDataModelsProduct;params?: ApiVVersionApiVersionProductParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionProduct>>, TError,{data: UtahUdotAtspmDataModelsProduct;params?: ApiVVersionApiVersionProductParams}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiVVersionApiVersionProduct>>, {data: UtahUdotAtspmDataModelsProduct;params?: ApiVVersionApiVersionProductParams}> = (props) => {
          const {data,params} = props ?? {};

          return  apiVVersionApiVersionProduct(data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiVVersionApiVersionProductMutationResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionProduct>>>
    export type ApiVVersionApiVersionProductMutationBody = UtahUdotAtspmDataModelsProduct
    export type ApiVVersionApiVersionProductMutationError = void

    /**
 * @summary Insert object of specified type
 */
export const useApiVVersionApiVersionProduct = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionProduct>>, TError,{data: UtahUdotAtspmDataModelsProduct;params?: ApiVVersionApiVersionProductParams}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof apiVVersionApiVersionProduct>>,
        TError,
        {data: UtahUdotAtspmDataModelsProduct;params?: ApiVVersionApiVersionProductParams},
        TContext
      > => {

      const mutationOptions = getApiVVersionApiVersionProductMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Collection of objects from oData query.
 */
export const apiVVersionApiVersionProductCount = (
    params?: ApiVVersionApiVersionProductCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsProduct[]>(
      {url: `/api/v1/Product/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionProductCountQueryKey = (params?: ApiVVersionApiVersionProductCountParams,) => {
    return [`/api/v1/Product/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionProductCountQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionProductCount>>, TError = void>(params?: ApiVVersionApiVersionProductCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionProductCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionProductCountQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionProductCount>>> = ({ signal }) => apiVVersionApiVersionProductCount(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionProductCount>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionProductCountQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionProductCount>>>
export type ApiVVersionApiVersionProductCountQueryError = void


/**
 * @summary Collection of objects from oData query.
 */

export function useApiVVersionApiVersionProductCount<TData = Awaited<ReturnType<typeof apiVVersionApiVersionProductCount>>, TError = void>(
 params?: ApiVVersionApiVersionProductCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionProductCount>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionProductCountQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Delete object of specified type
 */
export const apiVVersionApiVersionProductKey = (
    key: number,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/Product/${key}`, method: 'DELETE'
    },
      );
    }
  


export const getApiVVersionApiVersionProductKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionProductKey>>, TError,{key: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionProductKey>>, TError,{key: number}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiVVersionApiVersionProductKey>>, {key: number}> = (props) => {
          const {key} = props ?? {};

          return  apiVVersionApiVersionProductKey(key,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiVVersionApiVersionProductKeyMutationResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionProductKey>>>
    
    export type ApiVVersionApiVersionProductKeyMutationError = void

    /**
 * @summary Delete object of specified type
 */
export const useApiVVersionApiVersionProductKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionProductKey>>, TError,{key: number}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof apiVVersionApiVersionProductKey>>,
        TError,
        {key: number},
        TContext
      > => {

      const mutationOptions = getApiVVersionApiVersionProductKeyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Utah.Udot.Atspm.Data.Models.Location navigation property action
 */
export const apiVVersionApiVersionRegionKeyLocations = (
    key: number,
    params?: ApiVVersionApiVersionRegionKeyLocationsParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsLocation[]>(
      {url: `/api/v1/Region/${key}/locations`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionRegionKeyLocationsQueryKey = (key: number,
    params?: ApiVVersionApiVersionRegionKeyLocationsParams,) => {
    return [`/api/v1/Region/${key}/locations`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionRegionKeyLocationsQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionRegionKeyLocations>>, TError = void>(key: number,
    params?: ApiVVersionApiVersionRegionKeyLocationsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionRegionKeyLocations>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionRegionKeyLocationsQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionRegionKeyLocations>>> = ({ signal }) => apiVVersionApiVersionRegionKeyLocations(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionRegionKeyLocations>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionRegionKeyLocationsQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionRegionKeyLocations>>>
export type ApiVVersionApiVersionRegionKeyLocationsQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.Location navigation property action
 */

export function useApiVVersionApiVersionRegionKeyLocations<TData = Awaited<ReturnType<typeof apiVVersionApiVersionRegionKeyLocations>>, TError = void>(
 key: number,
    params?: ApiVVersionApiVersionRegionKeyLocationsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionRegionKeyLocations>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionRegionKeyLocationsQueryOptions(key,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Utah.Udot.Atspm.Data.Models.Location navigation property action
 */
export const apiVVersionApiVersionRegionKeyLocationsCount = (
    key: number,
    params?: ApiVVersionApiVersionRegionKeyLocationsCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsLocation[]>(
      {url: `/api/v1/Region/${key}/locations/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionRegionKeyLocationsCountQueryKey = (key: number,
    params?: ApiVVersionApiVersionRegionKeyLocationsCountParams,) => {
    return [`/api/v1/Region/${key}/locations/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionRegionKeyLocationsCountQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionRegionKeyLocationsCount>>, TError = void>(key: number,
    params?: ApiVVersionApiVersionRegionKeyLocationsCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionRegionKeyLocationsCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionRegionKeyLocationsCountQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionRegionKeyLocationsCount>>> = ({ signal }) => apiVVersionApiVersionRegionKeyLocationsCount(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionRegionKeyLocationsCount>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionRegionKeyLocationsCountQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionRegionKeyLocationsCount>>>
export type ApiVVersionApiVersionRegionKeyLocationsCountQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.Location navigation property action
 */

export function useApiVVersionApiVersionRegionKeyLocationsCount<TData = Awaited<ReturnType<typeof apiVVersionApiVersionRegionKeyLocationsCount>>, TError = void>(
 key: number,
    params?: ApiVVersionApiVersionRegionKeyLocationsCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionRegionKeyLocationsCount>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionRegionKeyLocationsCountQueryOptions(key,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Collection of objects from oData query.
 */
export const apiVVersionApiVersionRegion = (
    params?: ApiVVersionApiVersionRegionParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsRegion[]>(
      {url: `/api/v1/Region`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionRegionQueryKey = (params?: ApiVVersionApiVersionRegionParams,) => {
    return [`/api/v1/Region`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionRegionQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionRegion>>, TError = void>(params?: ApiVVersionApiVersionRegionParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionRegion>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionRegionQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionRegion>>> = ({ signal }) => apiVVersionApiVersionRegion(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionRegion>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionRegionQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionRegion>>>
export type ApiVVersionApiVersionRegionQueryError = void


/**
 * @summary Collection of objects from oData query.
 */

export function useApiVVersionApiVersionRegion<TData = Awaited<ReturnType<typeof apiVVersionApiVersionRegion>>, TError = void>(
 params?: ApiVVersionApiVersionRegionParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionRegion>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionRegionQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const apiVVersionApiVersionRegionKey = (
    key: number,
    utahUdotAtspmDataModelsRegion: UtahUdotAtspmDataModelsRegion,
    params?: ApiVVersionApiVersionRegionKeyParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/Region/${key}`, method: 'PUT',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: utahUdotAtspmDataModelsRegion,
        params
    },
      );
    }
  


export const getApiVVersionApiVersionRegionKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionRegionKey>>, TError,{key: number;data: UtahUdotAtspmDataModelsRegion;params?: ApiVVersionApiVersionRegionKeyParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionRegionKey>>, TError,{key: number;data: UtahUdotAtspmDataModelsRegion;params?: ApiVVersionApiVersionRegionKeyParams}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiVVersionApiVersionRegionKey>>, {key: number;data: UtahUdotAtspmDataModelsRegion;params?: ApiVVersionApiVersionRegionKeyParams}> = (props) => {
          const {key,data,params} = props ?? {};

          return  apiVVersionApiVersionRegionKey(key,data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiVVersionApiVersionRegionKeyMutationResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionRegionKey>>>
    export type ApiVVersionApiVersionRegionKeyMutationBody = UtahUdotAtspmDataModelsRegion
    export type ApiVVersionApiVersionRegionKeyMutationError = void

    export const useApiVVersionApiVersionRegionKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionRegionKey>>, TError,{key: number;data: UtahUdotAtspmDataModelsRegion;params?: ApiVVersionApiVersionRegionKeyParams}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof apiVVersionApiVersionRegionKey>>,
        TError,
        {key: number;data: UtahUdotAtspmDataModelsRegion;params?: ApiVVersionApiVersionRegionKeyParams},
        TContext
      > => {

      const mutationOptions = getApiVVersionApiVersionRegionKeyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Collection of objects from oData query.
 */
export const apiVVersionApiVersionRegionCount = (
    params?: ApiVVersionApiVersionRegionCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsRegion[]>(
      {url: `/api/v1/Region/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionRegionCountQueryKey = (params?: ApiVVersionApiVersionRegionCountParams,) => {
    return [`/api/v1/Region/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionRegionCountQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionRegionCount>>, TError = void>(params?: ApiVVersionApiVersionRegionCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionRegionCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionRegionCountQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionRegionCount>>> = ({ signal }) => apiVVersionApiVersionRegionCount(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionRegionCount>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionRegionCountQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionRegionCount>>>
export type ApiVVersionApiVersionRegionCountQueryError = void


/**
 * @summary Collection of objects from oData query.
 */

export function useApiVVersionApiVersionRegionCount<TData = Awaited<ReturnType<typeof apiVVersionApiVersionRegionCount>>, TError = void>(
 params?: ApiVVersionApiVersionRegionCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionRegionCount>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionRegionCountQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Utah.Udot.Atspm.Data.Models.RouteLocation navigation property action
 */
export const apiVVersionApiVersionRouteKeyRouteLocations = (
    key: number,
    params?: ApiVVersionApiVersionRouteKeyRouteLocationsParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsRouteLocation[]>(
      {url: `/api/v1/Route/${key}/routeLocations`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionRouteKeyRouteLocationsQueryKey = (key: number,
    params?: ApiVVersionApiVersionRouteKeyRouteLocationsParams,) => {
    return [`/api/v1/Route/${key}/routeLocations`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionRouteKeyRouteLocationsQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionRouteKeyRouteLocations>>, TError = void>(key: number,
    params?: ApiVVersionApiVersionRouteKeyRouteLocationsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionRouteKeyRouteLocations>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionRouteKeyRouteLocationsQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionRouteKeyRouteLocations>>> = ({ signal }) => apiVVersionApiVersionRouteKeyRouteLocations(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionRouteKeyRouteLocations>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionRouteKeyRouteLocationsQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionRouteKeyRouteLocations>>>
export type ApiVVersionApiVersionRouteKeyRouteLocationsQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.RouteLocation navigation property action
 */

export function useApiVVersionApiVersionRouteKeyRouteLocations<TData = Awaited<ReturnType<typeof apiVVersionApiVersionRouteKeyRouteLocations>>, TError = void>(
 key: number,
    params?: ApiVVersionApiVersionRouteKeyRouteLocationsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionRouteKeyRouteLocations>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionRouteKeyRouteLocationsQueryOptions(key,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Utah.Udot.Atspm.Data.Models.RouteLocation navigation property action
 */
export const apiVVersionApiVersionRouteKeyRouteLocationsCount = (
    key: number,
    params?: ApiVVersionApiVersionRouteKeyRouteLocationsCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsRouteLocation[]>(
      {url: `/api/v1/Route/${key}/routeLocations/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionRouteKeyRouteLocationsCountQueryKey = (key: number,
    params?: ApiVVersionApiVersionRouteKeyRouteLocationsCountParams,) => {
    return [`/api/v1/Route/${key}/routeLocations/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionRouteKeyRouteLocationsCountQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionRouteKeyRouteLocationsCount>>, TError = void>(key: number,
    params?: ApiVVersionApiVersionRouteKeyRouteLocationsCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionRouteKeyRouteLocationsCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionRouteKeyRouteLocationsCountQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionRouteKeyRouteLocationsCount>>> = ({ signal }) => apiVVersionApiVersionRouteKeyRouteLocationsCount(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionRouteKeyRouteLocationsCount>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionRouteKeyRouteLocationsCountQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionRouteKeyRouteLocationsCount>>>
export type ApiVVersionApiVersionRouteKeyRouteLocationsCountQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.RouteLocation navigation property action
 */

export function useApiVVersionApiVersionRouteKeyRouteLocationsCount<TData = Awaited<ReturnType<typeof apiVVersionApiVersionRouteKeyRouteLocationsCount>>, TError = void>(
 key: number,
    params?: ApiVVersionApiVersionRouteKeyRouteLocationsCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionRouteKeyRouteLocationsCount>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionRouteKeyRouteLocationsCountQueryOptions(key,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Creates a route with its associated route locations
 */
export const postApiV1UpsertRoute = (
    utahUdotAtspmConfigApiModelsRouteDto: UtahUdotAtspmConfigApiModelsRouteDto,
    params: PostApiV1UpsertRouteParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/UpsertRoute`, method: 'POST',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: utahUdotAtspmConfigApiModelsRouteDto,
        params
    },
      );
    }
  


export const getPostApiV1UpsertRouteMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1UpsertRoute>>, TError,{data: UtahUdotAtspmConfigApiModelsRouteDto;params: PostApiV1UpsertRouteParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiV1UpsertRoute>>, TError,{data: UtahUdotAtspmConfigApiModelsRouteDto;params: PostApiV1UpsertRouteParams}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiV1UpsertRoute>>, {data: UtahUdotAtspmConfigApiModelsRouteDto;params: PostApiV1UpsertRouteParams}> = (props) => {
          const {data,params} = props ?? {};

          return  postApiV1UpsertRoute(data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiV1UpsertRouteMutationResult = NonNullable<Awaited<ReturnType<typeof postApiV1UpsertRoute>>>
    export type PostApiV1UpsertRouteMutationBody = UtahUdotAtspmConfigApiModelsRouteDto
    export type PostApiV1UpsertRouteMutationError = void

    /**
 * @summary Creates a route with its associated route locations
 */
export const usePostApiV1UpsertRoute = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1UpsertRoute>>, TError,{data: UtahUdotAtspmConfigApiModelsRouteDto;params: PostApiV1UpsertRouteParams}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof postApiV1UpsertRoute>>,
        TError,
        {data: UtahUdotAtspmConfigApiModelsRouteDto;params: PostApiV1UpsertRouteParams},
        TContext
      > => {

      const mutationOptions = getPostApiV1UpsertRouteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
export const getApiV1GetRouteViewId = (
    id: number,
    params: GetApiV1GetRouteViewIdParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/GetRouteView/${id}`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetApiV1GetRouteViewIdQueryKey = (id: number,
    params: GetApiV1GetRouteViewIdParams,) => {
    return [`/api/v1/GetRouteView/${id}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiV1GetRouteViewIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiV1GetRouteViewId>>, TError = void>(id: number,
    params: GetApiV1GetRouteViewIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiV1GetRouteViewId>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1GetRouteViewIdQueryKey(id,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1GetRouteViewId>>> = ({ signal }) => getApiV1GetRouteViewId(id,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiV1GetRouteViewId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiV1GetRouteViewIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1GetRouteViewId>>>
export type GetApiV1GetRouteViewIdQueryError = void



export function useGetApiV1GetRouteViewId<TData = Awaited<ReturnType<typeof getApiV1GetRouteViewId>>, TError = void>(
 id: number,
    params: GetApiV1GetRouteViewIdParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiV1GetRouteViewId>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetApiV1GetRouteViewIdQueryOptions(id,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Insert object of specified type
 */
export const apiVVersionApiVersionRoute = (
    utahUdotAtspmDataModelsRoute: UtahUdotAtspmDataModelsRoute,
    params?: ApiVVersionApiVersionRouteParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/Route`, method: 'POST',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: utahUdotAtspmDataModelsRoute,
        params
    },
      );
    }
  


export const getApiVVersionApiVersionRouteMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionRoute>>, TError,{data: UtahUdotAtspmDataModelsRoute;params?: ApiVVersionApiVersionRouteParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionRoute>>, TError,{data: UtahUdotAtspmDataModelsRoute;params?: ApiVVersionApiVersionRouteParams}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiVVersionApiVersionRoute>>, {data: UtahUdotAtspmDataModelsRoute;params?: ApiVVersionApiVersionRouteParams}> = (props) => {
          const {data,params} = props ?? {};

          return  apiVVersionApiVersionRoute(data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiVVersionApiVersionRouteMutationResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionRoute>>>
    export type ApiVVersionApiVersionRouteMutationBody = UtahUdotAtspmDataModelsRoute
    export type ApiVVersionApiVersionRouteMutationError = void

    /**
 * @summary Insert object of specified type
 */
export const useApiVVersionApiVersionRoute = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionRoute>>, TError,{data: UtahUdotAtspmDataModelsRoute;params?: ApiVVersionApiVersionRouteParams}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof apiVVersionApiVersionRoute>>,
        TError,
        {data: UtahUdotAtspmDataModelsRoute;params?: ApiVVersionApiVersionRouteParams},
        TContext
      > => {

      const mutationOptions = getApiVVersionApiVersionRouteMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Collection of objects from oData query.
 */
export const apiVVersionApiVersionRouteCount = (
    params?: ApiVVersionApiVersionRouteCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsRoute[]>(
      {url: `/api/v1/Route/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionRouteCountQueryKey = (params?: ApiVVersionApiVersionRouteCountParams,) => {
    return [`/api/v1/Route/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionRouteCountQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionRouteCount>>, TError = void>(params?: ApiVVersionApiVersionRouteCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionRouteCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionRouteCountQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionRouteCount>>> = ({ signal }) => apiVVersionApiVersionRouteCount(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionRouteCount>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionRouteCountQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionRouteCount>>>
export type ApiVVersionApiVersionRouteCountQueryError = void


/**
 * @summary Collection of objects from oData query.
 */

export function useApiVVersionApiVersionRouteCount<TData = Awaited<ReturnType<typeof apiVVersionApiVersionRouteCount>>, TError = void>(
 params?: ApiVVersionApiVersionRouteCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionRouteCount>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionRouteCountQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Delete object of specified type
 */
export const apiVVersionApiVersionRouteKey = (
    key: number,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/Route/${key}`, method: 'DELETE'
    },
      );
    }
  


export const getApiVVersionApiVersionRouteKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionRouteKey>>, TError,{key: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionRouteKey>>, TError,{key: number}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiVVersionApiVersionRouteKey>>, {key: number}> = (props) => {
          const {key} = props ?? {};

          return  apiVVersionApiVersionRouteKey(key,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiVVersionApiVersionRouteKeyMutationResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionRouteKey>>>
    
    export type ApiVVersionApiVersionRouteKeyMutationError = void

    /**
 * @summary Delete object of specified type
 */
export const useApiVVersionApiVersionRouteKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionRouteKey>>, TError,{key: number}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof apiVVersionApiVersionRouteKey>>,
        TError,
        {key: number},
        TContext
      > => {

      const mutationOptions = getApiVVersionApiVersionRouteKeyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Utah.Udot.Atspm.Data.Models.RouteLocation navigation property action
 */
export const apiVVersionApiVersionRouteDistanceKeyPreviousLocations = (
    key: number,
    params?: ApiVVersionApiVersionRouteDistanceKeyPreviousLocationsParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsRouteLocation[]>(
      {url: `/api/v1/RouteDistance/${key}/previousLocations`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionRouteDistanceKeyPreviousLocationsQueryKey = (key: number,
    params?: ApiVVersionApiVersionRouteDistanceKeyPreviousLocationsParams,) => {
    return [`/api/v1/RouteDistance/${key}/previousLocations`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionRouteDistanceKeyPreviousLocationsQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionRouteDistanceKeyPreviousLocations>>, TError = void>(key: number,
    params?: ApiVVersionApiVersionRouteDistanceKeyPreviousLocationsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionRouteDistanceKeyPreviousLocations>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionRouteDistanceKeyPreviousLocationsQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionRouteDistanceKeyPreviousLocations>>> = ({ signal }) => apiVVersionApiVersionRouteDistanceKeyPreviousLocations(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionRouteDistanceKeyPreviousLocations>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionRouteDistanceKeyPreviousLocationsQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionRouteDistanceKeyPreviousLocations>>>
export type ApiVVersionApiVersionRouteDistanceKeyPreviousLocationsQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.RouteLocation navigation property action
 */

export function useApiVVersionApiVersionRouteDistanceKeyPreviousLocations<TData = Awaited<ReturnType<typeof apiVVersionApiVersionRouteDistanceKeyPreviousLocations>>, TError = void>(
 key: number,
    params?: ApiVVersionApiVersionRouteDistanceKeyPreviousLocationsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionRouteDistanceKeyPreviousLocations>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionRouteDistanceKeyPreviousLocationsQueryOptions(key,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Utah.Udot.Atspm.Data.Models.RouteLocation navigation property action
 */
export const apiVVersionApiVersionRouteDistanceKeyPreviousLocationsCount = (
    key: number,
    params?: ApiVVersionApiVersionRouteDistanceKeyPreviousLocationsCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsRouteLocation[]>(
      {url: `/api/v1/RouteDistance/${key}/previousLocations/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionRouteDistanceKeyPreviousLocationsCountQueryKey = (key: number,
    params?: ApiVVersionApiVersionRouteDistanceKeyPreviousLocationsCountParams,) => {
    return [`/api/v1/RouteDistance/${key}/previousLocations/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionRouteDistanceKeyPreviousLocationsCountQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionRouteDistanceKeyPreviousLocationsCount>>, TError = void>(key: number,
    params?: ApiVVersionApiVersionRouteDistanceKeyPreviousLocationsCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionRouteDistanceKeyPreviousLocationsCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionRouteDistanceKeyPreviousLocationsCountQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionRouteDistanceKeyPreviousLocationsCount>>> = ({ signal }) => apiVVersionApiVersionRouteDistanceKeyPreviousLocationsCount(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionRouteDistanceKeyPreviousLocationsCount>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionRouteDistanceKeyPreviousLocationsCountQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionRouteDistanceKeyPreviousLocationsCount>>>
export type ApiVVersionApiVersionRouteDistanceKeyPreviousLocationsCountQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.RouteLocation navigation property action
 */

export function useApiVVersionApiVersionRouteDistanceKeyPreviousLocationsCount<TData = Awaited<ReturnType<typeof apiVVersionApiVersionRouteDistanceKeyPreviousLocationsCount>>, TError = void>(
 key: number,
    params?: ApiVVersionApiVersionRouteDistanceKeyPreviousLocationsCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionRouteDistanceKeyPreviousLocationsCount>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionRouteDistanceKeyPreviousLocationsCountQueryOptions(key,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Utah.Udot.Atspm.Data.Models.RouteLocation navigation property action
 */
export const apiVVersionApiVersionRouteDistanceKeyNextLocations = (
    key: number,
    params?: ApiVVersionApiVersionRouteDistanceKeyNextLocationsParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsRouteLocation[]>(
      {url: `/api/v1/RouteDistance/${key}/nextLocations`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionRouteDistanceKeyNextLocationsQueryKey = (key: number,
    params?: ApiVVersionApiVersionRouteDistanceKeyNextLocationsParams,) => {
    return [`/api/v1/RouteDistance/${key}/nextLocations`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionRouteDistanceKeyNextLocationsQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionRouteDistanceKeyNextLocations>>, TError = void>(key: number,
    params?: ApiVVersionApiVersionRouteDistanceKeyNextLocationsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionRouteDistanceKeyNextLocations>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionRouteDistanceKeyNextLocationsQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionRouteDistanceKeyNextLocations>>> = ({ signal }) => apiVVersionApiVersionRouteDistanceKeyNextLocations(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionRouteDistanceKeyNextLocations>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionRouteDistanceKeyNextLocationsQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionRouteDistanceKeyNextLocations>>>
export type ApiVVersionApiVersionRouteDistanceKeyNextLocationsQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.RouteLocation navigation property action
 */

export function useApiVVersionApiVersionRouteDistanceKeyNextLocations<TData = Awaited<ReturnType<typeof apiVVersionApiVersionRouteDistanceKeyNextLocations>>, TError = void>(
 key: number,
    params?: ApiVVersionApiVersionRouteDistanceKeyNextLocationsParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionRouteDistanceKeyNextLocations>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionRouteDistanceKeyNextLocationsQueryOptions(key,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Utah.Udot.Atspm.Data.Models.RouteLocation navigation property action
 */
export const apiVVersionApiVersionRouteDistanceKeyNextLocationsCount = (
    key: number,
    params?: ApiVVersionApiVersionRouteDistanceKeyNextLocationsCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsRouteLocation[]>(
      {url: `/api/v1/RouteDistance/${key}/nextLocations/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionRouteDistanceKeyNextLocationsCountQueryKey = (key: number,
    params?: ApiVVersionApiVersionRouteDistanceKeyNextLocationsCountParams,) => {
    return [`/api/v1/RouteDistance/${key}/nextLocations/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionRouteDistanceKeyNextLocationsCountQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionRouteDistanceKeyNextLocationsCount>>, TError = void>(key: number,
    params?: ApiVVersionApiVersionRouteDistanceKeyNextLocationsCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionRouteDistanceKeyNextLocationsCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionRouteDistanceKeyNextLocationsCountQueryKey(key,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionRouteDistanceKeyNextLocationsCount>>> = ({ signal }) => apiVVersionApiVersionRouteDistanceKeyNextLocationsCount(key,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(key), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionRouteDistanceKeyNextLocationsCount>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionRouteDistanceKeyNextLocationsCountQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionRouteDistanceKeyNextLocationsCount>>>
export type ApiVVersionApiVersionRouteDistanceKeyNextLocationsCountQueryError = void


/**
 * @summary Utah.Udot.Atspm.Data.Models.RouteLocation navigation property action
 */

export function useApiVVersionApiVersionRouteDistanceKeyNextLocationsCount<TData = Awaited<ReturnType<typeof apiVVersionApiVersionRouteDistanceKeyNextLocationsCount>>, TError = void>(
 key: number,
    params?: ApiVVersionApiVersionRouteDistanceKeyNextLocationsCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionRouteDistanceKeyNextLocationsCount>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionRouteDistanceKeyNextLocationsCountQueryOptions(key,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Gets the Utah.Udot.Atspm.Data.Models.RouteDistance that contains locationA and locationB
 */
export const apiVVersionApiVersionRouteDistanceGetRouteDistanceByLocationIdentifiersLocationALocationALocationBLocationB = (
    locationA: string,
    locationB: string,
    params?: ApiVVersionApiVersionRouteDistanceGetRouteDistanceByLocationIdentifiersLocationALocationALocationBLocationBParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsRouteDistance | void>(
      {url: `/api/v1/RouteDistance/GetRouteDistanceByLocationIdentifiers(locationA=${locationA},locationB=${locationB})`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionRouteDistanceGetRouteDistanceByLocationIdentifiersLocationALocationALocationBLocationBQueryKey = (locationA: string,
    locationB: string,
    params?: ApiVVersionApiVersionRouteDistanceGetRouteDistanceByLocationIdentifiersLocationALocationALocationBLocationBParams,) => {
    return [`/api/v1/RouteDistance/GetRouteDistanceByLocationIdentifiers(locationA=${locationA},locationB=${locationB})`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionRouteDistanceGetRouteDistanceByLocationIdentifiersLocationALocationALocationBLocationBQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionRouteDistanceGetRouteDistanceByLocationIdentifiersLocationALocationALocationBLocationB>>, TError = void>(locationA: string,
    locationB: string,
    params?: ApiVVersionApiVersionRouteDistanceGetRouteDistanceByLocationIdentifiersLocationALocationALocationBLocationBParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionRouteDistanceGetRouteDistanceByLocationIdentifiersLocationALocationALocationBLocationB>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionRouteDistanceGetRouteDistanceByLocationIdentifiersLocationALocationALocationBLocationBQueryKey(locationA,locationB,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionRouteDistanceGetRouteDistanceByLocationIdentifiersLocationALocationALocationBLocationB>>> = ({ signal }) => apiVVersionApiVersionRouteDistanceGetRouteDistanceByLocationIdentifiersLocationALocationALocationBLocationB(locationA,locationB,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(locationA && locationB), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionRouteDistanceGetRouteDistanceByLocationIdentifiersLocationALocationALocationBLocationB>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionRouteDistanceGetRouteDistanceByLocationIdentifiersLocationALocationALocationBLocationBQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionRouteDistanceGetRouteDistanceByLocationIdentifiersLocationALocationALocationBLocationB>>>
export type ApiVVersionApiVersionRouteDistanceGetRouteDistanceByLocationIdentifiersLocationALocationALocationBLocationBQueryError = void


/**
 * @summary Gets the Utah.Udot.Atspm.Data.Models.RouteDistance that contains locationA and locationB
 */

export function useApiVVersionApiVersionRouteDistanceGetRouteDistanceByLocationIdentifiersLocationALocationALocationBLocationB<TData = Awaited<ReturnType<typeof apiVVersionApiVersionRouteDistanceGetRouteDistanceByLocationIdentifiersLocationALocationALocationBLocationB>>, TError = void>(
 locationA: string,
    locationB: string,
    params?: ApiVVersionApiVersionRouteDistanceGetRouteDistanceByLocationIdentifiersLocationALocationALocationBLocationBParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionRouteDistanceGetRouteDistanceByLocationIdentifiersLocationALocationALocationBLocationB>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionRouteDistanceGetRouteDistanceByLocationIdentifiersLocationALocationALocationBLocationBQueryOptions(locationA,locationB,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Insert object of specified type
 */
export const apiVVersionApiVersionRouteDistance = (
    utahUdotAtspmDataModelsRouteDistance: UtahUdotAtspmDataModelsRouteDistance,
    params?: ApiVVersionApiVersionRouteDistanceParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/RouteDistance`, method: 'POST',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: utahUdotAtspmDataModelsRouteDistance,
        params
    },
      );
    }
  


export const getApiVVersionApiVersionRouteDistanceMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionRouteDistance>>, TError,{data: UtahUdotAtspmDataModelsRouteDistance;params?: ApiVVersionApiVersionRouteDistanceParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionRouteDistance>>, TError,{data: UtahUdotAtspmDataModelsRouteDistance;params?: ApiVVersionApiVersionRouteDistanceParams}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiVVersionApiVersionRouteDistance>>, {data: UtahUdotAtspmDataModelsRouteDistance;params?: ApiVVersionApiVersionRouteDistanceParams}> = (props) => {
          const {data,params} = props ?? {};

          return  apiVVersionApiVersionRouteDistance(data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiVVersionApiVersionRouteDistanceMutationResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionRouteDistance>>>
    export type ApiVVersionApiVersionRouteDistanceMutationBody = UtahUdotAtspmDataModelsRouteDistance
    export type ApiVVersionApiVersionRouteDistanceMutationError = void

    /**
 * @summary Insert object of specified type
 */
export const useApiVVersionApiVersionRouteDistance = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionRouteDistance>>, TError,{data: UtahUdotAtspmDataModelsRouteDistance;params?: ApiVVersionApiVersionRouteDistanceParams}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof apiVVersionApiVersionRouteDistance>>,
        TError,
        {data: UtahUdotAtspmDataModelsRouteDistance;params?: ApiVVersionApiVersionRouteDistanceParams},
        TContext
      > => {

      const mutationOptions = getApiVVersionApiVersionRouteDistanceMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Collection of objects from oData query.
 */
export const apiVVersionApiVersionRouteDistanceCount = (
    params?: ApiVVersionApiVersionRouteDistanceCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsRouteDistance[]>(
      {url: `/api/v1/RouteDistance/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionRouteDistanceCountQueryKey = (params?: ApiVVersionApiVersionRouteDistanceCountParams,) => {
    return [`/api/v1/RouteDistance/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionRouteDistanceCountQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionRouteDistanceCount>>, TError = void>(params?: ApiVVersionApiVersionRouteDistanceCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionRouteDistanceCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionRouteDistanceCountQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionRouteDistanceCount>>> = ({ signal }) => apiVVersionApiVersionRouteDistanceCount(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionRouteDistanceCount>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionRouteDistanceCountQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionRouteDistanceCount>>>
export type ApiVVersionApiVersionRouteDistanceCountQueryError = void


/**
 * @summary Collection of objects from oData query.
 */

export function useApiVVersionApiVersionRouteDistanceCount<TData = Awaited<ReturnType<typeof apiVVersionApiVersionRouteDistanceCount>>, TError = void>(
 params?: ApiVVersionApiVersionRouteDistanceCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionRouteDistanceCount>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionRouteDistanceCountQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Delete object of specified type
 */
export const apiVVersionApiVersionRouteDistanceKey = (
    key: number,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/RouteDistance/${key}`, method: 'DELETE'
    },
      );
    }
  


export const getApiVVersionApiVersionRouteDistanceKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionRouteDistanceKey>>, TError,{key: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionRouteDistanceKey>>, TError,{key: number}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiVVersionApiVersionRouteDistanceKey>>, {key: number}> = (props) => {
          const {key} = props ?? {};

          return  apiVVersionApiVersionRouteDistanceKey(key,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiVVersionApiVersionRouteDistanceKeyMutationResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionRouteDistanceKey>>>
    
    export type ApiVVersionApiVersionRouteDistanceKeyMutationError = void

    /**
 * @summary Delete object of specified type
 */
export const useApiVVersionApiVersionRouteDistanceKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionRouteDistanceKey>>, TError,{key: number}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof apiVVersionApiVersionRouteDistanceKey>>,
        TError,
        {key: number},
        TContext
      > => {

      const mutationOptions = getApiVVersionApiVersionRouteDistanceKeyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Insert object of specified type
 */
export const apiVVersionApiVersionRouteLocation = (
    utahUdotAtspmDataModelsRouteLocation: UtahUdotAtspmDataModelsRouteLocation,
    params?: ApiVVersionApiVersionRouteLocationParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/RouteLocation`, method: 'POST',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: utahUdotAtspmDataModelsRouteLocation,
        params
    },
      );
    }
  


export const getApiVVersionApiVersionRouteLocationMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionRouteLocation>>, TError,{data: UtahUdotAtspmDataModelsRouteLocation;params?: ApiVVersionApiVersionRouteLocationParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionRouteLocation>>, TError,{data: UtahUdotAtspmDataModelsRouteLocation;params?: ApiVVersionApiVersionRouteLocationParams}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiVVersionApiVersionRouteLocation>>, {data: UtahUdotAtspmDataModelsRouteLocation;params?: ApiVVersionApiVersionRouteLocationParams}> = (props) => {
          const {data,params} = props ?? {};

          return  apiVVersionApiVersionRouteLocation(data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiVVersionApiVersionRouteLocationMutationResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionRouteLocation>>>
    export type ApiVVersionApiVersionRouteLocationMutationBody = UtahUdotAtspmDataModelsRouteLocation
    export type ApiVVersionApiVersionRouteLocationMutationError = void

    /**
 * @summary Insert object of specified type
 */
export const useApiVVersionApiVersionRouteLocation = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionRouteLocation>>, TError,{data: UtahUdotAtspmDataModelsRouteLocation;params?: ApiVVersionApiVersionRouteLocationParams}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof apiVVersionApiVersionRouteLocation>>,
        TError,
        {data: UtahUdotAtspmDataModelsRouteLocation;params?: ApiVVersionApiVersionRouteLocationParams},
        TContext
      > => {

      const mutationOptions = getApiVVersionApiVersionRouteLocationMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Collection of objects from oData query.
 */
export const apiVVersionApiVersionRouteLocationCount = (
    params?: ApiVVersionApiVersionRouteLocationCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsRouteLocation[]>(
      {url: `/api/v1/RouteLocation/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionRouteLocationCountQueryKey = (params?: ApiVVersionApiVersionRouteLocationCountParams,) => {
    return [`/api/v1/RouteLocation/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionRouteLocationCountQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionRouteLocationCount>>, TError = void>(params?: ApiVVersionApiVersionRouteLocationCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionRouteLocationCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionRouteLocationCountQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionRouteLocationCount>>> = ({ signal }) => apiVVersionApiVersionRouteLocationCount(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionRouteLocationCount>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionRouteLocationCountQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionRouteLocationCount>>>
export type ApiVVersionApiVersionRouteLocationCountQueryError = void


/**
 * @summary Collection of objects from oData query.
 */

export function useApiVVersionApiVersionRouteLocationCount<TData = Awaited<ReturnType<typeof apiVVersionApiVersionRouteLocationCount>>, TError = void>(
 params?: ApiVVersionApiVersionRouteLocationCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionRouteLocationCount>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionRouteLocationCountQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Delete object of specified type
 */
export const apiVVersionApiVersionRouteLocationKey = (
    key: number,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/RouteLocation/${key}`, method: 'DELETE'
    },
      );
    }
  


export const getApiVVersionApiVersionRouteLocationKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionRouteLocationKey>>, TError,{key: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionRouteLocationKey>>, TError,{key: number}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiVVersionApiVersionRouteLocationKey>>, {key: number}> = (props) => {
          const {key} = props ?? {};

          return  apiVVersionApiVersionRouteLocationKey(key,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiVVersionApiVersionRouteLocationKeyMutationResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionRouteLocationKey>>>
    
    export type ApiVVersionApiVersionRouteLocationKeyMutationError = void

    /**
 * @summary Delete object of specified type
 */
export const useApiVVersionApiVersionRouteLocationKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionRouteLocationKey>>, TError,{key: number}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof apiVVersionApiVersionRouteLocationKey>>,
        TError,
        {key: number},
        TContext
      > => {

      const mutationOptions = getApiVVersionApiVersionRouteLocationKeyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Insert object of specified type
 */
export const apiVVersionApiVersionVersionHistory = (
    utahUdotAtspmDataModelsVersionHistory: UtahUdotAtspmDataModelsVersionHistory,
    params?: ApiVVersionApiVersionVersionHistoryParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/VersionHistory`, method: 'POST',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: utahUdotAtspmDataModelsVersionHistory,
        params
    },
      );
    }
  


export const getApiVVersionApiVersionVersionHistoryMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionVersionHistory>>, TError,{data: UtahUdotAtspmDataModelsVersionHistory;params?: ApiVVersionApiVersionVersionHistoryParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionVersionHistory>>, TError,{data: UtahUdotAtspmDataModelsVersionHistory;params?: ApiVVersionApiVersionVersionHistoryParams}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiVVersionApiVersionVersionHistory>>, {data: UtahUdotAtspmDataModelsVersionHistory;params?: ApiVVersionApiVersionVersionHistoryParams}> = (props) => {
          const {data,params} = props ?? {};

          return  apiVVersionApiVersionVersionHistory(data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiVVersionApiVersionVersionHistoryMutationResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionVersionHistory>>>
    export type ApiVVersionApiVersionVersionHistoryMutationBody = UtahUdotAtspmDataModelsVersionHistory
    export type ApiVVersionApiVersionVersionHistoryMutationError = void

    /**
 * @summary Insert object of specified type
 */
export const useApiVVersionApiVersionVersionHistory = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionVersionHistory>>, TError,{data: UtahUdotAtspmDataModelsVersionHistory;params?: ApiVVersionApiVersionVersionHistoryParams}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof apiVVersionApiVersionVersionHistory>>,
        TError,
        {data: UtahUdotAtspmDataModelsVersionHistory;params?: ApiVVersionApiVersionVersionHistoryParams},
        TContext
      > => {

      const mutationOptions = getApiVVersionApiVersionVersionHistoryMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Collection of objects from oData query.
 */
export const apiVVersionApiVersionVersionHistoryCount = (
    params?: ApiVVersionApiVersionVersionHistoryCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsVersionHistory[]>(
      {url: `/api/v1/VersionHistory/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionVersionHistoryCountQueryKey = (params?: ApiVVersionApiVersionVersionHistoryCountParams,) => {
    return [`/api/v1/VersionHistory/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionVersionHistoryCountQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionVersionHistoryCount>>, TError = void>(params?: ApiVVersionApiVersionVersionHistoryCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionVersionHistoryCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionVersionHistoryCountQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionVersionHistoryCount>>> = ({ signal }) => apiVVersionApiVersionVersionHistoryCount(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionVersionHistoryCount>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionVersionHistoryCountQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionVersionHistoryCount>>>
export type ApiVVersionApiVersionVersionHistoryCountQueryError = void


/**
 * @summary Collection of objects from oData query.
 */

export function useApiVVersionApiVersionVersionHistoryCount<TData = Awaited<ReturnType<typeof apiVVersionApiVersionVersionHistoryCount>>, TError = void>(
 params?: ApiVVersionApiVersionVersionHistoryCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionVersionHistoryCount>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionVersionHistoryCountQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Delete object of specified type
 */
export const apiVVersionApiVersionVersionHistoryKey = (
    key: number,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/VersionHistory/${key}`, method: 'DELETE'
    },
      );
    }
  


export const getApiVVersionApiVersionVersionHistoryKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionVersionHistoryKey>>, TError,{key: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionVersionHistoryKey>>, TError,{key: number}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiVVersionApiVersionVersionHistoryKey>>, {key: number}> = (props) => {
          const {key} = props ?? {};

          return  apiVVersionApiVersionVersionHistoryKey(key,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiVVersionApiVersionVersionHistoryKeyMutationResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionVersionHistoryKey>>>
    
    export type ApiVVersionApiVersionVersionHistoryKeyMutationError = void

    /**
 * @summary Delete object of specified type
 */
export const useApiVVersionApiVersionVersionHistoryKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionVersionHistoryKey>>, TError,{key: number}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof apiVVersionApiVersionVersionHistoryKey>>,
        TError,
        {key: number},
        TContext
      > => {

      const mutationOptions = getApiVVersionApiVersionVersionHistoryKeyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Insert object of specified type
 */
export const apiVVersionApiVersionWatchDogIgnoreEvent = (
    utahUdotAtspmDataModelsWatchDogIgnoreEvent: UtahUdotAtspmDataModelsWatchDogIgnoreEvent,
    params?: ApiVVersionApiVersionWatchDogIgnoreEventParams,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/WatchDogIgnoreEvent`, method: 'POST',
      headers: {'Content-Type': 'application/json;odata.metadata=minimal;odata.streaming=true', },
      data: utahUdotAtspmDataModelsWatchDogIgnoreEvent,
        params
    },
      );
    }
  


export const getApiVVersionApiVersionWatchDogIgnoreEventMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionWatchDogIgnoreEvent>>, TError,{data: UtahUdotAtspmDataModelsWatchDogIgnoreEvent;params?: ApiVVersionApiVersionWatchDogIgnoreEventParams}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionWatchDogIgnoreEvent>>, TError,{data: UtahUdotAtspmDataModelsWatchDogIgnoreEvent;params?: ApiVVersionApiVersionWatchDogIgnoreEventParams}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiVVersionApiVersionWatchDogIgnoreEvent>>, {data: UtahUdotAtspmDataModelsWatchDogIgnoreEvent;params?: ApiVVersionApiVersionWatchDogIgnoreEventParams}> = (props) => {
          const {data,params} = props ?? {};

          return  apiVVersionApiVersionWatchDogIgnoreEvent(data,params,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiVVersionApiVersionWatchDogIgnoreEventMutationResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionWatchDogIgnoreEvent>>>
    export type ApiVVersionApiVersionWatchDogIgnoreEventMutationBody = UtahUdotAtspmDataModelsWatchDogIgnoreEvent
    export type ApiVVersionApiVersionWatchDogIgnoreEventMutationError = void

    /**
 * @summary Insert object of specified type
 */
export const useApiVVersionApiVersionWatchDogIgnoreEvent = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionWatchDogIgnoreEvent>>, TError,{data: UtahUdotAtspmDataModelsWatchDogIgnoreEvent;params?: ApiVVersionApiVersionWatchDogIgnoreEventParams}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof apiVVersionApiVersionWatchDogIgnoreEvent>>,
        TError,
        {data: UtahUdotAtspmDataModelsWatchDogIgnoreEvent;params?: ApiVVersionApiVersionWatchDogIgnoreEventParams},
        TContext
      > => {

      const mutationOptions = getApiVVersionApiVersionWatchDogIgnoreEventMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
/**
 * @summary Collection of objects from oData query.
 */
export const apiVVersionApiVersionWatchDogIgnoreEventCount = (
    params?: ApiVVersionApiVersionWatchDogIgnoreEventCountParams,
 signal?: AbortSignal
) => {
      
      
      return configRequest<UtahUdotAtspmDataModelsWatchDogIgnoreEvent[]>(
      {url: `/api/v1/WatchDogIgnoreEvent/$count`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getApiVVersionApiVersionWatchDogIgnoreEventCountQueryKey = (params?: ApiVVersionApiVersionWatchDogIgnoreEventCountParams,) => {
    return [`/api/v1/WatchDogIgnoreEvent/$count`, ...(params ? [params]: [])] as const;
    }

    
export const getApiVVersionApiVersionWatchDogIgnoreEventCountQueryOptions = <TData = Awaited<ReturnType<typeof apiVVersionApiVersionWatchDogIgnoreEventCount>>, TError = void>(params?: ApiVVersionApiVersionWatchDogIgnoreEventCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionWatchDogIgnoreEventCount>>, TError, TData>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getApiVVersionApiVersionWatchDogIgnoreEventCountQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof apiVVersionApiVersionWatchDogIgnoreEventCount>>> = ({ signal }) => apiVVersionApiVersionWatchDogIgnoreEventCount(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionWatchDogIgnoreEventCount>>, TError, TData> & { queryKey: QueryKey }
}

export type ApiVVersionApiVersionWatchDogIgnoreEventCountQueryResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionWatchDogIgnoreEventCount>>>
export type ApiVVersionApiVersionWatchDogIgnoreEventCountQueryError = void


/**
 * @summary Collection of objects from oData query.
 */

export function useApiVVersionApiVersionWatchDogIgnoreEventCount<TData = Awaited<ReturnType<typeof apiVVersionApiVersionWatchDogIgnoreEventCount>>, TError = void>(
 params?: ApiVVersionApiVersionWatchDogIgnoreEventCountParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiVVersionApiVersionWatchDogIgnoreEventCount>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getApiVVersionApiVersionWatchDogIgnoreEventCountQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Delete object of specified type
 */
export const apiVVersionApiVersionWatchDogIgnoreEventKey = (
    key: number,
 ) => {
      
      
      return configRequest<void>(
      {url: `/api/v1/WatchDogIgnoreEvent/${key}`, method: 'DELETE'
    },
      );
    }
  


export const getApiVVersionApiVersionWatchDogIgnoreEventKeyMutationOptions = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionWatchDogIgnoreEventKey>>, TError,{key: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionWatchDogIgnoreEventKey>>, TError,{key: number}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiVVersionApiVersionWatchDogIgnoreEventKey>>, {key: number}> = (props) => {
          const {key} = props ?? {};

          return  apiVVersionApiVersionWatchDogIgnoreEventKey(key,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ApiVVersionApiVersionWatchDogIgnoreEventKeyMutationResult = NonNullable<Awaited<ReturnType<typeof apiVVersionApiVersionWatchDogIgnoreEventKey>>>
    
    export type ApiVVersionApiVersionWatchDogIgnoreEventKeyMutationError = void

    /**
 * @summary Delete object of specified type
 */
export const useApiVVersionApiVersionWatchDogIgnoreEventKey = <TError = void,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiVVersionApiVersionWatchDogIgnoreEventKey>>, TError,{key: number}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof apiVVersionApiVersionWatchDogIgnoreEventKey>>,
        TError,
        {key: number},
        TContext
      > => {

      const mutationOptions = getApiVVersionApiVersionWatchDogIgnoreEventKeyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
