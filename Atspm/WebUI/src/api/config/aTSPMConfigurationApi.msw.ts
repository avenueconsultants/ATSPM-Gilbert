/**
 * Generated by orval v7.1.1 🍺
 * Do not edit manually.
 * ATSPM Configuration Api
 * ATSPM Configuration with OData, OpenAPI, Swashbuckle, and API versioning.
 * OpenAPI spec version: 1.0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import {
  Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes,
  Utah.Udot.Atspm.Data.Enums.DetectionTypes,
  Utah.Udot.Atspm.Data.Enums.DeviceStatus,
  Utah.Udot.Atspm.Data.Enums.DeviceTypes,
  Utah.Udot.Atspm.Data.Enums.DirectionTypes,
  Utah.Udot.Atspm.Data.Enums.LaneTypes,
  Utah.Udot.Atspm.Data.Enums.LocationVersionActions,
  Utah.Udot.Atspm.Data.Enums.MovementTypes,
  Utah.Udot.Atspm.Data.Enums.TransportProtocols,
  Utah.Udot.Atspm.Data.Enums.WatchDogComponentTypes,
  Utah.Udot.Atspm.Data.Enums.WatchDogIssueTypes
} from './aTSPMConfigurationApi.schemas'
import type {
  UtahUdotATSPMConfigApiModelsDeviceGroup,
  UtahUdotAtspmBusinessWatchdogDetectionTypeGroup,
  UtahUdotAtspmConfigApiModelsSearchLocation,
  UtahUdotAtspmDataModelsApproach,
  UtahUdotAtspmDataModelsArea,
  UtahUdotAtspmDataModelsDetectionType,
  UtahUdotAtspmDataModelsDetector,
  UtahUdotAtspmDataModelsDetectorComment,
  UtahUdotAtspmDataModelsDevice,
  UtahUdotAtspmDataModelsDeviceConfiguration,
  UtahUdotAtspmDataModelsDirectionType,
  UtahUdotAtspmDataModelsFaq,
  UtahUdotAtspmDataModelsJurisdiction,
  UtahUdotAtspmDataModelsLocation,
  UtahUdotAtspmDataModelsLocationType,
  UtahUdotAtspmDataModelsMapLayer,
  UtahUdotAtspmDataModelsMeasureComment,
  UtahUdotAtspmDataModelsMeasureOption,
  UtahUdotAtspmDataModelsMeasureType,
  UtahUdotAtspmDataModelsMenuItem,
  UtahUdotAtspmDataModelsProduct,
  UtahUdotAtspmDataModelsRegion,
  UtahUdotAtspmDataModelsRoute,
  UtahUdotAtspmDataModelsRouteDistance,
  UtahUdotAtspmDataModelsRouteLocation,
  UtahUdotAtspmDataModelsVersionHistory,
  UtahUdotAtspmDataModelsWatchDogIgnoreEvent
} from './aTSPMConfigurationApi.schemas'

export const getApiV1ApproachKeyDetectorsResponseMock = (): UtahUdotAtspmDataModelsDetector[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})))

export const getApiV1ApproachKeyDetectorsCountResponseMock = (): UtahUdotAtspmDataModelsDetector[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})))

export const getApiV1ApproachResponseMock = (): UtahUdotAtspmDataModelsApproach[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getApiV1ApproachCountResponseMock = (): UtahUdotAtspmDataModelsApproach[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getApiV1AreaKeyLocationsResponseMock = (): UtahUdotAtspmDataModelsLocation[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})))

export const getApiV1AreaKeyLocationsCountResponseMock = (): UtahUdotAtspmDataModelsLocation[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})))

export const getApiV1AreaResponseMock = (): UtahUdotAtspmDataModelsArea[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([[], undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})))

export const getApiV1AreaCountResponseMock = (): UtahUdotAtspmDataModelsArea[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([[], undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})))

export const getApiV1DetectionTypeKeyDetectorsResponseMock = (): UtahUdotAtspmDataModelsDetector[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})))

export const getApiV1DetectionTypeKeyDetectorsCountResponseMock = (): UtahUdotAtspmDataModelsDetector[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})))

export const getApiV1DetectionTypeKeyMeasureTypesResponseMock = (): UtahUdotAtspmDataModelsMeasureType[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})))

export const getApiV1DetectionTypeKeyMeasureTypesCountResponseMock = (): UtahUdotAtspmDataModelsMeasureType[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})))

export const getApiV1DetectionTypeCountResponseMock = (): UtahUdotAtspmDataModelsDetectionType[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})))

export const getApiV1DetectorKeyDetectorCommentsResponseMock = (): UtahUdotAtspmDataModelsDetectorComment[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detector: faker.helpers.arrayElement([{approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([[], undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])}, undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})))

export const getApiV1DetectorKeyDetectorCommentsCountResponseMock = (): UtahUdotAtspmDataModelsDetectorComment[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detector: faker.helpers.arrayElement([{approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([[], undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])}, undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})))

export const getApiV1DetectorKeyDetectionTypesResponseMock = (): UtahUdotAtspmDataModelsDetectionType[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})))

export const getApiV1DetectorKeyDetectionTypesCountResponseMock = (): UtahUdotAtspmDataModelsDetectionType[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})))

export const getApiV1DetectorCountResponseMock = (): UtahUdotAtspmDataModelsDetector[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})))

export const getApiV1DetectorCommentCountResponseMock = (): UtahUdotAtspmDataModelsDetectorComment[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detector: faker.helpers.arrayElement([{approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([[], undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])}, undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})))

export const getApiV1DeviceGetActiveDevicesByLocationLocationIdLocationIdResponseMock = (): UtahUdotAtspmDataModelsDevice[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})))

export const getApiV1DeviceGetActiveDevicesCountResponseMock = (): UtahUdotATSPMConfigApiModelsDeviceGroup[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({count: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})))

export const getApiV1DeviceCountResponseMock = (): UtahUdotAtspmDataModelsDevice[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})))

export const getApiV1DeviceConfigurationKeyDevicesResponseMock = (): UtahUdotAtspmDataModelsDevice[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})))

export const getApiV1DeviceConfigurationKeyDevicesCountResponseMock = (): UtahUdotAtspmDataModelsDevice[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})))

export const getApiV1DeviceConfigurationCountResponseMock = (): UtahUdotAtspmDataModelsDeviceConfiguration[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})))

export const getApiV1DirectionTypeKeyApproachesResponseMock = (): UtahUdotAtspmDataModelsApproach[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getApiV1DirectionTypeKeyApproachesCountResponseMock = (): UtahUdotAtspmDataModelsApproach[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getApiV1DirectionTypeKeyPrimaryDirectionsResponseMock = (): UtahUdotAtspmDataModelsRouteLocation[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getApiV1DirectionTypeKeyPrimaryDirectionsCountResponseMock = (): UtahUdotAtspmDataModelsRouteLocation[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getApiV1DirectionTypeKeyOpposingDirectionsResponseMock = (): UtahUdotAtspmDataModelsRouteLocation[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getApiV1DirectionTypeKeyOpposingDirectionsCountResponseMock = (): UtahUdotAtspmDataModelsRouteLocation[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getApiV1DirectionTypeCountResponseMock = (): UtahUdotAtspmDataModelsDirectionType[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])})))

export const getApiV1FaqResponseMock = (): UtahUdotAtspmDataModelsFaq[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({body: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), header: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getApiV1FaqCountResponseMock = (): UtahUdotAtspmDataModelsFaq[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({body: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), header: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getApiV1JurisdictionKeyLocationsResponseMock = (): UtahUdotAtspmDataModelsLocation[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})))

export const getApiV1JurisdictionKeyLocationsCountResponseMock = (): UtahUdotAtspmDataModelsLocation[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})))

export const getApiV1JurisdictionResponseMock = (): UtahUdotAtspmDataModelsJurisdiction[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})), undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})))

export const getApiV1JurisdictionCountResponseMock = (): UtahUdotAtspmDataModelsJurisdiction[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})), undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})))

export const getApiV1LocationKeyApproachesResponseMock = (): UtahUdotAtspmDataModelsApproach[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getApiV1LocationKeyApproachesCountResponseMock = (): UtahUdotAtspmDataModelsApproach[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getApiV1LocationKeyAreasResponseMock = (): UtahUdotAtspmDataModelsArea[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([[], undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})))

export const getApiV1LocationKeyAreasCountResponseMock = (): UtahUdotAtspmDataModelsArea[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([[], undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})))

export const getApiV1LocationKeyDevicesResponseMock = (): UtahUdotAtspmDataModelsDevice[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})))

export const getApiV1LocationKeyDevicesCountResponseMock = (): UtahUdotAtspmDataModelsDevice[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})))

export const getApiV1LocationKeyCopyLocationToNewVersionResponseMock = (overrideResponse: Partial< UtahUdotAtspmDataModelsLocation > = {}): UtahUdotAtspmDataModelsLocation => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([[], undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})), undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})), undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined]), ...overrideResponse})

export const getApiV1LocationKeySyncLocationResponseMock = (overrideResponse: Partial< UtahUdotAtspmDataModelsLocation > = {}): UtahUdotAtspmDataModelsLocation => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([[], undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})), undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})), undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined]), ...overrideResponse})

export const getApiV1LocationKeySaveTemplatedLocationResponseMock = (overrideResponse: Partial< UtahUdotAtspmDataModelsLocation > = {}): UtahUdotAtspmDataModelsLocation => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([[], undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})), undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})), undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined]), ...overrideResponse})

export const getApiV1LocationGetLatestVersionOfLocationIdentifierIdentifierResponseMock = (overrideResponse: Partial< UtahUdotAtspmDataModelsLocation > = {}): UtahUdotAtspmDataModelsLocation => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([[], undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})), undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})), undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined]), ...overrideResponse})

export const getApiV1LocationGetAllVersionsOfLocationIdentifierIdentifierResponseMock = (): UtahUdotAtspmDataModelsLocation[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})))

export const getApiV1LocationGetLatestVersionOfAllLocationsResponseMock = (): UtahUdotAtspmDataModelsLocation[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})))

export const getApiV1LocationGetDetectionTypeCountResponseMock = (): UtahUdotAtspmBusinessWatchdogDetectionTypeGroup[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({count: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})))

export const getApiV1LocationGetLocationsForSearchResponseMock = (): UtahUdotAtspmConfigApiModelsSearchLocation[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.number.int({min: undefined, max: undefined}))), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), charts: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.number.int({min: undefined, max: undefined}))), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})))

export const getApiV1LocationCountResponseMock = (): UtahUdotAtspmDataModelsLocation[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})))

export const getApiV1LocationTypeKeyLocationsResponseMock = (): UtahUdotAtspmDataModelsLocation[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})))

export const getApiV1LocationTypeKeyLocationsCountResponseMock = (): UtahUdotAtspmDataModelsLocation[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})))

export const getApiV1LocationTypeCountResponseMock = (): UtahUdotAtspmDataModelsLocationType[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})))

export const getApiV1MapLayerCountResponseMock = (): UtahUdotAtspmDataModelsMapLayer[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), createdOn: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), deletedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deletedOn: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mapLayerUrl: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), serviceType: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showByDefault: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), updatedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), updatedOn: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})))

export const getApiV1MeasureCommentKeyMeasureTypesResponseMock = (): UtahUdotAtspmDataModelsMeasureType[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})))

export const getApiV1MeasureCommentKeyMeasureTypesCountResponseMock = (): UtahUdotAtspmDataModelsMeasureType[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})))

export const getApiV1MeasureCommentCountResponseMock = (): UtahUdotAtspmDataModelsMeasureComment[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([[], undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})))

export const getApiV1MeasureOptionCountResponseMock = (): UtahUdotAtspmDataModelsMeasureOption[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])}, undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})))

export const getApiV1MeasureTypeKeyDetectionTypesResponseMock = (): UtahUdotAtspmDataModelsDetectionType[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})))

export const getApiV1MeasureTypeKeyDetectionTypesCountResponseMock = (): UtahUdotAtspmDataModelsDetectionType[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})))

export const getApiV1MeasureTypeKeyMeasureCommentsResponseMock = (): UtahUdotAtspmDataModelsMeasureComment[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([[], undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})))

export const getApiV1MeasureTypeKeyMeasureCommentsCountResponseMock = (): UtahUdotAtspmDataModelsMeasureComment[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([[], undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})))

export const getApiV1MeasureTypeCountResponseMock = (): UtahUdotAtspmDataModelsMeasureType[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})))

export const getApiV1MenuItemsCountResponseMock = (): UtahUdotAtspmDataModelsMenuItem[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({children: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), document: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), link: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), parentId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])})))

export const getApiV1ProductCountResponseMock = (): UtahUdotAtspmDataModelsProduct[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})))

export const getApiV1RegionKeyLocationsResponseMock = (): UtahUdotAtspmDataModelsLocation[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})))

export const getApiV1RegionKeyLocationsCountResponseMock = (): UtahUdotAtspmDataModelsLocation[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})))

export const getApiV1RegionResponseMock = (): UtahUdotAtspmDataModelsRegion[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})), undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})))

export const getApiV1RegionCountResponseMock = (): UtahUdotAtspmDataModelsRegion[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})), undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})))

export const getApiV1RouteKeyRouteLocationsResponseMock = (): UtahUdotAtspmDataModelsRouteLocation[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getApiV1RouteKeyRouteLocationsCountResponseMock = (): UtahUdotAtspmDataModelsRouteLocation[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getApiV1RouteCountResponseMock = (): UtahUdotAtspmDataModelsRoute[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])})))

export const getApiV1RouteDistanceKeyPreviousLocationsResponseMock = (): UtahUdotAtspmDataModelsRouteLocation[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getApiV1RouteDistanceKeyPreviousLocationsCountResponseMock = (): UtahUdotAtspmDataModelsRouteLocation[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getApiV1RouteDistanceKeyNextLocationsResponseMock = (): UtahUdotAtspmDataModelsRouteLocation[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getApiV1RouteDistanceKeyNextLocationsCountResponseMock = (): UtahUdotAtspmDataModelsRouteLocation[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getApiV1RouteDistanceGetRouteDistanceByLocationIdentifiersLocationALocationALocationBLocationBResponseMock = (overrideResponse: Partial< UtahUdotAtspmDataModelsRouteDistance | void > = {}): UtahUdotAtspmDataModelsRouteDistance | void => ({distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), previousLocations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), ...overrideResponse})

export const getApiV1RouteDistanceCountResponseMock = (): UtahUdotAtspmDataModelsRouteDistance[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), previousLocations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])})))

export const getApiV1RouteLocationCountResponseMock = (): UtahUdotAtspmDataModelsRouteLocation[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getApiV1VersionHistoryCountResponseMock = (): UtahUdotAtspmDataModelsVersionHistory[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({children: faker.helpers.arrayElement([[], undefined]), date: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), parentId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), version: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getApiV1WatchDogIgnoreEventCountResponseMock = (): UtahUdotAtspmDataModelsWatchDogIgnoreEvent[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({componentId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), componentType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.WatchDogComponentTypes)), undefined]), end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), issueType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.WatchDogIssueTypes)), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), phase: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})))


export const getApiV1ApproachKeyDetectorsMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsDetector[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsDetector[]> | UtahUdotAtspmDataModelsDetector[])) => {
  return http.get('*/api/v1/Approach/:key/detectors', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1ApproachKeyDetectorsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1ApproachKeyDetectorsCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsDetector[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsDetector[]> | UtahUdotAtspmDataModelsDetector[])) => {
  return http.get('*/api/v1/Approach/:key/detectors/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1ApproachKeyDetectorsCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPostApiV1UpsertApproachMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/api/v1/UpsertApproach', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getGetApiV1GetApproachDtoIdMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<void> | void)) => {
  return http.get('*/api/v1/GetApproachDto/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getApiV1ApproachMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsApproach[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsApproach[]> | UtahUdotAtspmDataModelsApproach[])) => {
  return http.get('*/api/v1/Approach', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1ApproachResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1ApproachKeyMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<void> | void)) => {
  return http.put('*/api/v1/Approach/:key', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getApiV1ApproachCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsApproach[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsApproach[]> | UtahUdotAtspmDataModelsApproach[])) => {
  return http.get('*/api/v1/Approach/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1ApproachCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1AreaKeyLocationsMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsLocation[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsLocation[]> | UtahUdotAtspmDataModelsLocation[])) => {
  return http.get('*/api/v1/Area/:key/locations', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1AreaKeyLocationsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1AreaKeyLocationsCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsLocation[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsLocation[]> | UtahUdotAtspmDataModelsLocation[])) => {
  return http.get('*/api/v1/Area/:key/locations/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1AreaKeyLocationsCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1AreaMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsArea[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsArea[]> | UtahUdotAtspmDataModelsArea[])) => {
  return http.get('*/api/v1/Area', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1AreaResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1AreaKeyMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<void> | void)) => {
  return http.put('*/api/v1/Area/:key', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getApiV1AreaCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsArea[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsArea[]> | UtahUdotAtspmDataModelsArea[])) => {
  return http.get('*/api/v1/Area/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1AreaCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1DetectionTypeKeyDetectorsMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsDetector[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsDetector[]> | UtahUdotAtspmDataModelsDetector[])) => {
  return http.get('*/api/v1/DetectionType/:key/detectors', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1DetectionTypeKeyDetectorsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1DetectionTypeKeyDetectorsCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsDetector[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsDetector[]> | UtahUdotAtspmDataModelsDetector[])) => {
  return http.get('*/api/v1/DetectionType/:key/detectors/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1DetectionTypeKeyDetectorsCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1DetectionTypeKeyMeasureTypesMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsMeasureType[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsMeasureType[]> | UtahUdotAtspmDataModelsMeasureType[])) => {
  return http.get('*/api/v1/DetectionType/:key/measureTypes', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1DetectionTypeKeyMeasureTypesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1DetectionTypeKeyMeasureTypesCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsMeasureType[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsMeasureType[]> | UtahUdotAtspmDataModelsMeasureType[])) => {
  return http.get('*/api/v1/DetectionType/:key/measureTypes/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1DetectionTypeKeyMeasureTypesCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1DetectionTypeMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/api/v1/DetectionType', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 201,
        
      })
  })
}

export const getApiV1DetectionTypeCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsDetectionType[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsDetectionType[]> | UtahUdotAtspmDataModelsDetectionType[])) => {
  return http.get('*/api/v1/DetectionType/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1DetectionTypeCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1DetectionTypeKeyMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/api/v1/DetectionType/:key', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getApiV1DetectorKeyDetectorCommentsMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsDetectorComment[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsDetectorComment[]> | UtahUdotAtspmDataModelsDetectorComment[])) => {
  return http.get('*/api/v1/Detector/:key/detectorComments', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1DetectorKeyDetectorCommentsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1DetectorKeyDetectorCommentsCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsDetectorComment[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsDetectorComment[]> | UtahUdotAtspmDataModelsDetectorComment[])) => {
  return http.get('*/api/v1/Detector/:key/detectorComments/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1DetectorKeyDetectorCommentsCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1DetectorKeyDetectionTypesMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsDetectionType[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsDetectionType[]> | UtahUdotAtspmDataModelsDetectionType[])) => {
  return http.get('*/api/v1/Detector/:key/detectionTypes', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1DetectorKeyDetectionTypesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1DetectorKeyDetectionTypesCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsDetectionType[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsDetectionType[]> | UtahUdotAtspmDataModelsDetectionType[])) => {
  return http.get('*/api/v1/Detector/:key/detectionTypes/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1DetectorKeyDetectionTypesCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1DetectorMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/api/v1/Detector', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 201,
        
      })
  })
}

export const getApiV1DetectorCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsDetector[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsDetector[]> | UtahUdotAtspmDataModelsDetector[])) => {
  return http.get('*/api/v1/Detector/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1DetectorCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1DetectorKeyMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/api/v1/Detector/:key', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getApiV1DetectorCommentMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/api/v1/DetectorComment', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 201,
        
      })
  })
}

export const getApiV1DetectorCommentCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsDetectorComment[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsDetectorComment[]> | UtahUdotAtspmDataModelsDetectorComment[])) => {
  return http.get('*/api/v1/DetectorComment/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1DetectorCommentCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1DetectorCommentKeyMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/api/v1/DetectorComment/:key', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getApiV1DeviceGetActiveDevicesByLocationLocationIdLocationIdMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsDevice[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsDevice[]> | UtahUdotAtspmDataModelsDevice[])) => {
  return http.get('*/api/v1/Device/GetActiveDevicesByLocation(locationId=:locationId)', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1DeviceGetActiveDevicesByLocationLocationIdLocationIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1DeviceGetActiveDevicesCountMockHandler = (overrideResponse?: UtahUdotATSPMConfigApiModelsDeviceGroup[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotATSPMConfigApiModelsDeviceGroup[]> | UtahUdotATSPMConfigApiModelsDeviceGroup[])) => {
  return http.get('*/api/v1/Device/GetActiveDevicesCount', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1DeviceGetActiveDevicesCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1DeviceMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/api/v1/Device', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 201,
        
      })
  })
}

export const getApiV1DeviceCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsDevice[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsDevice[]> | UtahUdotAtspmDataModelsDevice[])) => {
  return http.get('*/api/v1/Device/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1DeviceCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1DeviceKeyMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/api/v1/Device/:key', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getApiV1DeviceConfigurationKeyDevicesMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsDevice[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsDevice[]> | UtahUdotAtspmDataModelsDevice[])) => {
  return http.get('*/api/v1/DeviceConfiguration/:key/devices', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1DeviceConfigurationKeyDevicesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1DeviceConfigurationKeyDevicesCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsDevice[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsDevice[]> | UtahUdotAtspmDataModelsDevice[])) => {
  return http.get('*/api/v1/DeviceConfiguration/:key/devices/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1DeviceConfigurationKeyDevicesCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1DeviceConfigurationMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/api/v1/DeviceConfiguration', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 201,
        
      })
  })
}

export const getApiV1DeviceConfigurationCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsDeviceConfiguration[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsDeviceConfiguration[]> | UtahUdotAtspmDataModelsDeviceConfiguration[])) => {
  return http.get('*/api/v1/DeviceConfiguration/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1DeviceConfigurationCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1DeviceConfigurationKeyMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/api/v1/DeviceConfiguration/:key', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getApiV1DirectionTypeKeyApproachesMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsApproach[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsApproach[]> | UtahUdotAtspmDataModelsApproach[])) => {
  return http.get('*/api/v1/DirectionType/:key/approaches', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1DirectionTypeKeyApproachesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1DirectionTypeKeyApproachesCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsApproach[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsApproach[]> | UtahUdotAtspmDataModelsApproach[])) => {
  return http.get('*/api/v1/DirectionType/:key/approaches/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1DirectionTypeKeyApproachesCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1DirectionTypeKeyPrimaryDirectionsMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsRouteLocation[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsRouteLocation[]> | UtahUdotAtspmDataModelsRouteLocation[])) => {
  return http.get('*/api/v1/DirectionType/:key/primaryDirections', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1DirectionTypeKeyPrimaryDirectionsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1DirectionTypeKeyPrimaryDirectionsCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsRouteLocation[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsRouteLocation[]> | UtahUdotAtspmDataModelsRouteLocation[])) => {
  return http.get('*/api/v1/DirectionType/:key/primaryDirections/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1DirectionTypeKeyPrimaryDirectionsCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1DirectionTypeKeyOpposingDirectionsMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsRouteLocation[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsRouteLocation[]> | UtahUdotAtspmDataModelsRouteLocation[])) => {
  return http.get('*/api/v1/DirectionType/:key/opposingDirections', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1DirectionTypeKeyOpposingDirectionsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1DirectionTypeKeyOpposingDirectionsCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsRouteLocation[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsRouteLocation[]> | UtahUdotAtspmDataModelsRouteLocation[])) => {
  return http.get('*/api/v1/DirectionType/:key/opposingDirections/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1DirectionTypeKeyOpposingDirectionsCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1DirectionTypeMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/api/v1/DirectionType', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 201,
        
      })
  })
}

export const getApiV1DirectionTypeCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsDirectionType[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsDirectionType[]> | UtahUdotAtspmDataModelsDirectionType[])) => {
  return http.get('*/api/v1/DirectionType/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1DirectionTypeCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1DirectionTypeKeyMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/api/v1/DirectionType/:key', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getApiV1FaqMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsFaq[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsFaq[]> | UtahUdotAtspmDataModelsFaq[])) => {
  return http.get('*/api/v1/Faq', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1FaqResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1FaqKeyMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<void> | void)) => {
  return http.put('*/api/v1/Faq/:key', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getApiV1FaqCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsFaq[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsFaq[]> | UtahUdotAtspmDataModelsFaq[])) => {
  return http.get('*/api/v1/Faq/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1FaqCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1JurisdictionKeyLocationsMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsLocation[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsLocation[]> | UtahUdotAtspmDataModelsLocation[])) => {
  return http.get('*/api/v1/Jurisdiction/:key/locations', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1JurisdictionKeyLocationsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1JurisdictionKeyLocationsCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsLocation[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsLocation[]> | UtahUdotAtspmDataModelsLocation[])) => {
  return http.get('*/api/v1/Jurisdiction/:key/locations/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1JurisdictionKeyLocationsCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1JurisdictionMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsJurisdiction[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsJurisdiction[]> | UtahUdotAtspmDataModelsJurisdiction[])) => {
  return http.get('*/api/v1/Jurisdiction', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1JurisdictionResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1JurisdictionKeyMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<void> | void)) => {
  return http.put('*/api/v1/Jurisdiction/:key', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getApiV1JurisdictionCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsJurisdiction[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsJurisdiction[]> | UtahUdotAtspmDataModelsJurisdiction[])) => {
  return http.get('*/api/v1/Jurisdiction/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1JurisdictionCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1LocationKeyApproachesMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsApproach[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsApproach[]> | UtahUdotAtspmDataModelsApproach[])) => {
  return http.get('*/api/v1/Location/:key/approaches', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1LocationKeyApproachesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1LocationKeyApproachesCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsApproach[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsApproach[]> | UtahUdotAtspmDataModelsApproach[])) => {
  return http.get('*/api/v1/Location/:key/approaches/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1LocationKeyApproachesCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1LocationKeyAreasMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsArea[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsArea[]> | UtahUdotAtspmDataModelsArea[])) => {
  return http.get('*/api/v1/Location/:key/areas', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1LocationKeyAreasResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1LocationKeyAreasCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsArea[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsArea[]> | UtahUdotAtspmDataModelsArea[])) => {
  return http.get('*/api/v1/Location/:key/areas/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1LocationKeyAreasCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1LocationKeyDevicesMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsDevice[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsDevice[]> | UtahUdotAtspmDataModelsDevice[])) => {
  return http.get('*/api/v1/Location/:key/devices', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1LocationKeyDevicesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1LocationKeyDevicesCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsDevice[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsDevice[]> | UtahUdotAtspmDataModelsDevice[])) => {
  return http.get('*/api/v1/Location/:key/devices/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1LocationKeyDevicesCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1LocationKeyCopyLocationToNewVersionMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsLocation | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<UtahUdotAtspmDataModelsLocation> | UtahUdotAtspmDataModelsLocation)) => {
  return http.post('*/api/v1/Location/:key/CopyLocationToNewVersion', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1LocationKeyCopyLocationToNewVersionResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1LocationKeySyncLocationMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsLocation | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<UtahUdotAtspmDataModelsLocation> | UtahUdotAtspmDataModelsLocation)) => {
  return http.post('*/api/v1/Location/:key/SyncLocation', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1LocationKeySyncLocationResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1LocationKeySaveTemplatedLocationMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsLocation | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<UtahUdotAtspmDataModelsLocation> | UtahUdotAtspmDataModelsLocation)) => {
  return http.post('*/api/v1/Location/:key/SaveTemplatedLocation', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1LocationKeySaveTemplatedLocationResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1LocationKeySetLocationToDeletedMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/api/v1/Location/:key/SetLocationToDeleted', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getApiV1LocationGetLatestVersionOfLocationIdentifierIdentifierMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsLocation | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsLocation> | UtahUdotAtspmDataModelsLocation)) => {
  return http.get('*/api/v1/Location/GetLatestVersionOfLocation(identifier=:identifier)', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1LocationGetLatestVersionOfLocationIdentifierIdentifierResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1LocationGetAllVersionsOfLocationIdentifierIdentifierMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsLocation[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsLocation[]> | UtahUdotAtspmDataModelsLocation[])) => {
  return http.get('*/api/v1/Location/GetAllVersionsOfLocation(identifier=:identifier)', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1LocationGetAllVersionsOfLocationIdentifierIdentifierResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1LocationGetLatestVersionOfAllLocationsMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsLocation[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsLocation[]> | UtahUdotAtspmDataModelsLocation[])) => {
  return http.get('*/api/v1/Location/GetLatestVersionOfAllLocations', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1LocationGetLatestVersionOfAllLocationsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1LocationGetDetectionTypeCountMockHandler = (overrideResponse?: UtahUdotAtspmBusinessWatchdogDetectionTypeGroup[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmBusinessWatchdogDetectionTypeGroup[]> | UtahUdotAtspmBusinessWatchdogDetectionTypeGroup[])) => {
  return http.get('*/api/v1/Location/GetDetectionTypeCount', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1LocationGetDetectionTypeCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1LocationGetLocationsForSearchMockHandler = (overrideResponse?: UtahUdotAtspmConfigApiModelsSearchLocation[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmConfigApiModelsSearchLocation[]> | UtahUdotAtspmConfigApiModelsSearchLocation[])) => {
  return http.get('*/api/v1/Location/GetLocationsForSearch', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1LocationGetLocationsForSearchResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1LocationMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/api/v1/Location', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 201,
        
      })
  })
}

export const getApiV1LocationCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsLocation[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsLocation[]> | UtahUdotAtspmDataModelsLocation[])) => {
  return http.get('*/api/v1/Location/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1LocationCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1LocationKeyMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/api/v1/Location/:key', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getApiV1LocationTypeKeyLocationsMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsLocation[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsLocation[]> | UtahUdotAtspmDataModelsLocation[])) => {
  return http.get('*/api/v1/LocationType/:key/locations', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1LocationTypeKeyLocationsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1LocationTypeKeyLocationsCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsLocation[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsLocation[]> | UtahUdotAtspmDataModelsLocation[])) => {
  return http.get('*/api/v1/LocationType/:key/locations/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1LocationTypeKeyLocationsCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1LocationTypeMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/api/v1/LocationType', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 201,
        
      })
  })
}

export const getApiV1LocationTypeCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsLocationType[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsLocationType[]> | UtahUdotAtspmDataModelsLocationType[])) => {
  return http.get('*/api/v1/LocationType/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1LocationTypeCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1LocationTypeKeyMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/api/v1/LocationType/:key', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getApiV1MapLayerMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/api/v1/MapLayer', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 201,
        
      })
  })
}

export const getApiV1MapLayerCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsMapLayer[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsMapLayer[]> | UtahUdotAtspmDataModelsMapLayer[])) => {
  return http.get('*/api/v1/MapLayer/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1MapLayerCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1MapLayerKeyMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/api/v1/MapLayer/:key', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getApiV1MeasureCommentKeyMeasureTypesMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsMeasureType[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsMeasureType[]> | UtahUdotAtspmDataModelsMeasureType[])) => {
  return http.get('*/api/v1/MeasureComment/:key/measureTypes', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1MeasureCommentKeyMeasureTypesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1MeasureCommentKeyMeasureTypesCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsMeasureType[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsMeasureType[]> | UtahUdotAtspmDataModelsMeasureType[])) => {
  return http.get('*/api/v1/MeasureComment/:key/measureTypes/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1MeasureCommentKeyMeasureTypesCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1MeasureCommentMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/api/v1/MeasureComment', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 201,
        
      })
  })
}

export const getApiV1MeasureCommentCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsMeasureComment[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsMeasureComment[]> | UtahUdotAtspmDataModelsMeasureComment[])) => {
  return http.get('*/api/v1/MeasureComment/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1MeasureCommentCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1MeasureCommentKeyMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/api/v1/MeasureComment/:key', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getApiV1MeasureOptionMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/api/v1/MeasureOption', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 201,
        
      })
  })
}

export const getApiV1MeasureOptionCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsMeasureOption[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsMeasureOption[]> | UtahUdotAtspmDataModelsMeasureOption[])) => {
  return http.get('*/api/v1/MeasureOption/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1MeasureOptionCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1MeasureOptionKeyMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/api/v1/MeasureOption/:key', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getApiV1MeasureTypeKeyDetectionTypesMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsDetectionType[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsDetectionType[]> | UtahUdotAtspmDataModelsDetectionType[])) => {
  return http.get('*/api/v1/MeasureType/:key/detectionTypes', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1MeasureTypeKeyDetectionTypesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1MeasureTypeKeyDetectionTypesCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsDetectionType[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsDetectionType[]> | UtahUdotAtspmDataModelsDetectionType[])) => {
  return http.get('*/api/v1/MeasureType/:key/detectionTypes/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1MeasureTypeKeyDetectionTypesCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1MeasureTypeKeyMeasureCommentsMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsMeasureComment[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsMeasureComment[]> | UtahUdotAtspmDataModelsMeasureComment[])) => {
  return http.get('*/api/v1/MeasureType/:key/measureComments', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1MeasureTypeKeyMeasureCommentsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1MeasureTypeKeyMeasureCommentsCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsMeasureComment[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsMeasureComment[]> | UtahUdotAtspmDataModelsMeasureComment[])) => {
  return http.get('*/api/v1/MeasureType/:key/measureComments/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1MeasureTypeKeyMeasureCommentsCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1MeasureTypeMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/api/v1/MeasureType', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 201,
        
      })
  })
}

export const getApiV1MeasureTypeCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsMeasureType[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsMeasureType[]> | UtahUdotAtspmDataModelsMeasureType[])) => {
  return http.get('*/api/v1/MeasureType/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1MeasureTypeCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1MeasureTypeKeyMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/api/v1/MeasureType/:key', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getApiV1MenuItemsMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/api/v1/MenuItems', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 201,
        
      })
  })
}

export const getApiV1MenuItemsCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsMenuItem[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsMenuItem[]> | UtahUdotAtspmDataModelsMenuItem[])) => {
  return http.get('*/api/v1/MenuItems/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1MenuItemsCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1MenuItemsKeyMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/api/v1/MenuItems/:key', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getApiV1ProductMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/api/v1/Product', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 201,
        
      })
  })
}

export const getApiV1ProductCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsProduct[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsProduct[]> | UtahUdotAtspmDataModelsProduct[])) => {
  return http.get('*/api/v1/Product/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1ProductCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1ProductKeyMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/api/v1/Product/:key', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getApiV1RegionKeyLocationsMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsLocation[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsLocation[]> | UtahUdotAtspmDataModelsLocation[])) => {
  return http.get('*/api/v1/Region/:key/locations', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1RegionKeyLocationsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1RegionKeyLocationsCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsLocation[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsLocation[]> | UtahUdotAtspmDataModelsLocation[])) => {
  return http.get('*/api/v1/Region/:key/locations/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1RegionKeyLocationsCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1RegionMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsRegion[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsRegion[]> | UtahUdotAtspmDataModelsRegion[])) => {
  return http.get('*/api/v1/Region', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1RegionResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1RegionKeyMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<void> | void)) => {
  return http.put('*/api/v1/Region/:key', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getApiV1RegionCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsRegion[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsRegion[]> | UtahUdotAtspmDataModelsRegion[])) => {
  return http.get('*/api/v1/Region/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1RegionCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1RouteKeyRouteLocationsMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsRouteLocation[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsRouteLocation[]> | UtahUdotAtspmDataModelsRouteLocation[])) => {
  return http.get('*/api/v1/Route/:key/routeLocations', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1RouteKeyRouteLocationsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1RouteKeyRouteLocationsCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsRouteLocation[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsRouteLocation[]> | UtahUdotAtspmDataModelsRouteLocation[])) => {
  return http.get('*/api/v1/Route/:key/routeLocations/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1RouteKeyRouteLocationsCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPostApiV1UpsertRouteMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/api/v1/UpsertRoute', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getGetApiV1GetRouteViewIdMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<void> | void)) => {
  return http.get('*/api/v1/GetRouteView/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getApiV1RouteMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/api/v1/Route', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 201,
        
      })
  })
}

export const getApiV1RouteCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsRoute[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsRoute[]> | UtahUdotAtspmDataModelsRoute[])) => {
  return http.get('*/api/v1/Route/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1RouteCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1RouteKeyMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/api/v1/Route/:key', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getApiV1RouteDistanceKeyPreviousLocationsMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsRouteLocation[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsRouteLocation[]> | UtahUdotAtspmDataModelsRouteLocation[])) => {
  return http.get('*/api/v1/RouteDistance/:key/previousLocations', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1RouteDistanceKeyPreviousLocationsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1RouteDistanceKeyPreviousLocationsCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsRouteLocation[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsRouteLocation[]> | UtahUdotAtspmDataModelsRouteLocation[])) => {
  return http.get('*/api/v1/RouteDistance/:key/previousLocations/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1RouteDistanceKeyPreviousLocationsCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1RouteDistanceKeyNextLocationsMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsRouteLocation[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsRouteLocation[]> | UtahUdotAtspmDataModelsRouteLocation[])) => {
  return http.get('*/api/v1/RouteDistance/:key/nextLocations', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1RouteDistanceKeyNextLocationsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1RouteDistanceKeyNextLocationsCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsRouteLocation[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsRouteLocation[]> | UtahUdotAtspmDataModelsRouteLocation[])) => {
  return http.get('*/api/v1/RouteDistance/:key/nextLocations/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1RouteDistanceKeyNextLocationsCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1RouteDistanceGetRouteDistanceByLocationIdentifiersLocationALocationALocationBLocationBMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsRouteDistance | void | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsRouteDistance | void> | UtahUdotAtspmDataModelsRouteDistance | void)) => {
  return http.get('*/api/v1/RouteDistance/GetRouteDistanceByLocationIdentifiers(locationA=:locationA,locationB=:locationB)', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1RouteDistanceGetRouteDistanceByLocationIdentifiersLocationALocationALocationBLocationBResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1RouteDistanceMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/api/v1/RouteDistance', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 201,
        
      })
  })
}

export const getApiV1RouteDistanceCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsRouteDistance[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsRouteDistance[]> | UtahUdotAtspmDataModelsRouteDistance[])) => {
  return http.get('*/api/v1/RouteDistance/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1RouteDistanceCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1RouteDistanceKeyMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/api/v1/RouteDistance/:key', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getApiV1RouteLocationMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/api/v1/RouteLocation', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 201,
        
      })
  })
}

export const getApiV1RouteLocationCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsRouteLocation[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsRouteLocation[]> | UtahUdotAtspmDataModelsRouteLocation[])) => {
  return http.get('*/api/v1/RouteLocation/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1RouteLocationCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1RouteLocationKeyMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/api/v1/RouteLocation/:key', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getApiV1VersionHistoryMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/api/v1/VersionHistory', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 201,
        
      })
  })
}

export const getApiV1VersionHistoryCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsVersionHistory[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsVersionHistory[]> | UtahUdotAtspmDataModelsVersionHistory[])) => {
  return http.get('*/api/v1/VersionHistory/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1VersionHistoryCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1VersionHistoryKeyMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/api/v1/VersionHistory/:key', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getApiV1WatchDogIgnoreEventMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/api/v1/WatchDogIgnoreEvent', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 201,
        
      })
  })
}

export const getApiV1WatchDogIgnoreEventCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsWatchDogIgnoreEvent[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsWatchDogIgnoreEvent[]> | UtahUdotAtspmDataModelsWatchDogIgnoreEvent[])) => {
  return http.get('*/api/v1/WatchDogIgnoreEvent/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiV1WatchDogIgnoreEventCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiV1WatchDogIgnoreEventKeyMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/api/v1/WatchDogIgnoreEvent/:key', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}
export const getATSPMConfigurationApiMock = () => [
  getApiV1ApproachKeyDetectorsMockHandler(),
  getApiV1ApproachKeyDetectorsCountMockHandler(),
  getPostApiV1UpsertApproachMockHandler(),
  getGetApiV1GetApproachDtoIdMockHandler(),
  getApiV1ApproachMockHandler(),
  getApiV1ApproachKeyMockHandler(),
  getApiV1ApproachCountMockHandler(),
  getApiV1AreaKeyLocationsMockHandler(),
  getApiV1AreaKeyLocationsCountMockHandler(),
  getApiV1AreaMockHandler(),
  getApiV1AreaKeyMockHandler(),
  getApiV1AreaCountMockHandler(),
  getApiV1DetectionTypeKeyDetectorsMockHandler(),
  getApiV1DetectionTypeKeyDetectorsCountMockHandler(),
  getApiV1DetectionTypeKeyMeasureTypesMockHandler(),
  getApiV1DetectionTypeKeyMeasureTypesCountMockHandler(),
  getApiV1DetectionTypeMockHandler(),
  getApiV1DetectionTypeCountMockHandler(),
  getApiV1DetectionTypeKeyMockHandler(),
  getApiV1DetectorKeyDetectorCommentsMockHandler(),
  getApiV1DetectorKeyDetectorCommentsCountMockHandler(),
  getApiV1DetectorKeyDetectionTypesMockHandler(),
  getApiV1DetectorKeyDetectionTypesCountMockHandler(),
  getApiV1DetectorMockHandler(),
  getApiV1DetectorCountMockHandler(),
  getApiV1DetectorKeyMockHandler(),
  getApiV1DetectorCommentMockHandler(),
  getApiV1DetectorCommentCountMockHandler(),
  getApiV1DetectorCommentKeyMockHandler(),
  getApiV1DeviceGetActiveDevicesByLocationLocationIdLocationIdMockHandler(),
  getApiV1DeviceGetActiveDevicesCountMockHandler(),
  getApiV1DeviceMockHandler(),
  getApiV1DeviceCountMockHandler(),
  getApiV1DeviceKeyMockHandler(),
  getApiV1DeviceConfigurationKeyDevicesMockHandler(),
  getApiV1DeviceConfigurationKeyDevicesCountMockHandler(),
  getApiV1DeviceConfigurationMockHandler(),
  getApiV1DeviceConfigurationCountMockHandler(),
  getApiV1DeviceConfigurationKeyMockHandler(),
  getApiV1DirectionTypeKeyApproachesMockHandler(),
  getApiV1DirectionTypeKeyApproachesCountMockHandler(),
  getApiV1DirectionTypeKeyPrimaryDirectionsMockHandler(),
  getApiV1DirectionTypeKeyPrimaryDirectionsCountMockHandler(),
  getApiV1DirectionTypeKeyOpposingDirectionsMockHandler(),
  getApiV1DirectionTypeKeyOpposingDirectionsCountMockHandler(),
  getApiV1DirectionTypeMockHandler(),
  getApiV1DirectionTypeCountMockHandler(),
  getApiV1DirectionTypeKeyMockHandler(),
  getApiV1FaqMockHandler(),
  getApiV1FaqKeyMockHandler(),
  getApiV1FaqCountMockHandler(),
  getApiV1JurisdictionKeyLocationsMockHandler(),
  getApiV1JurisdictionKeyLocationsCountMockHandler(),
  getApiV1JurisdictionMockHandler(),
  getApiV1JurisdictionKeyMockHandler(),
  getApiV1JurisdictionCountMockHandler(),
  getApiV1LocationKeyApproachesMockHandler(),
  getApiV1LocationKeyApproachesCountMockHandler(),
  getApiV1LocationKeyAreasMockHandler(),
  getApiV1LocationKeyAreasCountMockHandler(),
  getApiV1LocationKeyDevicesMockHandler(),
  getApiV1LocationKeyDevicesCountMockHandler(),
  getApiV1LocationKeyCopyLocationToNewVersionMockHandler(),
  getApiV1LocationKeySyncLocationMockHandler(),
  getApiV1LocationKeySaveTemplatedLocationMockHandler(),
  getApiV1LocationKeySetLocationToDeletedMockHandler(),
  getApiV1LocationGetLatestVersionOfLocationIdentifierIdentifierMockHandler(),
  getApiV1LocationGetAllVersionsOfLocationIdentifierIdentifierMockHandler(),
  getApiV1LocationGetLatestVersionOfAllLocationsMockHandler(),
  getApiV1LocationGetDetectionTypeCountMockHandler(),
  getApiV1LocationGetLocationsForSearchMockHandler(),
  getApiV1LocationMockHandler(),
  getApiV1LocationCountMockHandler(),
  getApiV1LocationKeyMockHandler(),
  getApiV1LocationTypeKeyLocationsMockHandler(),
  getApiV1LocationTypeKeyLocationsCountMockHandler(),
  getApiV1LocationTypeMockHandler(),
  getApiV1LocationTypeCountMockHandler(),
  getApiV1LocationTypeKeyMockHandler(),
  getApiV1MapLayerMockHandler(),
  getApiV1MapLayerCountMockHandler(),
  getApiV1MapLayerKeyMockHandler(),
  getApiV1MeasureCommentKeyMeasureTypesMockHandler(),
  getApiV1MeasureCommentKeyMeasureTypesCountMockHandler(),
  getApiV1MeasureCommentMockHandler(),
  getApiV1MeasureCommentCountMockHandler(),
  getApiV1MeasureCommentKeyMockHandler(),
  getApiV1MeasureOptionMockHandler(),
  getApiV1MeasureOptionCountMockHandler(),
  getApiV1MeasureOptionKeyMockHandler(),
  getApiV1MeasureTypeKeyDetectionTypesMockHandler(),
  getApiV1MeasureTypeKeyDetectionTypesCountMockHandler(),
  getApiV1MeasureTypeKeyMeasureCommentsMockHandler(),
  getApiV1MeasureTypeKeyMeasureCommentsCountMockHandler(),
  getApiV1MeasureTypeMockHandler(),
  getApiV1MeasureTypeCountMockHandler(),
  getApiV1MeasureTypeKeyMockHandler(),
  getApiV1MenuItemsMockHandler(),
  getApiV1MenuItemsCountMockHandler(),
  getApiV1MenuItemsKeyMockHandler(),
  getApiV1ProductMockHandler(),
  getApiV1ProductCountMockHandler(),
  getApiV1ProductKeyMockHandler(),
  getApiV1RegionKeyLocationsMockHandler(),
  getApiV1RegionKeyLocationsCountMockHandler(),
  getApiV1RegionMockHandler(),
  getApiV1RegionKeyMockHandler(),
  getApiV1RegionCountMockHandler(),
  getApiV1RouteKeyRouteLocationsMockHandler(),
  getApiV1RouteKeyRouteLocationsCountMockHandler(),
  getPostApiV1UpsertRouteMockHandler(),
  getGetApiV1GetRouteViewIdMockHandler(),
  getApiV1RouteMockHandler(),
  getApiV1RouteCountMockHandler(),
  getApiV1RouteKeyMockHandler(),
  getApiV1RouteDistanceKeyPreviousLocationsMockHandler(),
  getApiV1RouteDistanceKeyPreviousLocationsCountMockHandler(),
  getApiV1RouteDistanceKeyNextLocationsMockHandler(),
  getApiV1RouteDistanceKeyNextLocationsCountMockHandler(),
  getApiV1RouteDistanceGetRouteDistanceByLocationIdentifiersLocationALocationALocationBLocationBMockHandler(),
  getApiV1RouteDistanceMockHandler(),
  getApiV1RouteDistanceCountMockHandler(),
  getApiV1RouteDistanceKeyMockHandler(),
  getApiV1RouteLocationMockHandler(),
  getApiV1RouteLocationCountMockHandler(),
  getApiV1RouteLocationKeyMockHandler(),
  getApiV1VersionHistoryMockHandler(),
  getApiV1VersionHistoryCountMockHandler(),
  getApiV1VersionHistoryKeyMockHandler(),
  getApiV1WatchDogIgnoreEventMockHandler(),
  getApiV1WatchDogIgnoreEventCountMockHandler(),
  getApiV1WatchDogIgnoreEventKeyMockHandler()
]
