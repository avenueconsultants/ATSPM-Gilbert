/**
 * Generated by orval v7.1.1 🍺
 * Do not edit manually.
 * ATSPM Configuration Api
 * ATSPM Configuration with OData, OpenAPI, Swashbuckle, and API versioning.
 * OpenAPI spec version: 1.0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import {
  Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes,
  Utah.Udot.Atspm.Data.Enums.DetectionTypes,
  Utah.Udot.Atspm.Data.Enums.DeviceStatus,
  Utah.Udot.Atspm.Data.Enums.DeviceTypes,
  Utah.Udot.Atspm.Data.Enums.DirectionTypes,
  Utah.Udot.Atspm.Data.Enums.LaneTypes,
  Utah.Udot.Atspm.Data.Enums.LocationVersionActions,
  Utah.Udot.Atspm.Data.Enums.MovementTypes,
  Utah.Udot.Atspm.Data.Enums.TransportProtocols,
  Utah.Udot.Atspm.Data.Enums.WatchDogComponentTypes,
  Utah.Udot.Atspm.Data.Enums.WatchDogIssueTypes
} from './aTSPMConfigurationApi.schemas'
import type {
  UtahUdotATSPMConfigApiModelsDeviceGroup,
  UtahUdotAtspmBusinessWatchdogDetectionTypeGroup,
  UtahUdotAtspmConfigApiModelsSearchLocation,
  UtahUdotAtspmDataModelsApproach,
  UtahUdotAtspmDataModelsArea,
  UtahUdotAtspmDataModelsDetectionType,
  UtahUdotAtspmDataModelsDetector,
  UtahUdotAtspmDataModelsDetectorComment,
  UtahUdotAtspmDataModelsDevice,
  UtahUdotAtspmDataModelsDeviceConfiguration,
  UtahUdotAtspmDataModelsDirectionType,
  UtahUdotAtspmDataModelsFaq,
  UtahUdotAtspmDataModelsJurisdiction,
  UtahUdotAtspmDataModelsLocation,
  UtahUdotAtspmDataModelsLocationType,
  UtahUdotAtspmDataModelsMapLayer,
  UtahUdotAtspmDataModelsMeasureComment,
  UtahUdotAtspmDataModelsMeasureOption,
  UtahUdotAtspmDataModelsMeasureType,
  UtahUdotAtspmDataModelsMenuItem,
  UtahUdotAtspmDataModelsProduct,
  UtahUdotAtspmDataModelsRegion,
  UtahUdotAtspmDataModelsRoute,
  UtahUdotAtspmDataModelsRouteDistance,
  UtahUdotAtspmDataModelsRouteLocation,
  UtahUdotAtspmDataModelsVersionHistory,
  UtahUdotAtspmDataModelsWatchDogIgnoreEvent
} from './aTSPMConfigurationApi.schemas'

export const getApiVVersionApiVersionApproachKeyDetectorsResponseMock = (): UtahUdotAtspmDataModelsDetector[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})))

export const getApiVVersionApiVersionApproachKeyDetectorsCountResponseMock = (): UtahUdotAtspmDataModelsDetector[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})))

export const getApiVVersionApiVersionApproachResponseMock = (): UtahUdotAtspmDataModelsApproach[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getApiVVersionApiVersionApproachCountResponseMock = (): UtahUdotAtspmDataModelsApproach[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getApiVVersionApiVersionAreaKeyLocationsResponseMock = (): UtahUdotAtspmDataModelsLocation[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})))

export const getApiVVersionApiVersionAreaKeyLocationsCountResponseMock = (): UtahUdotAtspmDataModelsLocation[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})))

export const getApiVVersionApiVersionAreaResponseMock = (): UtahUdotAtspmDataModelsArea[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([[], undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})))

export const getApiVVersionApiVersionAreaCountResponseMock = (): UtahUdotAtspmDataModelsArea[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([[], undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})))

export const getApiVVersionApiVersionDetectionTypeKeyDetectorsResponseMock = (): UtahUdotAtspmDataModelsDetector[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})))

export const getApiVVersionApiVersionDetectionTypeKeyDetectorsCountResponseMock = (): UtahUdotAtspmDataModelsDetector[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})))

export const getApiVVersionApiVersionDetectionTypeKeyMeasureTypesResponseMock = (): UtahUdotAtspmDataModelsMeasureType[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})))

export const getApiVVersionApiVersionDetectionTypeKeyMeasureTypesCountResponseMock = (): UtahUdotAtspmDataModelsMeasureType[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})))

export const getApiVVersionApiVersionDetectionTypeCountResponseMock = (): UtahUdotAtspmDataModelsDetectionType[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})))

export const getApiVVersionApiVersionDetectorKeyDetectorCommentsResponseMock = (): UtahUdotAtspmDataModelsDetectorComment[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detector: faker.helpers.arrayElement([{approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([[], undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])}, undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})))

export const getApiVVersionApiVersionDetectorKeyDetectorCommentsCountResponseMock = (): UtahUdotAtspmDataModelsDetectorComment[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detector: faker.helpers.arrayElement([{approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([[], undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])}, undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})))

export const getApiVVersionApiVersionDetectorKeyDetectionTypesResponseMock = (): UtahUdotAtspmDataModelsDetectionType[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})))

export const getApiVVersionApiVersionDetectorKeyDetectionTypesCountResponseMock = (): UtahUdotAtspmDataModelsDetectionType[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})))

export const getApiVVersionApiVersionDetectorCountResponseMock = (): UtahUdotAtspmDataModelsDetector[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})))

export const getApiVVersionApiVersionDetectorCommentCountResponseMock = (): UtahUdotAtspmDataModelsDetectorComment[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detector: faker.helpers.arrayElement([{approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([[], undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])}, undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})))

export const getApiVVersionApiVersionDeviceGetActiveDevicesByLocationLocationIdLocationIdResponseMock = (): UtahUdotAtspmDataModelsDevice[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})))

export const getApiVVersionApiVersionDeviceGetActiveDevicesCountResponseMock = (): UtahUdotATSPMConfigApiModelsDeviceGroup[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({count: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})))

export const getApiVVersionApiVersionDeviceCountResponseMock = (): UtahUdotAtspmDataModelsDevice[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})))

export const getApiVVersionApiVersionDeviceConfigurationKeyDevicesResponseMock = (): UtahUdotAtspmDataModelsDevice[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})))

export const getApiVVersionApiVersionDeviceConfigurationKeyDevicesCountResponseMock = (): UtahUdotAtspmDataModelsDevice[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})))

export const getApiVVersionApiVersionDeviceConfigurationCountResponseMock = (): UtahUdotAtspmDataModelsDeviceConfiguration[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})))

export const getApiVVersionApiVersionDirectionTypeKeyApproachesResponseMock = (): UtahUdotAtspmDataModelsApproach[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getApiVVersionApiVersionDirectionTypeKeyApproachesCountResponseMock = (): UtahUdotAtspmDataModelsApproach[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getApiVVersionApiVersionDirectionTypeKeyPrimaryDirectionsResponseMock = (): UtahUdotAtspmDataModelsRouteLocation[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getApiVVersionApiVersionDirectionTypeKeyPrimaryDirectionsCountResponseMock = (): UtahUdotAtspmDataModelsRouteLocation[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getApiVVersionApiVersionDirectionTypeKeyOpposingDirectionsResponseMock = (): UtahUdotAtspmDataModelsRouteLocation[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getApiVVersionApiVersionDirectionTypeKeyOpposingDirectionsCountResponseMock = (): UtahUdotAtspmDataModelsRouteLocation[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getApiVVersionApiVersionDirectionTypeCountResponseMock = (): UtahUdotAtspmDataModelsDirectionType[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])})))

export const getApiVVersionApiVersionFaqResponseMock = (): UtahUdotAtspmDataModelsFaq[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({body: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), header: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getApiVVersionApiVersionFaqCountResponseMock = (): UtahUdotAtspmDataModelsFaq[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({body: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), header: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getApiVVersionApiVersionJurisdictionKeyLocationsResponseMock = (): UtahUdotAtspmDataModelsLocation[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})))

export const getApiVVersionApiVersionJurisdictionKeyLocationsCountResponseMock = (): UtahUdotAtspmDataModelsLocation[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})))

export const getApiVVersionApiVersionJurisdictionResponseMock = (): UtahUdotAtspmDataModelsJurisdiction[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})), undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})))

export const getApiVVersionApiVersionJurisdictionCountResponseMock = (): UtahUdotAtspmDataModelsJurisdiction[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})), undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})))

export const getApiVVersionApiVersionLocationKeyApproachesResponseMock = (): UtahUdotAtspmDataModelsApproach[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getApiVVersionApiVersionLocationKeyApproachesCountResponseMock = (): UtahUdotAtspmDataModelsApproach[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getApiVVersionApiVersionLocationKeyAreasResponseMock = (): UtahUdotAtspmDataModelsArea[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([[], undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})))

export const getApiVVersionApiVersionLocationKeyAreasCountResponseMock = (): UtahUdotAtspmDataModelsArea[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([[], undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})))

export const getApiVVersionApiVersionLocationKeyDevicesResponseMock = (): UtahUdotAtspmDataModelsDevice[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})))

export const getApiVVersionApiVersionLocationKeyDevicesCountResponseMock = (): UtahUdotAtspmDataModelsDevice[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})))

export const getApiVVersionApiVersionLocationKeyCopyLocationToNewVersionResponseMock = (overrideResponse: Partial< UtahUdotAtspmDataModelsLocation > = {}): UtahUdotAtspmDataModelsLocation => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([[], undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})), undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})), undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined]), ...overrideResponse})

export const getApiVVersionApiVersionLocationKeySyncLocationResponseMock = (overrideResponse: Partial< UtahUdotAtspmDataModelsLocation > = {}): UtahUdotAtspmDataModelsLocation => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([[], undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})), undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})), undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined]), ...overrideResponse})

export const getApiVVersionApiVersionLocationKeySaveTemplatedLocationResponseMock = (overrideResponse: Partial< UtahUdotAtspmDataModelsLocation > = {}): UtahUdotAtspmDataModelsLocation => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([[], undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})), undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})), undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined]), ...overrideResponse})

export const getApiVVersionApiVersionLocationGetLatestVersionOfLocationIdentifierIdentifierResponseMock = (overrideResponse: Partial< UtahUdotAtspmDataModelsLocation > = {}): UtahUdotAtspmDataModelsLocation => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([[], undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})), undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})), undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined]), ...overrideResponse})

export const getApiVVersionApiVersionLocationGetAllVersionsOfLocationIdentifierIdentifierResponseMock = (): UtahUdotAtspmDataModelsLocation[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})))

export const getApiVVersionApiVersionLocationGetLatestVersionOfAllLocationsResponseMock = (): UtahUdotAtspmDataModelsLocation[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})))

export const getApiVVersionApiVersionLocationGetDetectionTypeCountResponseMock = (): UtahUdotAtspmBusinessWatchdogDetectionTypeGroup[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({count: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})))

export const getApiVVersionApiVersionLocationGetLocationsForSearchResponseMock = (): UtahUdotAtspmConfigApiModelsSearchLocation[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.number.int({min: undefined, max: undefined}))), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), charts: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.number.int({min: undefined, max: undefined}))), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})))

export const getApiVVersionApiVersionLocationCountResponseMock = (): UtahUdotAtspmDataModelsLocation[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})))

export const getApiVVersionApiVersionLocationTypeKeyLocationsResponseMock = (): UtahUdotAtspmDataModelsLocation[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})))

export const getApiVVersionApiVersionLocationTypeKeyLocationsCountResponseMock = (): UtahUdotAtspmDataModelsLocation[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})))

export const getApiVVersionApiVersionLocationTypeCountResponseMock = (): UtahUdotAtspmDataModelsLocationType[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})))

export const getApiVVersionApiVersionMapLayerCountResponseMock = (): UtahUdotAtspmDataModelsMapLayer[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), createdOn: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), deletedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deletedOn: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mapLayerUrl: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), serviceType: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showByDefault: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), updatedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), updatedOn: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})))

export const getApiVVersionApiVersionMeasureCommentKeyMeasureTypesResponseMock = (): UtahUdotAtspmDataModelsMeasureType[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})))

export const getApiVVersionApiVersionMeasureCommentKeyMeasureTypesCountResponseMock = (): UtahUdotAtspmDataModelsMeasureType[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})))

export const getApiVVersionApiVersionMeasureCommentCountResponseMock = (): UtahUdotAtspmDataModelsMeasureComment[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([[], undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})))

export const getApiVVersionApiVersionMeasureOptionCountResponseMock = (): UtahUdotAtspmDataModelsMeasureOption[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])}, undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})))

export const getApiVVersionApiVersionMeasureTypeKeyDetectionTypesResponseMock = (): UtahUdotAtspmDataModelsDetectionType[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})))

export const getApiVVersionApiVersionMeasureTypeKeyDetectionTypesCountResponseMock = (): UtahUdotAtspmDataModelsDetectionType[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})))

export const getApiVVersionApiVersionMeasureTypeKeyMeasureCommentsResponseMock = (): UtahUdotAtspmDataModelsMeasureComment[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([[], undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})))

export const getApiVVersionApiVersionMeasureTypeKeyMeasureCommentsCountResponseMock = (): UtahUdotAtspmDataModelsMeasureComment[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([[], undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})))

export const getApiVVersionApiVersionMeasureTypeCountResponseMock = (): UtahUdotAtspmDataModelsMeasureType[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})))

export const getApiVVersionApiVersionMenuItemsCountResponseMock = (): UtahUdotAtspmDataModelsMenuItem[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({children: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), document: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), link: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), parentId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])})))

export const getApiVVersionApiVersionProductCountResponseMock = (): UtahUdotAtspmDataModelsProduct[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})))

export const getApiVVersionApiVersionRegionKeyLocationsResponseMock = (): UtahUdotAtspmDataModelsLocation[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})))

export const getApiVVersionApiVersionRegionKeyLocationsCountResponseMock = (): UtahUdotAtspmDataModelsLocation[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})))

export const getApiVVersionApiVersionRegionResponseMock = (): UtahUdotAtspmDataModelsRegion[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})), undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})))

export const getApiVVersionApiVersionRegionCountResponseMock = (): UtahUdotAtspmDataModelsRegion[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])})), undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})))

export const getApiVVersionApiVersionRouteKeyRouteLocationsResponseMock = (): UtahUdotAtspmDataModelsRouteLocation[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getApiVVersionApiVersionRouteKeyRouteLocationsCountResponseMock = (): UtahUdotAtspmDataModelsRouteLocation[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getApiVVersionApiVersionRouteCountResponseMock = (): UtahUdotAtspmDataModelsRoute[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])})))

export const getApiVVersionApiVersionRouteDistanceKeyPreviousLocationsResponseMock = (): UtahUdotAtspmDataModelsRouteLocation[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getApiVVersionApiVersionRouteDistanceKeyPreviousLocationsCountResponseMock = (): UtahUdotAtspmDataModelsRouteLocation[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getApiVVersionApiVersionRouteDistanceKeyNextLocationsResponseMock = (): UtahUdotAtspmDataModelsRouteLocation[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getApiVVersionApiVersionRouteDistanceKeyNextLocationsCountResponseMock = (): UtahUdotAtspmDataModelsRouteLocation[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getApiVVersionApiVersionRouteDistanceGetRouteDistanceByLocationIdentifiersLocationALocationALocationBLocationBResponseMock = (overrideResponse: Partial< UtahUdotAtspmDataModelsRouteDistance | void > = {}): UtahUdotAtspmDataModelsRouteDistance | void => ({distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), previousLocations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), ...overrideResponse})

export const getApiVVersionApiVersionRouteDistanceCountResponseMock = (): UtahUdotAtspmDataModelsRouteDistance[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), previousLocations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])})))

export const getApiVVersionApiVersionRouteLocationCountResponseMock = (): UtahUdotAtspmDataModelsRouteLocation[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getApiVVersionApiVersionVersionHistoryCountResponseMock = (): UtahUdotAtspmDataModelsVersionHistory[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({children: faker.helpers.arrayElement([[], undefined]), date: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), parentId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), version: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getApiVVersionApiVersionWatchDogIgnoreEventCountResponseMock = (): UtahUdotAtspmDataModelsWatchDogIgnoreEvent[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({componentId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), componentType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.WatchDogComponentTypes)), undefined]), end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), issueType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.WatchDogIssueTypes)), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionHardwareTypes)), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DetectionTypes)), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LaneTypes)), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.MovementTypes)), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DirectionTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), devices: faker.helpers.arrayElement([[], undefined]), directory: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.TransportProtocols)), undefined]), searchTerms: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceStatus)), undefined]), deviceType: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.DeviceTypes)), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.helpers.arrayElement(Object.values(Utah.Udot.Atspm.Data.Enums.LocationVersionActions)), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), phase: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})))


export const getApiVVersionApiVersionApproachKeyDetectorsMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsDetector[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsDetector[]> | UtahUdotAtspmDataModelsDetector[])) => {
  return http.get('*/api/v1/Approach/:key/detectors', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionApproachKeyDetectorsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionApproachKeyDetectorsCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsDetector[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsDetector[]> | UtahUdotAtspmDataModelsDetector[])) => {
  return http.get('*/api/v1/Approach/:key/detectors/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionApproachKeyDetectorsCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPostApiV1UpsertApproachMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/api/v1/UpsertApproach', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getGetApiV1GetApproachDtoIdMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<void> | void)) => {
  return http.get('*/api/v1/GetApproachDto/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getApiVVersionApiVersionApproachMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsApproach[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsApproach[]> | UtahUdotAtspmDataModelsApproach[])) => {
  return http.get('*/api/v1/Approach', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionApproachResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionApproachKeyMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<void> | void)) => {
  return http.put('*/api/v1/Approach/:key', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getApiVVersionApiVersionApproachCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsApproach[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsApproach[]> | UtahUdotAtspmDataModelsApproach[])) => {
  return http.get('*/api/v1/Approach/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionApproachCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionAreaKeyLocationsMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsLocation[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsLocation[]> | UtahUdotAtspmDataModelsLocation[])) => {
  return http.get('*/api/v1/Area/:key/locations', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionAreaKeyLocationsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionAreaKeyLocationsCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsLocation[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsLocation[]> | UtahUdotAtspmDataModelsLocation[])) => {
  return http.get('*/api/v1/Area/:key/locations/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionAreaKeyLocationsCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionAreaMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsArea[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsArea[]> | UtahUdotAtspmDataModelsArea[])) => {
  return http.get('*/api/v1/Area', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionAreaResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionAreaKeyMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<void> | void)) => {
  return http.put('*/api/v1/Area/:key', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getApiVVersionApiVersionAreaCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsArea[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsArea[]> | UtahUdotAtspmDataModelsArea[])) => {
  return http.get('*/api/v1/Area/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionAreaCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionDetectionTypeKeyDetectorsMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsDetector[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsDetector[]> | UtahUdotAtspmDataModelsDetector[])) => {
  return http.get('*/api/v1/DetectionType/:key/detectors', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionDetectionTypeKeyDetectorsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionDetectionTypeKeyDetectorsCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsDetector[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsDetector[]> | UtahUdotAtspmDataModelsDetector[])) => {
  return http.get('*/api/v1/DetectionType/:key/detectors/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionDetectionTypeKeyDetectorsCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionDetectionTypeKeyMeasureTypesMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsMeasureType[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsMeasureType[]> | UtahUdotAtspmDataModelsMeasureType[])) => {
  return http.get('*/api/v1/DetectionType/:key/measureTypes', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionDetectionTypeKeyMeasureTypesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionDetectionTypeKeyMeasureTypesCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsMeasureType[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsMeasureType[]> | UtahUdotAtspmDataModelsMeasureType[])) => {
  return http.get('*/api/v1/DetectionType/:key/measureTypes/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionDetectionTypeKeyMeasureTypesCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionDetectionTypeMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/api/v1/DetectionType', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 201,
        
      })
  })
}

export const getApiVVersionApiVersionDetectionTypeCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsDetectionType[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsDetectionType[]> | UtahUdotAtspmDataModelsDetectionType[])) => {
  return http.get('*/api/v1/DetectionType/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionDetectionTypeCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionDetectionTypeKeyMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/api/v1/DetectionType/:key', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getApiVVersionApiVersionDetectorKeyDetectorCommentsMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsDetectorComment[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsDetectorComment[]> | UtahUdotAtspmDataModelsDetectorComment[])) => {
  return http.get('*/api/v1/Detector/:key/detectorComments', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionDetectorKeyDetectorCommentsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionDetectorKeyDetectorCommentsCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsDetectorComment[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsDetectorComment[]> | UtahUdotAtspmDataModelsDetectorComment[])) => {
  return http.get('*/api/v1/Detector/:key/detectorComments/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionDetectorKeyDetectorCommentsCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionDetectorKeyDetectionTypesMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsDetectionType[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsDetectionType[]> | UtahUdotAtspmDataModelsDetectionType[])) => {
  return http.get('*/api/v1/Detector/:key/detectionTypes', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionDetectorKeyDetectionTypesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionDetectorKeyDetectionTypesCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsDetectionType[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsDetectionType[]> | UtahUdotAtspmDataModelsDetectionType[])) => {
  return http.get('*/api/v1/Detector/:key/detectionTypes/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionDetectorKeyDetectionTypesCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionDetectorMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/api/v1/Detector', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 201,
        
      })
  })
}

export const getApiVVersionApiVersionDetectorCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsDetector[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsDetector[]> | UtahUdotAtspmDataModelsDetector[])) => {
  return http.get('*/api/v1/Detector/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionDetectorCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionDetectorKeyMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/api/v1/Detector/:key', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getApiVVersionApiVersionDetectorCommentMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/api/v1/DetectorComment', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 201,
        
      })
  })
}

export const getApiVVersionApiVersionDetectorCommentCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsDetectorComment[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsDetectorComment[]> | UtahUdotAtspmDataModelsDetectorComment[])) => {
  return http.get('*/api/v1/DetectorComment/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionDetectorCommentCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionDetectorCommentKeyMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/api/v1/DetectorComment/:key', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getApiVVersionApiVersionDeviceGetActiveDevicesByLocationLocationIdLocationIdMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsDevice[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsDevice[]> | UtahUdotAtspmDataModelsDevice[])) => {
  return http.get('*/api/v1/Device/GetActiveDevicesByLocation(locationId=:locationId)', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionDeviceGetActiveDevicesByLocationLocationIdLocationIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionDeviceGetActiveDevicesCountMockHandler = (overrideResponse?: UtahUdotATSPMConfigApiModelsDeviceGroup[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotATSPMConfigApiModelsDeviceGroup[]> | UtahUdotATSPMConfigApiModelsDeviceGroup[])) => {
  return http.get('*/api/v1/Device/GetActiveDevicesCount', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionDeviceGetActiveDevicesCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionDeviceMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/api/v1/Device', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 201,
        
      })
  })
}

export const getApiVVersionApiVersionDeviceCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsDevice[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsDevice[]> | UtahUdotAtspmDataModelsDevice[])) => {
  return http.get('*/api/v1/Device/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionDeviceCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionDeviceKeyMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/api/v1/Device/:key', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getApiVVersionApiVersionDeviceConfigurationKeyDevicesMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsDevice[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsDevice[]> | UtahUdotAtspmDataModelsDevice[])) => {
  return http.get('*/api/v1/DeviceConfiguration/:key/devices', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionDeviceConfigurationKeyDevicesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionDeviceConfigurationKeyDevicesCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsDevice[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsDevice[]> | UtahUdotAtspmDataModelsDevice[])) => {
  return http.get('*/api/v1/DeviceConfiguration/:key/devices/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionDeviceConfigurationKeyDevicesCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionDeviceConfigurationMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/api/v1/DeviceConfiguration', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 201,
        
      })
  })
}

export const getApiVVersionApiVersionDeviceConfigurationCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsDeviceConfiguration[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsDeviceConfiguration[]> | UtahUdotAtspmDataModelsDeviceConfiguration[])) => {
  return http.get('*/api/v1/DeviceConfiguration/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionDeviceConfigurationCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionDeviceConfigurationKeyMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/api/v1/DeviceConfiguration/:key', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getApiVVersionApiVersionDirectionTypeKeyApproachesMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsApproach[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsApproach[]> | UtahUdotAtspmDataModelsApproach[])) => {
  return http.get('*/api/v1/DirectionType/:key/approaches', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionDirectionTypeKeyApproachesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionDirectionTypeKeyApproachesCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsApproach[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsApproach[]> | UtahUdotAtspmDataModelsApproach[])) => {
  return http.get('*/api/v1/DirectionType/:key/approaches/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionDirectionTypeKeyApproachesCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionDirectionTypeKeyPrimaryDirectionsMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsRouteLocation[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsRouteLocation[]> | UtahUdotAtspmDataModelsRouteLocation[])) => {
  return http.get('*/api/v1/DirectionType/:key/primaryDirections', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionDirectionTypeKeyPrimaryDirectionsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionDirectionTypeKeyPrimaryDirectionsCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsRouteLocation[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsRouteLocation[]> | UtahUdotAtspmDataModelsRouteLocation[])) => {
  return http.get('*/api/v1/DirectionType/:key/primaryDirections/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionDirectionTypeKeyPrimaryDirectionsCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionDirectionTypeKeyOpposingDirectionsMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsRouteLocation[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsRouteLocation[]> | UtahUdotAtspmDataModelsRouteLocation[])) => {
  return http.get('*/api/v1/DirectionType/:key/opposingDirections', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionDirectionTypeKeyOpposingDirectionsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionDirectionTypeKeyOpposingDirectionsCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsRouteLocation[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsRouteLocation[]> | UtahUdotAtspmDataModelsRouteLocation[])) => {
  return http.get('*/api/v1/DirectionType/:key/opposingDirections/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionDirectionTypeKeyOpposingDirectionsCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionDirectionTypeMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/api/v1/DirectionType', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 201,
        
      })
  })
}

export const getApiVVersionApiVersionDirectionTypeCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsDirectionType[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsDirectionType[]> | UtahUdotAtspmDataModelsDirectionType[])) => {
  return http.get('*/api/v1/DirectionType/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionDirectionTypeCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionDirectionTypeKeyMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/api/v1/DirectionType/:key', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getApiVVersionApiVersionFaqMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsFaq[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsFaq[]> | UtahUdotAtspmDataModelsFaq[])) => {
  return http.get('*/api/v1/Faq', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionFaqResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionFaqKeyMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<void> | void)) => {
  return http.put('*/api/v1/Faq/:key', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getApiVVersionApiVersionFaqCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsFaq[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsFaq[]> | UtahUdotAtspmDataModelsFaq[])) => {
  return http.get('*/api/v1/Faq/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionFaqCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionJurisdictionKeyLocationsMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsLocation[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsLocation[]> | UtahUdotAtspmDataModelsLocation[])) => {
  return http.get('*/api/v1/Jurisdiction/:key/locations', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionJurisdictionKeyLocationsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionJurisdictionKeyLocationsCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsLocation[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsLocation[]> | UtahUdotAtspmDataModelsLocation[])) => {
  return http.get('*/api/v1/Jurisdiction/:key/locations/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionJurisdictionKeyLocationsCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionJurisdictionMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsJurisdiction[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsJurisdiction[]> | UtahUdotAtspmDataModelsJurisdiction[])) => {
  return http.get('*/api/v1/Jurisdiction', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionJurisdictionResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionJurisdictionKeyMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<void> | void)) => {
  return http.put('*/api/v1/Jurisdiction/:key', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getApiVVersionApiVersionJurisdictionCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsJurisdiction[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsJurisdiction[]> | UtahUdotAtspmDataModelsJurisdiction[])) => {
  return http.get('*/api/v1/Jurisdiction/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionJurisdictionCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionLocationKeyApproachesMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsApproach[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsApproach[]> | UtahUdotAtspmDataModelsApproach[])) => {
  return http.get('*/api/v1/Location/:key/approaches', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionLocationKeyApproachesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionLocationKeyApproachesCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsApproach[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsApproach[]> | UtahUdotAtspmDataModelsApproach[])) => {
  return http.get('*/api/v1/Location/:key/approaches/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionLocationKeyApproachesCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionLocationKeyAreasMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsArea[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsArea[]> | UtahUdotAtspmDataModelsArea[])) => {
  return http.get('*/api/v1/Location/:key/areas', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionLocationKeyAreasResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionLocationKeyAreasCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsArea[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsArea[]> | UtahUdotAtspmDataModelsArea[])) => {
  return http.get('*/api/v1/Location/:key/areas/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionLocationKeyAreasCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionLocationKeyDevicesMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsDevice[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsDevice[]> | UtahUdotAtspmDataModelsDevice[])) => {
  return http.get('*/api/v1/Location/:key/devices', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionLocationKeyDevicesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionLocationKeyDevicesCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsDevice[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsDevice[]> | UtahUdotAtspmDataModelsDevice[])) => {
  return http.get('*/api/v1/Location/:key/devices/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionLocationKeyDevicesCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionLocationKeyCopyLocationToNewVersionMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsLocation | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<UtahUdotAtspmDataModelsLocation> | UtahUdotAtspmDataModelsLocation)) => {
  return http.post('*/api/v1/Location/:key/CopyLocationToNewVersion', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionLocationKeyCopyLocationToNewVersionResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionLocationKeySyncLocationMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsLocation | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<UtahUdotAtspmDataModelsLocation> | UtahUdotAtspmDataModelsLocation)) => {
  return http.post('*/api/v1/Location/:key/SyncLocation', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionLocationKeySyncLocationResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionLocationKeySaveTemplatedLocationMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsLocation | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<UtahUdotAtspmDataModelsLocation> | UtahUdotAtspmDataModelsLocation)) => {
  return http.post('*/api/v1/Location/:key/SaveTemplatedLocation', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionLocationKeySaveTemplatedLocationResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionLocationKeySetLocationToDeletedMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/api/v1/Location/:key/SetLocationToDeleted', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getApiVVersionApiVersionLocationGetLatestVersionOfLocationIdentifierIdentifierMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsLocation | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsLocation> | UtahUdotAtspmDataModelsLocation)) => {
  return http.get('*/api/v1/Location/GetLatestVersionOfLocation(identifier=:identifier)', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionLocationGetLatestVersionOfLocationIdentifierIdentifierResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionLocationGetAllVersionsOfLocationIdentifierIdentifierMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsLocation[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsLocation[]> | UtahUdotAtspmDataModelsLocation[])) => {
  return http.get('*/api/v1/Location/GetAllVersionsOfLocation(identifier=:identifier)', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionLocationGetAllVersionsOfLocationIdentifierIdentifierResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionLocationGetLatestVersionOfAllLocationsMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsLocation[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsLocation[]> | UtahUdotAtspmDataModelsLocation[])) => {
  return http.get('*/api/v1/Location/GetLatestVersionOfAllLocations', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionLocationGetLatestVersionOfAllLocationsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionLocationGetDetectionTypeCountMockHandler = (overrideResponse?: UtahUdotAtspmBusinessWatchdogDetectionTypeGroup[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmBusinessWatchdogDetectionTypeGroup[]> | UtahUdotAtspmBusinessWatchdogDetectionTypeGroup[])) => {
  return http.get('*/api/v1/Location/GetDetectionTypeCount', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionLocationGetDetectionTypeCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionLocationGetLocationsForSearchMockHandler = (overrideResponse?: UtahUdotAtspmConfigApiModelsSearchLocation[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmConfigApiModelsSearchLocation[]> | UtahUdotAtspmConfigApiModelsSearchLocation[])) => {
  return http.get('*/api/v1/Location/GetLocationsForSearch', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionLocationGetLocationsForSearchResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionLocationMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/api/v1/Location', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 201,
        
      })
  })
}

export const getApiVVersionApiVersionLocationCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsLocation[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsLocation[]> | UtahUdotAtspmDataModelsLocation[])) => {
  return http.get('*/api/v1/Location/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionLocationCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionLocationKeyMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/api/v1/Location/:key', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getApiVVersionApiVersionLocationTypeKeyLocationsMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsLocation[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsLocation[]> | UtahUdotAtspmDataModelsLocation[])) => {
  return http.get('*/api/v1/LocationType/:key/locations', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionLocationTypeKeyLocationsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionLocationTypeKeyLocationsCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsLocation[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsLocation[]> | UtahUdotAtspmDataModelsLocation[])) => {
  return http.get('*/api/v1/LocationType/:key/locations/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionLocationTypeKeyLocationsCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionLocationTypeMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/api/v1/LocationType', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 201,
        
      })
  })
}

export const getApiVVersionApiVersionLocationTypeCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsLocationType[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsLocationType[]> | UtahUdotAtspmDataModelsLocationType[])) => {
  return http.get('*/api/v1/LocationType/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionLocationTypeCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionLocationTypeKeyMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/api/v1/LocationType/:key', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getApiVVersionApiVersionMapLayerMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/api/v1/MapLayer', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 201,
        
      })
  })
}

export const getApiVVersionApiVersionMapLayerCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsMapLayer[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsMapLayer[]> | UtahUdotAtspmDataModelsMapLayer[])) => {
  return http.get('*/api/v1/MapLayer/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionMapLayerCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionMapLayerKeyMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/api/v1/MapLayer/:key', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getApiVVersionApiVersionMeasureCommentKeyMeasureTypesMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsMeasureType[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsMeasureType[]> | UtahUdotAtspmDataModelsMeasureType[])) => {
  return http.get('*/api/v1/MeasureComment/:key/measureTypes', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionMeasureCommentKeyMeasureTypesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionMeasureCommentKeyMeasureTypesCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsMeasureType[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsMeasureType[]> | UtahUdotAtspmDataModelsMeasureType[])) => {
  return http.get('*/api/v1/MeasureComment/:key/measureTypes/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionMeasureCommentKeyMeasureTypesCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionMeasureCommentMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/api/v1/MeasureComment', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 201,
        
      })
  })
}

export const getApiVVersionApiVersionMeasureCommentCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsMeasureComment[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsMeasureComment[]> | UtahUdotAtspmDataModelsMeasureComment[])) => {
  return http.get('*/api/v1/MeasureComment/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionMeasureCommentCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionMeasureCommentKeyMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/api/v1/MeasureComment/:key', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getApiVVersionApiVersionMeasureOptionMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/api/v1/MeasureOption', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 201,
        
      })
  })
}

export const getApiVVersionApiVersionMeasureOptionCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsMeasureOption[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsMeasureOption[]> | UtahUdotAtspmDataModelsMeasureOption[])) => {
  return http.get('*/api/v1/MeasureOption/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionMeasureOptionCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionMeasureOptionKeyMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/api/v1/MeasureOption/:key', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getApiVVersionApiVersionMeasureTypeKeyDetectionTypesMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsDetectionType[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsDetectionType[]> | UtahUdotAtspmDataModelsDetectionType[])) => {
  return http.get('*/api/v1/MeasureType/:key/detectionTypes', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionMeasureTypeKeyDetectionTypesResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionMeasureTypeKeyDetectionTypesCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsDetectionType[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsDetectionType[]> | UtahUdotAtspmDataModelsDetectionType[])) => {
  return http.get('*/api/v1/MeasureType/:key/detectionTypes/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionMeasureTypeKeyDetectionTypesCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionMeasureTypeKeyMeasureCommentsMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsMeasureComment[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsMeasureComment[]> | UtahUdotAtspmDataModelsMeasureComment[])) => {
  return http.get('*/api/v1/MeasureType/:key/measureComments', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionMeasureTypeKeyMeasureCommentsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionMeasureTypeKeyMeasureCommentsCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsMeasureComment[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsMeasureComment[]> | UtahUdotAtspmDataModelsMeasureComment[])) => {
  return http.get('*/api/v1/MeasureType/:key/measureComments/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionMeasureTypeKeyMeasureCommentsCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionMeasureTypeMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/api/v1/MeasureType', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 201,
        
      })
  })
}

export const getApiVVersionApiVersionMeasureTypeCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsMeasureType[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsMeasureType[]> | UtahUdotAtspmDataModelsMeasureType[])) => {
  return http.get('*/api/v1/MeasureType/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionMeasureTypeCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionMeasureTypeKeyMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/api/v1/MeasureType/:key', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getApiVVersionApiVersionMenuItemsMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/api/v1/MenuItems', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 201,
        
      })
  })
}

export const getApiVVersionApiVersionMenuItemsCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsMenuItem[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsMenuItem[]> | UtahUdotAtspmDataModelsMenuItem[])) => {
  return http.get('*/api/v1/MenuItems/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionMenuItemsCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionMenuItemsKeyMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/api/v1/MenuItems/:key', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getApiVVersionApiVersionProductMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/api/v1/Product', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 201,
        
      })
  })
}

export const getApiVVersionApiVersionProductCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsProduct[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsProduct[]> | UtahUdotAtspmDataModelsProduct[])) => {
  return http.get('*/api/v1/Product/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionProductCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionProductKeyMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/api/v1/Product/:key', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getApiVVersionApiVersionRegionKeyLocationsMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsLocation[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsLocation[]> | UtahUdotAtspmDataModelsLocation[])) => {
  return http.get('*/api/v1/Region/:key/locations', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionRegionKeyLocationsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionRegionKeyLocationsCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsLocation[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsLocation[]> | UtahUdotAtspmDataModelsLocation[])) => {
  return http.get('*/api/v1/Region/:key/locations/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionRegionKeyLocationsCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionRegionMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsRegion[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsRegion[]> | UtahUdotAtspmDataModelsRegion[])) => {
  return http.get('*/api/v1/Region', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionRegionResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionRegionKeyMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<void> | void)) => {
  return http.put('*/api/v1/Region/:key', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getApiVVersionApiVersionRegionCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsRegion[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsRegion[]> | UtahUdotAtspmDataModelsRegion[])) => {
  return http.get('*/api/v1/Region/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionRegionCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionRouteKeyRouteLocationsMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsRouteLocation[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsRouteLocation[]> | UtahUdotAtspmDataModelsRouteLocation[])) => {
  return http.get('*/api/v1/Route/:key/routeLocations', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionRouteKeyRouteLocationsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionRouteKeyRouteLocationsCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsRouteLocation[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsRouteLocation[]> | UtahUdotAtspmDataModelsRouteLocation[])) => {
  return http.get('*/api/v1/Route/:key/routeLocations/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionRouteKeyRouteLocationsCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPostApiV1UpsertRouteMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/api/v1/UpsertRoute', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getGetApiV1GetRouteViewIdMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<void> | void)) => {
  return http.get('*/api/v1/GetRouteView/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 200,
        
      })
  })
}

export const getApiVVersionApiVersionRouteMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/api/v1/Route', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 201,
        
      })
  })
}

export const getApiVVersionApiVersionRouteCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsRoute[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsRoute[]> | UtahUdotAtspmDataModelsRoute[])) => {
  return http.get('*/api/v1/Route/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionRouteCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionRouteKeyMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/api/v1/Route/:key', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getApiVVersionApiVersionRouteDistanceKeyPreviousLocationsMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsRouteLocation[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsRouteLocation[]> | UtahUdotAtspmDataModelsRouteLocation[])) => {
  return http.get('*/api/v1/RouteDistance/:key/previousLocations', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionRouteDistanceKeyPreviousLocationsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionRouteDistanceKeyPreviousLocationsCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsRouteLocation[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsRouteLocation[]> | UtahUdotAtspmDataModelsRouteLocation[])) => {
  return http.get('*/api/v1/RouteDistance/:key/previousLocations/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionRouteDistanceKeyPreviousLocationsCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionRouteDistanceKeyNextLocationsMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsRouteLocation[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsRouteLocation[]> | UtahUdotAtspmDataModelsRouteLocation[])) => {
  return http.get('*/api/v1/RouteDistance/:key/nextLocations', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionRouteDistanceKeyNextLocationsResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionRouteDistanceKeyNextLocationsCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsRouteLocation[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsRouteLocation[]> | UtahUdotAtspmDataModelsRouteLocation[])) => {
  return http.get('*/api/v1/RouteDistance/:key/nextLocations/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionRouteDistanceKeyNextLocationsCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionRouteDistanceGetRouteDistanceByLocationIdentifiersLocationALocationALocationBLocationBMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsRouteDistance | void | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsRouteDistance | void> | UtahUdotAtspmDataModelsRouteDistance | void)) => {
  return http.get('*/api/v1/RouteDistance/GetRouteDistanceByLocationIdentifiers(locationA=:locationA,locationB=:locationB)', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionRouteDistanceGetRouteDistanceByLocationIdentifiersLocationALocationALocationBLocationBResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionRouteDistanceMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/api/v1/RouteDistance', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 201,
        
      })
  })
}

export const getApiVVersionApiVersionRouteDistanceCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsRouteDistance[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsRouteDistance[]> | UtahUdotAtspmDataModelsRouteDistance[])) => {
  return http.get('*/api/v1/RouteDistance/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionRouteDistanceCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionRouteDistanceKeyMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/api/v1/RouteDistance/:key', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getApiVVersionApiVersionRouteLocationMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/api/v1/RouteLocation', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 201,
        
      })
  })
}

export const getApiVVersionApiVersionRouteLocationCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsRouteLocation[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsRouteLocation[]> | UtahUdotAtspmDataModelsRouteLocation[])) => {
  return http.get('*/api/v1/RouteLocation/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionRouteLocationCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionRouteLocationKeyMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/api/v1/RouteLocation/:key', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getApiVVersionApiVersionVersionHistoryMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/api/v1/VersionHistory', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 201,
        
      })
  })
}

export const getApiVVersionApiVersionVersionHistoryCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsVersionHistory[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsVersionHistory[]> | UtahUdotAtspmDataModelsVersionHistory[])) => {
  return http.get('*/api/v1/VersionHistory/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionVersionHistoryCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionVersionHistoryKeyMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/api/v1/VersionHistory/:key', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getApiVVersionApiVersionWatchDogIgnoreEventMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<void> | void)) => {
  return http.post('*/api/v1/WatchDogIgnoreEvent', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 201,
        
      })
  })
}

export const getApiVVersionApiVersionWatchDogIgnoreEventCountMockHandler = (overrideResponse?: UtahUdotAtspmDataModelsWatchDogIgnoreEvent[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UtahUdotAtspmDataModelsWatchDogIgnoreEvent[]> | UtahUdotAtspmDataModelsWatchDogIgnoreEvent[])) => {
  return http.get('*/api/v1/WatchDogIgnoreEvent/$count', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getApiVVersionApiVersionWatchDogIgnoreEventCountResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getApiVVersionApiVersionWatchDogIgnoreEventKeyMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/api/v1/WatchDogIgnoreEvent/:key', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}
export const getATSPMConfigurationApiMock = () => [
  getApiVVersionApiVersionApproachKeyDetectorsMockHandler(),
  getApiVVersionApiVersionApproachKeyDetectorsCountMockHandler(),
  getPostApiV1UpsertApproachMockHandler(),
  getGetApiV1GetApproachDtoIdMockHandler(),
  getApiVVersionApiVersionApproachMockHandler(),
  getApiVVersionApiVersionApproachKeyMockHandler(),
  getApiVVersionApiVersionApproachCountMockHandler(),
  getApiVVersionApiVersionAreaKeyLocationsMockHandler(),
  getApiVVersionApiVersionAreaKeyLocationsCountMockHandler(),
  getApiVVersionApiVersionAreaMockHandler(),
  getApiVVersionApiVersionAreaKeyMockHandler(),
  getApiVVersionApiVersionAreaCountMockHandler(),
  getApiVVersionApiVersionDetectionTypeKeyDetectorsMockHandler(),
  getApiVVersionApiVersionDetectionTypeKeyDetectorsCountMockHandler(),
  getApiVVersionApiVersionDetectionTypeKeyMeasureTypesMockHandler(),
  getApiVVersionApiVersionDetectionTypeKeyMeasureTypesCountMockHandler(),
  getApiVVersionApiVersionDetectionTypeMockHandler(),
  getApiVVersionApiVersionDetectionTypeCountMockHandler(),
  getApiVVersionApiVersionDetectionTypeKeyMockHandler(),
  getApiVVersionApiVersionDetectorKeyDetectorCommentsMockHandler(),
  getApiVVersionApiVersionDetectorKeyDetectorCommentsCountMockHandler(),
  getApiVVersionApiVersionDetectorKeyDetectionTypesMockHandler(),
  getApiVVersionApiVersionDetectorKeyDetectionTypesCountMockHandler(),
  getApiVVersionApiVersionDetectorMockHandler(),
  getApiVVersionApiVersionDetectorCountMockHandler(),
  getApiVVersionApiVersionDetectorKeyMockHandler(),
  getApiVVersionApiVersionDetectorCommentMockHandler(),
  getApiVVersionApiVersionDetectorCommentCountMockHandler(),
  getApiVVersionApiVersionDetectorCommentKeyMockHandler(),
  getApiVVersionApiVersionDeviceGetActiveDevicesByLocationLocationIdLocationIdMockHandler(),
  getApiVVersionApiVersionDeviceGetActiveDevicesCountMockHandler(),
  getApiVVersionApiVersionDeviceMockHandler(),
  getApiVVersionApiVersionDeviceCountMockHandler(),
  getApiVVersionApiVersionDeviceKeyMockHandler(),
  getApiVVersionApiVersionDeviceConfigurationKeyDevicesMockHandler(),
  getApiVVersionApiVersionDeviceConfigurationKeyDevicesCountMockHandler(),
  getApiVVersionApiVersionDeviceConfigurationMockHandler(),
  getApiVVersionApiVersionDeviceConfigurationCountMockHandler(),
  getApiVVersionApiVersionDeviceConfigurationKeyMockHandler(),
  getApiVVersionApiVersionDirectionTypeKeyApproachesMockHandler(),
  getApiVVersionApiVersionDirectionTypeKeyApproachesCountMockHandler(),
  getApiVVersionApiVersionDirectionTypeKeyPrimaryDirectionsMockHandler(),
  getApiVVersionApiVersionDirectionTypeKeyPrimaryDirectionsCountMockHandler(),
  getApiVVersionApiVersionDirectionTypeKeyOpposingDirectionsMockHandler(),
  getApiVVersionApiVersionDirectionTypeKeyOpposingDirectionsCountMockHandler(),
  getApiVVersionApiVersionDirectionTypeMockHandler(),
  getApiVVersionApiVersionDirectionTypeCountMockHandler(),
  getApiVVersionApiVersionDirectionTypeKeyMockHandler(),
  getApiVVersionApiVersionFaqMockHandler(),
  getApiVVersionApiVersionFaqKeyMockHandler(),
  getApiVVersionApiVersionFaqCountMockHandler(),
  getApiVVersionApiVersionJurisdictionKeyLocationsMockHandler(),
  getApiVVersionApiVersionJurisdictionKeyLocationsCountMockHandler(),
  getApiVVersionApiVersionJurisdictionMockHandler(),
  getApiVVersionApiVersionJurisdictionKeyMockHandler(),
  getApiVVersionApiVersionJurisdictionCountMockHandler(),
  getApiVVersionApiVersionLocationKeyApproachesMockHandler(),
  getApiVVersionApiVersionLocationKeyApproachesCountMockHandler(),
  getApiVVersionApiVersionLocationKeyAreasMockHandler(),
  getApiVVersionApiVersionLocationKeyAreasCountMockHandler(),
  getApiVVersionApiVersionLocationKeyDevicesMockHandler(),
  getApiVVersionApiVersionLocationKeyDevicesCountMockHandler(),
  getApiVVersionApiVersionLocationKeyCopyLocationToNewVersionMockHandler(),
  getApiVVersionApiVersionLocationKeySyncLocationMockHandler(),
  getApiVVersionApiVersionLocationKeySaveTemplatedLocationMockHandler(),
  getApiVVersionApiVersionLocationKeySetLocationToDeletedMockHandler(),
  getApiVVersionApiVersionLocationGetLatestVersionOfLocationIdentifierIdentifierMockHandler(),
  getApiVVersionApiVersionLocationGetAllVersionsOfLocationIdentifierIdentifierMockHandler(),
  getApiVVersionApiVersionLocationGetLatestVersionOfAllLocationsMockHandler(),
  getApiVVersionApiVersionLocationGetDetectionTypeCountMockHandler(),
  getApiVVersionApiVersionLocationGetLocationsForSearchMockHandler(),
  getApiVVersionApiVersionLocationMockHandler(),
  getApiVVersionApiVersionLocationCountMockHandler(),
  getApiVVersionApiVersionLocationKeyMockHandler(),
  getApiVVersionApiVersionLocationTypeKeyLocationsMockHandler(),
  getApiVVersionApiVersionLocationTypeKeyLocationsCountMockHandler(),
  getApiVVersionApiVersionLocationTypeMockHandler(),
  getApiVVersionApiVersionLocationTypeCountMockHandler(),
  getApiVVersionApiVersionLocationTypeKeyMockHandler(),
  getApiVVersionApiVersionMapLayerMockHandler(),
  getApiVVersionApiVersionMapLayerCountMockHandler(),
  getApiVVersionApiVersionMapLayerKeyMockHandler(),
  getApiVVersionApiVersionMeasureCommentKeyMeasureTypesMockHandler(),
  getApiVVersionApiVersionMeasureCommentKeyMeasureTypesCountMockHandler(),
  getApiVVersionApiVersionMeasureCommentMockHandler(),
  getApiVVersionApiVersionMeasureCommentCountMockHandler(),
  getApiVVersionApiVersionMeasureCommentKeyMockHandler(),
  getApiVVersionApiVersionMeasureOptionMockHandler(),
  getApiVVersionApiVersionMeasureOptionCountMockHandler(),
  getApiVVersionApiVersionMeasureOptionKeyMockHandler(),
  getApiVVersionApiVersionMeasureTypeKeyDetectionTypesMockHandler(),
  getApiVVersionApiVersionMeasureTypeKeyDetectionTypesCountMockHandler(),
  getApiVVersionApiVersionMeasureTypeKeyMeasureCommentsMockHandler(),
  getApiVVersionApiVersionMeasureTypeKeyMeasureCommentsCountMockHandler(),
  getApiVVersionApiVersionMeasureTypeMockHandler(),
  getApiVVersionApiVersionMeasureTypeCountMockHandler(),
  getApiVVersionApiVersionMeasureTypeKeyMockHandler(),
  getApiVVersionApiVersionMenuItemsMockHandler(),
  getApiVVersionApiVersionMenuItemsCountMockHandler(),
  getApiVVersionApiVersionMenuItemsKeyMockHandler(),
  getApiVVersionApiVersionProductMockHandler(),
  getApiVVersionApiVersionProductCountMockHandler(),
  getApiVVersionApiVersionProductKeyMockHandler(),
  getApiVVersionApiVersionRegionKeyLocationsMockHandler(),
  getApiVVersionApiVersionRegionKeyLocationsCountMockHandler(),
  getApiVVersionApiVersionRegionMockHandler(),
  getApiVVersionApiVersionRegionKeyMockHandler(),
  getApiVVersionApiVersionRegionCountMockHandler(),
  getApiVVersionApiVersionRouteKeyRouteLocationsMockHandler(),
  getApiVVersionApiVersionRouteKeyRouteLocationsCountMockHandler(),
  getPostApiV1UpsertRouteMockHandler(),
  getGetApiV1GetRouteViewIdMockHandler(),
  getApiVVersionApiVersionRouteMockHandler(),
  getApiVVersionApiVersionRouteCountMockHandler(),
  getApiVVersionApiVersionRouteKeyMockHandler(),
  getApiVVersionApiVersionRouteDistanceKeyPreviousLocationsMockHandler(),
  getApiVVersionApiVersionRouteDistanceKeyPreviousLocationsCountMockHandler(),
  getApiVVersionApiVersionRouteDistanceKeyNextLocationsMockHandler(),
  getApiVVersionApiVersionRouteDistanceKeyNextLocationsCountMockHandler(),
  getApiVVersionApiVersionRouteDistanceGetRouteDistanceByLocationIdentifiersLocationALocationALocationBLocationBMockHandler(),
  getApiVVersionApiVersionRouteDistanceMockHandler(),
  getApiVVersionApiVersionRouteDistanceCountMockHandler(),
  getApiVVersionApiVersionRouteDistanceKeyMockHandler(),
  getApiVVersionApiVersionRouteLocationMockHandler(),
  getApiVVersionApiVersionRouteLocationCountMockHandler(),
  getApiVVersionApiVersionRouteLocationKeyMockHandler(),
  getApiVVersionApiVersionVersionHistoryMockHandler(),
  getApiVVersionApiVersionVersionHistoryCountMockHandler(),
  getApiVVersionApiVersionVersionHistoryKeyMockHandler(),
  getApiVVersionApiVersionWatchDogIgnoreEventMockHandler(),
  getApiVVersionApiVersionWatchDogIgnoreEventCountMockHandler(),
  getApiVVersionApiVersionWatchDogIgnoreEventKeyMockHandler()
]
