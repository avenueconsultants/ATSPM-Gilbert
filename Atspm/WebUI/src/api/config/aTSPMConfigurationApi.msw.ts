/**
 * Generated by orval v6.23.0 🍺
 * Do not edit manually.
 * ATSPM Configuration Api
 * ATSPM Configuration with OData, OpenAPI, Swashbuckle, and API versioning.
 * OpenAPI spec version: 1.0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'

export const getGetApproachDetectorsFromKeyMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getGetApproachDetectorsCountFromKeyMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getGetApproachMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getGetApproachFromKeyMock = () => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})

export const getGetApproachCountMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getGetAreaLocationsFromKeyMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getGetAreaLocationsCountFromKeyMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getGetAreaMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([[], undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})))

export const getGetAreaFromKeyMock = () => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({area: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([[], undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([[], undefined])}, undefined]), areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})

export const getGetAreaCountMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([[], undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})))

export const getGetDetectionTypeDetectorsFromKeyMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getGetDetectionTypeDetectorsCountFromKeyMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getGetDetectionTypeMeasureTypesFromKeyMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})))

export const getGetDetectionTypeMeasureTypesCountFromKeyMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})))

export const getGetDetectionTypeMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})))

export const getGetDetectionTypeCountMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})))

export const getGetDetectionTypeFromKeyMock = () => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})

export const getGetDetectorDetectorCommentsFromKeyMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detector: faker.helpers.arrayElement([{approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([[], undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})))

export const getGetDetectorDetectorCommentsCountFromKeyMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detector: faker.helpers.arrayElement([{approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([[], undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})))

export const getGetDetectorDetectionTypesFromKeyMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})))

export const getGetDetectorDetectionTypesCountFromKeyMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})))

export const getGetDetectorMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getGetDetectorCountMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getGetDetectorFromKeyMock = () => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detector: faker.helpers.arrayElement([{approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([[], undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})

export const getGetDetectorCommentMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detector: faker.helpers.arrayElement([{approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([[], undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})))

export const getGetDetectorCommentCountMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detector: faker.helpers.arrayElement([{approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([[], undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})))

export const getGetDetectorCommentFromKeyMock = () => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detector: faker.helpers.arrayElement([{approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})

export const getGetDeviceActiveDevicesByLocationFromLocationIdMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})))

export const getGetDeviceActiveDevicesCountMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({count: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), firmware: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})))

export const getGetDeviceMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})))

export const getGetDeviceCountMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})))

export const getGetDeviceFromKeyMock = () => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})

export const getGetDeviceConfigurationDevicesFromKeyMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})))

export const getGetDeviceConfigurationDevicesCountFromKeyMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})))

export const getGetDeviceConfigurationEventLogDecodersMock = () => (Array.from({length: faker.number.int({min: 1,max: 10})}, () => faker.word.sample()))

export const getGetDeviceConfigurationMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})))

export const getGetDeviceConfigurationCountMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})))

export const getGetDeviceConfigurationFromKeyMock = () => ({connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})

export const getGetDirectionTypeApproachesFromKeyMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getGetDirectionTypeApproachesCountFromKeyMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getGetDirectionTypePrimaryDirectionsFromKeyMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getGetDirectionTypePrimaryDirectionsCountFromKeyMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getGetDirectionTypeOpposingDirectionsFromKeyMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getGetDirectionTypeOpposingDirectionsCountFromKeyMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getGetDirectionTypeMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])})))

export const getGetDirectionTypeCountMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])})))

export const getGetDirectionTypeFromKeyMock = () => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])})

export const getGetFaqMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({body: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), header: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getGetFaqFromKeyMock = () => ({body: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), header: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})

export const getGetFaqCountMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({body: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), header: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getGetJurisdictionLocationsFromKeyMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getGetJurisdictionLocationsCountFromKeyMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getGetJurisdictionMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})))

export const getGetJurisdictionFromKeyMock = () => ({countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([[], undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})

export const getGetJurisdictionCountMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})))

export const getGetLocationApproachesFromKeyMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getGetLocationApproachesCountFromKeyMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getGetLocationAreasFromKeyMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([[], undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})))

export const getGetLocationAreasCountFromKeyMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([[], undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})))

export const getGetLocationDevicesFromKeyMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})))

export const getGetLocationDevicesCountFromKeyMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})))

export const getGetLocationCopyLocationToNewVersionFromKeyMock = () => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([[], undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})

export const getGetLocationSyncLocationFromKeyMock = () => ({id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggedButUnusedDetectorChannels: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.number.int({min: undefined, max: undefined}))), undefined]), loggedButUnusedOverlapPhases: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.number.int({min: undefined, max: undefined}))), undefined]), loggedButUnusedPedestrianPhases: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.number.int({min: undefined, max: undefined}))), undefined]), loggedButUnusedProtectedOrPermissivePhases: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.number.int({min: undefined, max: undefined}))), undefined]), removedApproachIds: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.number.int({min: undefined, max: undefined}))), undefined]), removedDetectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined])})

export const getGetLocationSaveTemplatedLocationFromKeyMock = () => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([[], undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})

export const getGetLocationLatestVersionOfLocationFromIdentifierMock = () => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([[], undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})

export const getGetLocationAllVersionsOfLocationFromIdentifierMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getGetLocationLatestVersionOfAllLocationsMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getGetLocationDetectionTypeCountMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({count: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})))

export const getGetLocationLocationsForSearchMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.number.int({min: undefined, max: undefined}))), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), charts: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.number.int({min: undefined, max: undefined}))), undefined]), hasRampDevice: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})))

export const getGetLocationMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getGetLocationCountMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getGetLocationFromKeyMock = () => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([[], undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})

export const getGetLocationTypeLocationsFromKeyMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getGetLocationTypeLocationsCountFromKeyMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getGetLocationTypeMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})))

export const getGetLocationTypeCountMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})))

export const getGetLocationTypeFromKeyMock = () => ({icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})

export const getGetMapLayerMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), createdOn: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), deletedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deletedOn: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mapLayerUrl: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), refreshIntervalSeconds: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), serviceType: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showByDefault: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), updatedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), updatedOn: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})))

export const getGetMapLayerCountMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), createdOn: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), deletedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deletedOn: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mapLayerUrl: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), refreshIntervalSeconds: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), serviceType: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showByDefault: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), updatedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), updatedOn: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})))

export const getGetMapLayerFromKeyMock = () => ({createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), createdOn: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), deletedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deletedOn: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mapLayerUrl: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), refreshIntervalSeconds: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), serviceType: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showByDefault: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), updatedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), updatedOn: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})

export const getGetMeasureCommentMeasureTypesFromKeyMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})))

export const getGetMeasureCommentMeasureTypesCountFromKeyMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})))

export const getGetMeasureCommentMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([[], undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})))

export const getGetMeasureCommentCountMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([[], undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})))

export const getGetMeasureCommentFromKeyMock = () => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})

export const getGetMeasureOptionMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])}, undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})))

export const getGetMeasureOptionCountMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])}, undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})))

export const getGetMeasureOptionFromKeyMock = () => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])}, undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})

export const getGetMeasureOptionPresetMeasureOptionPresetTypesMock = () => (Array.from({length: faker.number.int({min: 1,max: 10})}, () => faker.word.sample()))

export const getGetMeasureOptionPresetMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([[], undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])}, undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})))

export const getGetMeasureOptionPresetCountMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([[], undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])}, undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})))

export const getGetMeasureOptionPresetFromKeyMock = () => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])}, undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})

export const getGetMeasureTypeDetectionTypesFromKeyMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})))

export const getGetMeasureTypeDetectionTypesCountFromKeyMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})))

export const getGetMeasureTypeMeasureCommentsFromKeyMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([[], undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})))

export const getGetMeasureTypeMeasureCommentsCountFromKeyMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([[], undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})))

export const getGetMeasureTypeMeasureOptionPresetsFromKeyMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([[], undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])}, undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})))

export const getGetMeasureTypeMeasureOptionPresetsCountFromKeyMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([[], undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])}, undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})))

export const getGetMeasureTypeMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})))

export const getGetMeasureTypeCountMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})))

export const getGetMeasureTypeFromKeyMock = () => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([[], undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([[], undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])}, undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approach: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])}, undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})

export const getGetMenuItemsMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({children: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), document: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), link: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), parentId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])})))

export const getGetMenuItemsCountMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({children: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), document: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), link: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), parentId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])})))

export const getGetMenuItemsFromKeyMock = () => ({children: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({children: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), document: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), link: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), parentId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])})), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), document: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), link: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), parent: faker.helpers.arrayElement([{children: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), document: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), link: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), parentId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])}, undefined]), parentId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined])})

export const getGetProductMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})))

export const getGetProductCountMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})))

export const getGetProductFromKeyMock = () => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})

export const getGetRegionLocationsFromKeyMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getGetRegionLocationsCountFromKeyMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getGetRegionMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})))

export const getGetRegionFromKeyMock = () => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), userRegions: faker.helpers.arrayElement([[], undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})

export const getGetRegionCountMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})))

export const getGetRouteRouteLocationsFromKeyMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getGetRouteRouteLocationsCountFromKeyMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getGetRouteMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])})))

export const getGetRouteCountMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])})))

export const getGetRouteFromKeyMock = () => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])})

export const getGetRouteDistancePreviousLocationsFromKeyMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getGetRouteDistancePreviousLocationsCountFromKeyMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getGetRouteDistanceNextLocationsFromKeyMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getGetRouteDistanceNextLocationsCountFromKeyMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getGetRouteDistanceRouteDistanceByLocationIdentifiersFromLocationAAndLocationBMock = () => ({distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), previousLocations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])})

export const getGetRouteDistanceMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), previousLocations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])})))

export const getGetRouteDistanceCountMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), previousLocations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])})))

export const getGetRouteDistanceFromKeyMock = () => ({distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), previousLocations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])})

export const getGetRouteLocationMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getGetRouteLocationCountMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getGetRouteLocationFromKeyMock = () => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), previousLocations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), previousLocations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirection: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([[], undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([[], undefined]), primaryDirections: faker.helpers.arrayElement([[], undefined])}, undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})

export const getGetVersionHistoryMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({children: faker.helpers.arrayElement([[], undefined]), date: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), parentId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), version: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getGetVersionHistoryCountMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({children: faker.helpers.arrayElement([[], undefined]), date: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), parentId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), version: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})))

export const getGetVersionHistoryFromKeyMock = () => ({children: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({children: faker.helpers.arrayElement([[], undefined]), date: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), parentId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), version: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), date: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), parent: faker.helpers.arrayElement([{children: faker.helpers.arrayElement([[], undefined]), date: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), parentId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), version: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), parentId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), version: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})

export const getGetWatchDogIgnoreEventMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({componentId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), componentType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), issueType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), phase: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})))

export const getGetWatchDogIgnoreEventCountMock = () => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({componentId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), componentType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), issueType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), phase: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})))

export const getGetWatchDogIgnoreEventFromKeyMock = () => ({componentId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), componentType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), end: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), issueType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), location: faker.helpers.arrayElement([{approaches: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({approachId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), dateAdded: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), dateDisabled: faker.helpers.arrayElement([faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, null]), undefined]), decisionPoint: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), dectectorIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionHardware: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectionTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectors: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypes: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectionTypes: faker.helpers.arrayElement([[], undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), measureTypes: faker.helpers.arrayElement([[], undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), measureOptionPresets: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({created: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), createdBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), modified: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), modifiedBy: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), option: faker.helpers.arrayElement([{}, undefined])})), undefined]), measureOptions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), measureTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), option: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), value: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), showOnAggregationSite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), showOnWebsite: faker.helpers.arrayElement([faker.datatype.boolean(), undefined])})), undefined])})), undefined]), detectorChannel: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), detectorComments: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({comment: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), detectorId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), timeStamp: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})), undefined]), distanceFromStopBar: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), laneNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), laneType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), latencyCorrection: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), minSpeedFilter: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementDelay: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), movementType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), directionType: faker.helpers.arrayElement([{abbreviation: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), approaches: faker.helpers.arrayElement([[], undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), displayOrder: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), primaryDirections: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isOpposingOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPrimaryOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), nextLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), opposingDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), opposingPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), order: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), previousLocationDistance: faker.helpers.arrayElement([{distance: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifierA: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationIdentifierB: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), nextLocations: faker.helpers.arrayElement([[], undefined]), previousLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), previousLocationDistanceId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), primaryDirectionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), primaryPhase: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), route: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), routeLocations: faker.helpers.arrayElement([[], undefined])}, undefined]), routeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined])}, undefined]), directionTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), isPedestrianPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isPermissivePhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), isProtectedPhaseOverlap: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), mph: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), pedestrianDetectors: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedestrianPhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), permissivePhaseNumber: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protectedPhaseNumber: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])})), undefined]), areas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userAreas: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({areaId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])})), undefined]), chartEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), devices: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({deviceConfiguration: faker.helpers.arrayElement([{connectionTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), decoders: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), devices: faker.helpers.arrayElement([[], undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingOffset: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), operationTimeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), password: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), path: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), port: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), product: faker.helpers.arrayElement([{id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), manufacturer: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), model: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), webPage: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), productId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), protocol: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), query: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), undefined]), userName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), deviceConfigurationId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), deviceIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), deviceStatus: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), deviceType: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ipaddress: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), loggingEnabled: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), notes: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), jurisdiction: faker.helpers.arrayElement([{countyParish: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), mpo: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), otherPartners: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), userJurisdictions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({jurisdictionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), jurisdictionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), latitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), locationType: faker.helpers.arrayElement([{icon: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), name: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])}, undefined]), locationTypeId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), longitude: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), note: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), pedsAre1to1: faker.helpers.arrayElement([faker.datatype.boolean(), undefined]), primaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), region: faker.helpers.arrayElement([{description: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locations: faker.helpers.arrayElement([[], undefined]), userRegions: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({regionId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), userId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined])})), undefined])}, undefined]), regionId: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), secondaryName: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), versionAction: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined])}, undefined]), locationId: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), locationIdentifier: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.word.sample(), null]), undefined]), phase: faker.helpers.arrayElement([faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), null]), undefined]), start: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined])})

export const getATSPMConfigurationApiMock = () => [
http.get('*/api/v1/Approach/:key/detectors', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetApproachDetectorsFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/Approach/:key/detectors/$count', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetApproachDetectorsCountFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/UpsertApproach', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/GetApproachDto/:id', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/Approach', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/Approach', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetApproachMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.patch('*/api/v1/Approach/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.delete('*/api/v1/Approach/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/Approach/:key', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetApproachFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.put('*/api/v1/Approach/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/Approach/$count', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetApproachCountMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/Area/:key/locations', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetAreaLocationsFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/Area/:key/locations/$count', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetAreaLocationsCountFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/Area', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/Area', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetAreaMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.patch('*/api/v1/Area/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.delete('*/api/v1/Area/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/Area/:key', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetAreaFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.put('*/api/v1/Area/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/Area/$count', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetAreaCountMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/DetectionType/:key/detectors', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetDetectionTypeDetectorsFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/DetectionType/:key/detectors/$count', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetDetectionTypeDetectorsCountFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/DetectionType/:key/measureTypes', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetDetectionTypeMeasureTypesFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/DetectionType/:key/measureTypes/$count', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetDetectionTypeMeasureTypesCountFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/DetectionType', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetDetectionTypeMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/DetectionType', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/DetectionType/$count', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetDetectionTypeCountMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/DetectionType/:key', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetDetectionTypeFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.put('*/api/v1/DetectionType/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.patch('*/api/v1/DetectionType/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.delete('*/api/v1/DetectionType/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/Detector/:key/detectorComments', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetDetectorDetectorCommentsFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/Detector/:key/detectorComments/$count', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetDetectorDetectorCommentsCountFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/Detector/:key/detectionTypes', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetDetectorDetectionTypesFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/Detector/:key/detectionTypes/$count', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetDetectorDetectionTypesCountFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/Detector/retrieveDetctionData', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/Detector', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetDetectorMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/Detector', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/Detector/$count', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetDetectorCountMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/Detector/:key', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetDetectorFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.put('*/api/v1/Detector/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.patch('*/api/v1/Detector/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.delete('*/api/v1/Detector/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/DetectorComment', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetDetectorCommentMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/DetectorComment', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/DetectorComment/$count', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetDetectorCommentCountMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/DetectorComment/:key', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetDetectorCommentFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.put('*/api/v1/DetectorComment/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.patch('*/api/v1/DetectorComment/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.delete('*/api/v1/DetectorComment/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/Device/GetActiveDevicesByLocation(locationId=:locationId)', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetDeviceActiveDevicesByLocationFromLocationIdMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/Device/GetActiveDevicesCount', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetDeviceActiveDevicesCountMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/Device', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetDeviceMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/Device', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/Device/$count', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetDeviceCountMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/Device/:key', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetDeviceFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.put('*/api/v1/Device/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.patch('*/api/v1/Device/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.delete('*/api/v1/Device/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/DeviceConfiguration/:key/devices', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetDeviceConfigurationDevicesFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/DeviceConfiguration/:key/devices/$count', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetDeviceConfigurationDevicesCountFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/DeviceConfiguration/GetEventLogDecoders', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetDeviceConfigurationEventLogDecodersMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/DeviceConfiguration', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetDeviceConfigurationMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/DeviceConfiguration', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/DeviceConfiguration/$count', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetDeviceConfigurationCountMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/DeviceConfiguration/:key', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetDeviceConfigurationFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.put('*/api/v1/DeviceConfiguration/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.patch('*/api/v1/DeviceConfiguration/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.delete('*/api/v1/DeviceConfiguration/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/DirectionType/:key/approaches', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetDirectionTypeApproachesFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/DirectionType/:key/approaches/$count', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetDirectionTypeApproachesCountFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/DirectionType/:key/primaryDirections', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetDirectionTypePrimaryDirectionsFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/DirectionType/:key/primaryDirections/$count', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetDirectionTypePrimaryDirectionsCountFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/DirectionType/:key/opposingDirections', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetDirectionTypeOpposingDirectionsFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/DirectionType/:key/opposingDirections/$count', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetDirectionTypeOpposingDirectionsCountFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/DirectionType', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetDirectionTypeMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/DirectionType', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/DirectionType/$count', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetDirectionTypeCountMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/DirectionType/:key', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetDirectionTypeFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.put('*/api/v1/DirectionType/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.patch('*/api/v1/DirectionType/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.delete('*/api/v1/DirectionType/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/Faq', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/Faq', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetFaqMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.patch('*/api/v1/Faq/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.delete('*/api/v1/Faq/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/Faq/:key', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetFaqFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.put('*/api/v1/Faq/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/Faq/$count', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetFaqCountMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/Jurisdiction/:key/locations', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetJurisdictionLocationsFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/Jurisdiction/:key/locations/$count', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetJurisdictionLocationsCountFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/Jurisdiction', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/Jurisdiction', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetJurisdictionMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.patch('*/api/v1/Jurisdiction/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.delete('*/api/v1/Jurisdiction/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/Jurisdiction/:key', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetJurisdictionFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.put('*/api/v1/Jurisdiction/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/Jurisdiction/$count', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetJurisdictionCountMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/Location/:key/approaches', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetLocationApproachesFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/Location/:key/approaches/$count', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetLocationApproachesCountFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/Location/:key/areas', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetLocationAreasFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/Location/:key/areas/$count', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetLocationAreasCountFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/Location/:key/devices', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetLocationDevicesFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/Location/:key/devices/$count', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetLocationDevicesCountFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/Location/:key/CopyLocationToNewVersion', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetLocationCopyLocationToNewVersionFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/Location/:key/SyncLocation', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetLocationSyncLocationFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/Location/:key/SaveTemplatedLocation', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetLocationSaveTemplatedLocationFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/Location/:key/SetLocationToDeleted', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/Location/GetLatestVersionOfLocation(identifier=:identifier)', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetLocationLatestVersionOfLocationFromIdentifierMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/Location/GetAllVersionsOfLocation(identifier=:identifier)', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetLocationAllVersionsOfLocationFromIdentifierMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/Location/GetLatestVersionOfAllLocations', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetLocationLatestVersionOfAllLocationsMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/Location/GetDetectionTypeCount', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetLocationDetectionTypeCountMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/Location/GetLocationsForSearch', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetLocationLocationsForSearchMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/Location', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetLocationMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/Location', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/Location/$count', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetLocationCountMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/Location/:key', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetLocationFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.put('*/api/v1/Location/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.patch('*/api/v1/Location/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.delete('*/api/v1/Location/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/LocationType/:key/locations', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetLocationTypeLocationsFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/LocationType/:key/locations/$count', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetLocationTypeLocationsCountFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/LocationType', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetLocationTypeMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/LocationType', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/LocationType/$count', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetLocationTypeCountMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/LocationType/:key', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetLocationTypeFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.put('*/api/v1/LocationType/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.patch('*/api/v1/LocationType/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.delete('*/api/v1/LocationType/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/MapLayer', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetMapLayerMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/MapLayer', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/MapLayer/$count', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetMapLayerCountMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/MapLayer/:key', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetMapLayerFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.put('*/api/v1/MapLayer/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.patch('*/api/v1/MapLayer/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.delete('*/api/v1/MapLayer/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/MeasureComment/:key/measureTypes', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetMeasureCommentMeasureTypesFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/MeasureComment/:key/measureTypes/$count', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetMeasureCommentMeasureTypesCountFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/MeasureComment', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetMeasureCommentMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/MeasureComment', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/MeasureComment/$count', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetMeasureCommentCountMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/MeasureComment/:key', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetMeasureCommentFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.put('*/api/v1/MeasureComment/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.patch('*/api/v1/MeasureComment/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.delete('*/api/v1/MeasureComment/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/MeasureOption', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetMeasureOptionMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/MeasureOption', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/MeasureOption/$count', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetMeasureOptionCountMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/MeasureOption/:key', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetMeasureOptionFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.put('*/api/v1/MeasureOption/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.patch('*/api/v1/MeasureOption/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.delete('*/api/v1/MeasureOption/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/MeasureOptionPreset/GetMeasureOptionPresetTypes', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetMeasureOptionPresetMeasureOptionPresetTypesMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/MeasureOptionPreset', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetMeasureOptionPresetMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/MeasureOptionPreset', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/MeasureOptionPreset/$count', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetMeasureOptionPresetCountMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/MeasureOptionPreset/:key', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetMeasureOptionPresetFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.put('*/api/v1/MeasureOptionPreset/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.patch('*/api/v1/MeasureOptionPreset/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.delete('*/api/v1/MeasureOptionPreset/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/MeasureType/:key/detectionTypes', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetMeasureTypeDetectionTypesFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/MeasureType/:key/detectionTypes/$count', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetMeasureTypeDetectionTypesCountFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/MeasureType/:key/measureComments', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetMeasureTypeMeasureCommentsFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/MeasureType/:key/measureComments/$count', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetMeasureTypeMeasureCommentsCountFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/MeasureType/:key/measureOptionPresets', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetMeasureTypeMeasureOptionPresetsFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/MeasureType/:key/measureOptionPresets/$count', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetMeasureTypeMeasureOptionPresetsCountFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/MeasureType', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetMeasureTypeMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/MeasureType', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/MeasureType/$count', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetMeasureTypeCountMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/MeasureType/:key', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetMeasureTypeFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.put('*/api/v1/MeasureType/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.patch('*/api/v1/MeasureType/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.delete('*/api/v1/MeasureType/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/MenuItems', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetMenuItemsMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/MenuItems', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/MenuItems/$count', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetMenuItemsCountMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/MenuItems/:key', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetMenuItemsFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.put('*/api/v1/MenuItems/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.patch('*/api/v1/MenuItems/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.delete('*/api/v1/MenuItems/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/Product', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetProductMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/Product', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/Product/$count', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetProductCountMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/Product/:key', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetProductFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.put('*/api/v1/Product/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.patch('*/api/v1/Product/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.delete('*/api/v1/Product/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/Region/:key/locations', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetRegionLocationsFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/Region/:key/locations/$count', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetRegionLocationsCountFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/Region', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/Region', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetRegionMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.patch('*/api/v1/Region/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.delete('*/api/v1/Region/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/Region/:key', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetRegionFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.put('*/api/v1/Region/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/Region/$count', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetRegionCountMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/Route/:key/routeLocations', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetRouteRouteLocationsFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/Route/:key/routeLocations/$count', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetRouteRouteLocationsCountFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/UpsertRoute', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/GetRouteView/:id', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/Route', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetRouteMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/Route', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/Route/$count', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetRouteCountMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/Route/:key', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetRouteFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.put('*/api/v1/Route/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.patch('*/api/v1/Route/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.delete('*/api/v1/Route/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/RouteDistance/:key/previousLocations', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetRouteDistancePreviousLocationsFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/RouteDistance/:key/previousLocations/$count', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetRouteDistancePreviousLocationsCountFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/RouteDistance/:key/nextLocations', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetRouteDistanceNextLocationsFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/RouteDistance/:key/nextLocations/$count', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetRouteDistanceNextLocationsCountFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/RouteDistance/GetRouteDistanceByLocationIdentifiers(locationA=:locationA,locationB=:locationB)', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetRouteDistanceRouteDistanceByLocationIdentifiersFromLocationAAndLocationBMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/RouteDistance', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetRouteDistanceMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/RouteDistance', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/RouteDistance/$count', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetRouteDistanceCountMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/RouteDistance/:key', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetRouteDistanceFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.put('*/api/v1/RouteDistance/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.patch('*/api/v1/RouteDistance/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.delete('*/api/v1/RouteDistance/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/RouteLocation', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetRouteLocationMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/RouteLocation', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/RouteLocation/$count', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetRouteLocationCountMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/RouteLocation/:key', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetRouteLocationFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.put('*/api/v1/RouteLocation/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.patch('*/api/v1/RouteLocation/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.delete('*/api/v1/RouteLocation/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/VersionHistory', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetVersionHistoryMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/VersionHistory', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/VersionHistory/$count', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetVersionHistoryCountMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/VersionHistory/:key', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetVersionHistoryFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.put('*/api/v1/VersionHistory/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.patch('*/api/v1/VersionHistory/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.delete('*/api/v1/VersionHistory/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/WatchDogIgnoreEvent', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetWatchDogIgnoreEventMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.post('*/api/v1/WatchDogIgnoreEvent', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/WatchDogIgnoreEvent/$count', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetWatchDogIgnoreEventCountMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.get('*/api/v1/WatchDogIgnoreEvent/:key', async () => {
        await delay(1000);
        return new HttpResponse(JSON.stringify(getGetWatchDogIgnoreEventFromKeyMock()),
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.put('*/api/v1/WatchDogIgnoreEvent/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.patch('*/api/v1/WatchDogIgnoreEvent/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),http.delete('*/api/v1/WatchDogIgnoreEvent/:key', async () => {
        await delay(1000);
        return new HttpResponse(null,
          { 
            status: 200,
            headers: {
              'Content-Type': 'application/json',
            }
          }
        )
      }),]
